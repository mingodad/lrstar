#!/bin/bash
# Copyright (c) 2023 Logic Magicians Software
#
# BSD 3 License
#
#set -o nounset;
set -o pipefail;
set -o errexit;

SCRIPT="${BASH_SOURCE[0]}"
SRC_DIR=$(dirname "${SCRIPT}");
source $(readlink -f "${SRC_DIR}/functions");

LRSTAR="${LRSTAR:-lrstar}";
DFA="${DFA:-dfa}";
DIRECTORY="";
GRM="";
GRMOPT="";
LGROPT="";


function _help()
{
    cat <<EOF

lrgen [-d <directory>               |
       --directory <directory>      |
       -g          <grm-name>       |
       --grm       <grm-name>       |
       -G          <lrstar options> |
       --grmopt    <lrstar options> |
       -L          <dfa options>    |
       --lgropt    <dfa options>]...

  This tool is a wrapper for invoking lrstar on a syntax grammar & dfa
  on a lexcical grammar.  The syntax grammar must exist, but the
  lexical grammar is not required.

  If the lexical grammar is not supplied, then the user is responsible
  for creating a tokenizer that returns token identifier values as
  specified by lrstar in <grm-name>.lex file.

  Both the syntax and lexcial grammars must reside in the same
  directory.  The files generated by lrstar and dfa will be placed
  into the same directory as the grammar files.

EOF
}


function fatal ()
{
    local msg="${1}";

    echo -e "fatal: ${msg}\n\n";
    exit 1;
}


function validate_options()
{
    DIRECTORY=$(readlink -f "${DIRECTORY}");
    if [ -z "${DIRECTORY}" ] ; then
        _help;
        echo -e "\n";
        fatal "Directory holding grammar files must be specified.";
    elif [ ! -d "${DIRECTORY}" ] ; then
        fatal "--directory value, '${DIRECTORY}', is not a directory.";
    fi;

    if [ -z "${GRM}" ] ; then
        _help;
        echo -e "\n";
        fatal "Name of syntax grammar file must be specified.";
    fi;

    if ! (${LRSTAR} 2>&1) >/dev/null; then
        local msg="${LRSTAR} not found.\nPut 'lrstar' in the path, or set LRSTAR in the environment to its path.";
        fatal "${msg}";
    fi;

    if ! (${DFA} 2>&1) >/dev/null; then
        local msg="${DFA} not found.\nPut 'dfa' in the path, or set DFA in the environment to its path.";
        fatal "${msg}";
    fi;
}


function process_grammars()
{
    local grm="${GRM}.grm";
    local lgr="${GRM}.lgr";

    if [ -f "${grm}" ] ; then
        if ${LRSTAR} "${grm}" ${GRMOPT}; then
            # LRSTAR has run successfully.  Next, run DFA if a lexical
            # grammar exists.
            if [ -f "${lgr}" ] ; then
                local dfa=""
                if ! ${DFA} ${lgr} ${LGROPT}; then
                    fatal "'${DFA} ${lgr} ${LGROPT}' failed.";
                fi;
            fi;
        else
            fatal "'${LRSTAR} "${grm}" ${GRMOPT}' failed.";
        fi;
    else
        fatal "${DIRECTORY}/${grm} is not a regular file.";
    fi;
}


function main()
{
    validate_options;
    if cd "${DIRECTORY}" 2>/dev/null; then
        process_grammars;
    else
        fatal "Cannot change to '${DIRECTORY}'.";
    fi;
}

args=$(/usr/bin/getopt -o hd:g:G:L:                                                     \
                       -n "lrgen"                                                       \
                       --longoptions help,directory:,grm:,grmopt:,lgropt: -- "${@}")

if [ $? != 0 ] ; then
    fatal "Failure processing command line arguments";
fi;

eval set -- "$args";            # Set postional args to ${args}.
unset args;

while true ; do
    case "$1" in
        -h|--help)
            _help;
            exit 0;
            ;;

        -d|--directory)
            if [ -z "${DIRECTORY}" ] ; then
                DIRECTORY=${2};
            else
                fatal "--directory already specified.";
            fi;
            shift 2;
            ;;

        -g|--grm)
            if [ -z "${GRM}" ] ; then
                GRM=${2};
            else
                fatal "--grm already specified.";
            fi;

            shift 2;
            ;;

        -G|--grmopt)
            if [ -z "${GRMOPT}" ] ; then
                GRMOPT=$(eval echo ${2});
            else
                fatal "--grmopt already specified.";
            fi;
            shift 2;
            ;;

        -L|--lgropt)
            if [ -z "${LGROPT}" ] ; then
                LGROPT=$(eval echo ${2});
            else
                fatal "--lgropt already specified.";
            fi;
            shift 2;
            ;;

        --)                 # End of arguments
            shift;
            break;
            ;;

        *)
            fatal "Unknown option '${1}'";
            ;;
    esac
done;

main ${@};
