#!/bin/bash
#
# Copyright (c) 2023 Logic Magicians Software
#
#  This script is used to ensure that the lrstar and dfa program do
#  not generate different output than a previous version.
#
#  The text log files that are output by lrstar and dfa include memory
#  utilization and execution time.  These will vary from run-to-run.
#  It is up to the user of this tool to ensure that the times & memory
#  utilization have not gotten worse in an unjustifiable way.
#
# BSD 3 License
#
set -o errexit;
set -o nounset;
set -o pipefail;

SCRIPT="${0}";
PN=${SCRIPT##*/};      # Program name (remove all before last '/').
DN=${SCRIPT%/*};       # Directory name (removall all after last '/').


function fatal ()
{
    local msg="${1}";
    echo "fatal: ${msg}";
    exit 1;
}


function lrgen ()
{

    declare -A lrstar_options=(
        ["ALGOL60"]="ast o"
        ["ANTLR"]=""
        ["Ada"]="ci m"
        ["C"]="o !ta !na !ast !exp"
        ["C11"]="k=10"
        ["CICS"]=""
        ["COBOL"]=""
        ["CPP5"]="/st"
        ["Calc"]="d dt"
        ["Dbase"]=""
        ["Fortran"]=""
        ["JSON"]="ast d"
        ["Java1"]=""
        ["Java9"]="/k=30"
        ["Kotlin"]=""
        ["LRK"]="k=100 st d"
        ["Modula2"]=""
        ["NCSA"]="st g"
        ["PL1"]="o"
        ["PLM"]=""
        ["PLSQL"]="m"
        ["Pascal"]="ci"
        ["Python"]="/k=3 /st"
        ["SQL"]=""
        ["Typedef"]="d st"
        ["Vba"]=""
        ["XPL"]=""
        ["YACC"]=""
        ["Zeus"]=""
        ["delphi"]="ci"
        ["verilog"]=""
    );

    declare -A dfa_options=(
        ["ALGOL60"]=""
        ["ANTLR"]=""
        ["Ada"]=""
        ["C"]="m"
        ["C11"]=""
        ["CICS"]=""
        ["COBOL"]=""
        ["CPP5"]=""
        ["Calc"]=""
        ["Dbase"]=""
        ["Fortran"]=""
        ["JSON"]=""
        ["Java1"]=""
        ["Java9"]="st"
        ["Kotlin"]=""
        ["LRK"]=""
        ["Modula2"]=""
        ["NCSA"]=""
        ["PL1"]=""
        ["PLM"]="sto m"
        ["PLSQL"]="sto m"
        ["Pascal"]=""
        ["Python"]=""
        ["SQL"]=""
        ["Typedef"]=""
        ["Vba"]=""
        ["XPL"]=""
        ["YACC"]=""
        ["Zeus"]=""
        ["delphi"]=""
        ["verilog"]=""
    );

    local grm="${1}";
    local grm_name="$(basename "${grm}" ".grm")";
    local grm_dir="$(dirname "${grm}")";

    ${LRSTAR_DIR}/scripts/lrgen                         \
        --directory "${grm_dir}"                        \
        --grmopt "${lrstar_options[${grm_name}]}"       \
        --lgropt "${dfa_options[${grm_name}]}";
}


function build ()
{
    local grm_dir="${1}";
    local grm="${2}";
    local root="${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}/usr/local";

    rm -f "${grm_dir}/*.o";
    make                                        \
        -C "${grm_dir}"                         \
        --makefile ${grm_dir}/${grm}.make       \
        LRSTAR_INSTALL_ROOT=${root}
 }


function process ()
{
    local grm_dir="${1}";
    local grm_name="$(basename "${grm_dir}")";
    local grm="${grm_dir}/${grm_name}.grm";
    local lgr="${grm_dir}/${grm_name}.lgr";
    local makefile="${grm_dir}/Makefile"

    if [ -r "${grm}" ] ; then
        lrgen "${grm}";
    else
        echo "${grm} does not exist";
    fi;

    if [ -r "${lgr}" ] ; then
        # The lexical grammer exists, the project should build into an
        # executable with the generated Makefile.
        build "${grm_dir}" "${grm_name}";
   fi;
}


function cleanup ()
{
    # Remove all generated files.
    local grm_dir="${1}";
    rm -f                                       \
       ${grm_dir}/*.o                           \
       ${grm_dir}/$(basename "${grm_dir}");
}


function main ()
{
    export LANG=C;              # Make gcc not use UTF-8.

    if [ -v LRSTAR_DIR ] ; then
        local grammars="${LRSTAR_DIR}/grammars";
        local examples="${LRSTAR_DIR}/examples";
        local grm_name;

        cd ${LRSTAR_DIR};
        for grm in ${grammars}/* ${examples}/*; do
            # The Kotlin lexical grammer is not a dfa grammer, so skip
            # testing until that can be sorted out.
            if [ "$(basename ${grm})" != "Kotlin" ] ; then
                # Pre-cleanup in case last build & test failed.
                #
                # Note that lrstar / dfa cannot be easily run from the
                # build directory via usage of VPATH.  This is true
                # because they write the output into the same place as
                # in the input file.  And lrstar doesn't properly
                # handle the input grammar pathname, incorrectly using
                # the full path.
                #
                # Bottom line, until path handling is improved, ony
                # execute lrstar while the CWD is directory containing
                # the grammar file.
                cleanup "${grm}";
                process "${grm}";

                # Java1 and Java9 test files do not parse
                # correctly.  They are both identical, so
                # I suspect that they both cannot be
                # correct.
                #
                # Similarly, the LRK grammar fails with the default
                # 'k=<val>'.  Up to at least k=5 fails; so skip it.
                #
                grm_name=$(basename "${grm}");
                if [ "${grm_name}" != "Java1" ] &&
                   [ "${grm_name}" != "Java9" ] &&
                   [ "${grm_name}" != "LRK" ]; then
                    if [ -r "${grm}/test.input.txt" ] ; then
                        (cd ${grm};
                         grm_name=$(basename "${grm}");
                         grm_build_dir="${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}/${grm##${LRSTAR_DIR}/}";
                         grm_exec="${grm_build_dir}/${grm_name}";
                         grm_output="${grm_build_dir}/${grm_name}-output.text";
                         
                         rc=0;
                         if [ -x "${grm_exec}" ] ; then
                             if ! "${grm_exec}" --output ${grm_output} test.input.txt; then
                                 rc=1;
                                 echo "${grm}: test parse failed.";
                             fi;
                             exit ${rc};
                         else
                             echo "${grm_exec} does not exist.  Cannot run test.";
                             exit 1;
                         fi);
                    fi;
                fi;

                cleanup "${grm}";
            fi;
        done;
    else
        echo "LRSTAR environment is not set up.";
        false;
    fi;
}

main "${@}";
