#include "lrstar_basic_defs.h"
#include "lrstar_parser_tables.h"
#include "Dbase_LexerTables_typedef.h"
#include "Dbase_ParserTables_typedef.h"
#include "Dbase_Parser.h"
#include "Dbase_Actions.h"

template<>
const int Dbase_parser_tables_t::n_term_symb = 280;

template<>
const int Dbase_parser_tables_t::n_head_symb = 174;

template<>
const int Dbase_parser_tables_t::n_tact_name = 2;

template<>
const int Dbase_parser_tables_t::n_node_name = 0;

template<>
const int Dbase_parser_tables_t::n_head_numb = 618;

template<>
const int Dbase_parser_tables_t::n_f_tail = 619;

template<>
const int Dbase_parser_tables_t::n_tail = 1265;

template<>
const int Dbase_parser_tables_t::n_arga = 280;

template<>
const int Dbase_parser_tables_t::n_argx = 0;

template<>
const int Dbase_parser_tables_t::n_argy = 0;

template<>
const int Dbase_parser_tables_t::n_Bm = 785;

template<>
const int Dbase_parser_tables_t::n_Br = 635;

template<>
const int Dbase_parser_tables_t::n_Bc = 280;

template<>
const int Dbase_parser_tables_t::n_Bf = 280;

template<>
const int Dbase_parser_tables_t::n_Tm = 1996;

template<>
const int Dbase_parser_tables_t::n_Tr = 635;

template<>
const int Dbase_parser_tables_t::n_Tc = 280;

template<>
const int Dbase_parser_tables_t::n_Nm = 1094;

template<>
const int Dbase_parser_tables_t::n_Nr = 635;

template<>
const int Dbase_parser_tables_t::n_Nc = 618;

template<>
const int Dbase_parser_tables_t::n_Rm = 13;

template<>
const int Dbase_parser_tables_t::n_Rr = 635;

template<>
const int Dbase_parser_tables_t::n_Rc = 280;

template<>
const int Dbase_parser_tables_t::n_PL = 618;

template<>
const int Dbase_parser_tables_t::n_nd_fterm = 0;

template<>
const int Dbase_parser_tables_t::n_nd_term = 0;

template<>
const int Dbase_parser_tables_t::n_nd_faction = 0;

template<>
const int Dbase_parser_tables_t::n_nd_action = 0;

template<>
const int Dbase_parser_tables_t::n_tact_numb = 280;

template<>
const int Dbase_parser_tables_t::n_node_numb = 0;

template<>
const int Dbase_parser_tables_t::n_nact_numb = 0;

template<>
const int Dbase_parser_tables_t::n_reverse = 0;

template<>
const int Dbase_parser_tables_t::n_terms = 280; // Number of terminals.

template<>
const int Dbase_parser_tables_t::n_heads = 174; // Number of nonterminals.

template<>
const int Dbase_parser_tables_t::n_prods = 618; // Number of productions.

template<>
const int Dbase_parser_tables_t::n_states = 635; // Number of states.

template<>
const int Dbase_parser_tables_t::accept_state = 634; // Accept state.

template<>
const int Dbase_parser_tables_t::n_termactns = 2; // Number of terminal actions.

template<>
const int Dbase_parser_tables_t::n_nodenames = 0; // Number of node names.

template<>
const int Dbase_parser_tables_t::n_nodeactns = 0; // Number of node actions.

template<>
const int Dbase_parser_tables_t::eof_symb = 1; // <eof> symbol number.

template<>
const int Dbase_parser_tables_t::err_used = 0; // <error> used in grammar?


// Terminal symbols of the grammar.
static const char *term_symb_[280] = {
   "<error>",
   "<eof>",
   "<identifier>",
   "<number>",
   "<string>",
   "<CR>",
   "\'*\'",
   "\'!\'",
   "\'?\'",
   "\'??\'",
   "\'@\'",
   "\'CLEAR\'",
   "\'TO\'",
   "\'GET\'",
   "\'PICTURE\'",
   "\'RANGE\'",
   "\'SAY\'",
   "\'DOUBLE\'",
   "\'=\'",
   "\'ACCEPT\'",
   "\'APPEND\'",
   "\'BLANK\'",
   "\'FROM\'",
   "\'FOR\'",
   "\'TYPE\'",
   "\'ASSIST\'",
   "\'AVERAGE\'",
   "\'WHILE\'",
   "\'BROWSE\'",
   "\'FIELDS\'",
   "\'LOCK\'",
   "\'WIDTH\'",
   "\'FREEZE\'",
   "\'NOFOLLOW\'",
   "\'NOMENU\'",
   "\'NOAPPEND\'",
   "\'CALL\'",
   "\'WITH\'",
   "\'CANCEL\'",
   "\'CHANGE\'",
   "\'ALL\'",
   "\'GETS\'",
   "\'MEMORY\'",
   "\'TYPEAHEAD\'",
   "\'CLOSE\'",
   "\'ALTERNATE\'",
   "\'DATABASES\'",
   "\'FORMAT\'",
   "\'INDEX\'",
   "\'PROCEDURE\'",
   "\'CONTINUE\'",
   "\'COPY\'",
   "\'STRUCTURE\'",
   "\'EXTENDED\'",
   "\'FILE\'",
   "\'COUNT\'",
   "\'CREATE\'",
   "\'LABEL\'",
   "\'QUERY\'",
   "\'REPORT\'",
   "\'SCREEN\'",
   "\'VIEW\'",
   "\'ENVIRONMENT\'",
   "\'DELETE\'",
   "\'DIR\'",
   "\'DISPLAY\'",
   "\'PRINT\'",
   "\'HISTORY\'",
   "\'LAST\'",
   "\'STATUS\'",
   "\'DO\'",
   "\'CASE\'",
   "\'OTHERWISE\'",
   "\'ENDCASE\'",
   "\'ENDDO\'",
   "\'EDIT\'",
   "\'EJECT\'",
   "\'ERASE\'",
   "\'EXIT\'",
   "\'EXPORT\'",
   "\'PFS\'",
   "\'FIND\'",
   "\'GO\'",
   "\'TOP\'",
   "\'BOTTOM\'",
   "\'GOTO\'",
   "\'HELP\'",
   "\'IF\'",
   "\'ELSE\'",
   "\'ENDIF\'",
   "\'IMPORT\'",
   "\'ON\'",
   "\'UNIQUE\'",
   "\'INPUT\'",
   "\'INSERT\'",
   "\'BEFORE\'",
   "\'JOIN\'",
   "\'SAMPLE\'",
   "\'LIST\'",
   "\'OFF\'",
   "\'LOAD\'",
   "\'LOCATE\'",
   "\'LOOP\'",
   "\'MODIFY\'",
   "\'COMMAND\'",
   "\'NOTE\'",
   "\'ERROR\'",
   "\'ESCAPE\'",
   "\'KEY\'",
   "\'PACK\'",
   "\'PARAMETERS\'",
   "\'PRIVATE\'",
   "\'LIKE\'",
   "\'EXCEPT\'",
   "\'RETURN\'",
   "\'MASTER\'",
   "\'PUBLIC\'",
   "\'QUIT\'",
   "\'READ\'",
   "\'SAVE\'",
   "\'RECALL\'",
   "\'REINDEX\'",
   "\'RELEASE\'",
   "\'MODULE\'",
   "\'RENAME\'",
   "\'REPLACE\'",
   "\'FORM\'",
   "\'PLAIN\'",
   "\'HEADING\'",
   "\'NOEJECT\'",
   "\'SUMMARY\'",
   "\'RESTORE\'",
   "\'ADDITIVE\'",
   "\'RESUME\'",
   "\'RETRY\'",
   "\'RUN\'",
   "\'SEEK\'",
   "\'SELECT\'",
   "\'SET\'",
   "\'BELL\'",
   "\'CARRY\'",
   "\'COLOR\'",
   "\',\'",
   "\'CONFIRM\'",
   "\'CONSOLE\'",
   "\'DATE\'",
   "\'DEBUG\'",
   "\'DECIMAL\'",
   "\'DEFAULT\'",
   "\'DELETED\'",
   "\'DELIMITERS\'",
   "\'DEVICE\'",
   "\'DOHISTORY\'",
   "\'ECHO\'",
   "\'EXACT\'",
   "\'FILTER\'",
   "\'FIXED\'",
   "\'FUNCTION\'",
   "\'INTENSITY\'",
   "\'MARGIN\'",
   "\'MEMOWIDTH\'",
   "\'MENU\'",
   "\'MESSAGE\'",
   "\'ORDER\'",
   "\'PATH\'",
   "\'PRINTER\'",
   "\'RELATION\'",
   "\'INTO\'",
   "\'SAFETY\'",
   "\'SCOREBOARD\'",
   "\'STEP\'",
   "\'TALK\'",
   "\'TITLE\'",
   "\'SKIP\'",
   "\'SORT\'",
   "\'A\'",
   "\'D\'",
   "\'STORE\'",
   "\'SUM\'",
   "\'SUSPEND\'",
   "\'TEXT\'",
   "\'ENDTEXT\'",
   "\'TOTAL\'",
   "\'UPDATE\'",
   "\'RANDOM\'",
   "\'USE\'",
   "\'ALIAS\'",
   "\'WAIT\'",
   "\'ZAP\'",
   "\'.AND.\'",
   "\'.OR.\'",
   "\'(\'",
   "\')\'",
   "\'<\'",
   "\'>\'",
   "\'#\'",
   "\'<=\'",
   "\'>=\'",
   "\'<>\'",
   "\'+\'",
   "\'-\'",
   "\'/\'",
   "\'^\'",
   "\'**\'",
   "\'.NOT.\'",
   "\'RECORD\'",
   "\'NEXT\'",
   "\'REST\'",
   "\'X\'",
   "\'N\'",
   "\'B\'",
   "\'GR\'",
   "\'BG\'",
   "\'G\'",
   "\'BR\'",
   "\'R\'",
   "\'W\'",
   "\'ABS\'",
   "\'ASC\'",
   "\'AT\'",
   "\'BOF\'",
   "\'CDOW\'",
   "\'CHR\'",
   "\'CMONTH\'",
   "\'COL\'",
   "\'CTOD\'",
   "\'DAY\'",
   "\'DBF\'",
   "\'DISKSPACE\'",
   "\'DOW\'",
   "\'DTOC\'",
   "\'EOF\'",
   "\'EXP\'",
   "\'FIELD\'",
   "\'FKLABEL\'",
   "\'FKMAX\'",
   "\'FOUND\'",
   "\'GETENV\'",
   "\'IIF\'",
   "\'INKEY\'",
   "\'INT\'",
   "\'ISALPHA\'",
   "\'ISCOLOR\'",
   "\'ISLOWER\'",
   "\'ISUPPER\'",
   "\'LEFT\'",
   "\'LEN\'",
   "\'LOG\'",
   "\'LOWER\'",
   "\'LTRIM\'",
   "\'LUPDATE\'",
   "\'MAX\'",
   "\'MIN\'",
   "\'MOD\'",
   "\'MONTH\'",
   "\'NDX\'",
   "\'OS\'",
   "\'PCOL\'",
   "\'PROW\'",
   "\'READKEY\'",
   "\'RECOUNT\'",
   "\'RECNO\'",
   "\'RECSIZE\'",
   "\'REPLICATE\'",
   "\'RIGHT\'",
   "\'ROUND\'",
   "\'ROW\'",
   "\'RTRIM\'",
   "\'SPACE\'",
   "\'SQRT\'",
   "\'STR\'",
   "\'STUFF\'",
   "\'SUBSTR\'",
   "\'TIME\'",
   "\'TRANSFORM\'",
   "\'TRIM\'",
   "\'UPPER\'",
   "\'VAL\'",
   "\'VERSION\'",
   "\'YEAR\'",
};

template<>
const char * const *Dbase_parser_tables_t::term_symb = &term_symb_[0];

// Nonterminal symbols of the grammar.
static const char *head_symb_[174] = {
   "goal",
   "cmdlist",
   "command",
   "statement",
   "text2",
   "text",
   "any",
   "condition",
   "and_or",
   "relation",
   "relop",
   "exp",
   "expop",
   "operand",
   "position",
   "scope",
   "normal",
   "reverse",
   "background",
   "border",
   "foreground",
   "fcolor",
   "bcolor",
   "caselist",
   "explist",
   "parmlist",
   "fldlist",
   "filenamelist",
   "varlist",
   "fieldWITHexplist",
   "alias",
   "col",
   "database",
   "date",
   "device",
   "dir",
   "drive",
   "field",
   "filename",
   "filetype",
   "functionkey",
   "high",
   "keyfield",
   "keyword",
   "low",
   "module",
   "program",
   "parameter",
   "procedure",
   "prompt",
   "row",
   "size",
   "skeleton",
   "template",
   "variable",
   "width",
   "function",
   "command+",
   "statement?",
   "explist?",
   "(PICTURE template | RANGE low high)",
   "(PICTURE template | RANGE low high)*",
   "(PICTURE template)?",
   "DOUBLE?",
   "prompt?",
   "(BLANK | FROM filename | FOR condition | TYPE filetype)",
   "(BLANK | FROM filename | FOR condition | TYPE filetype)*",
   "(scope | explist | TO varlist | FOR condition | WHILE condition)",
   "(scope | explist | TO varlist | FOR condition | WHILE condition)*",
   "(FIELDS fldlist | LOCK <number> | WIDTH size | FREEZE field | NOFOLLOW | NOMENU | NOAPPEND)",
   "(FIELDS fldlist | LOCK <number> | WIDTH size | FREEZE field | NOFOLLOW | NOMENU | NOAPPEND)*",
   "(WITH variable)?",
   "(scope | FIELDS fldlist | FOR condition | WHILE condition)",
   "(scope | FIELDS fldlist | FOR condition | WHILE condition)*",
   "(ALL | FIELDS | GETS | MEMORY | TYPEAHEAD)",
   "(ALL | ALTERNATE | DATABASES | FORMAT | INDEX | PROCEDURE)",
   "(EXTENDED | TO filename | FIELDS fldlist)",
   "(EXTENDED | TO filename | FIELDS fldlist)*",
   "(FILE filename | TO filename | scope | FIELDS fldlist | FOR condition | WHILE condition | TYPE filetype)",
   "(FILE filename | TO filename | scope | FIELDS fldlist | FOR condition | WHILE condition | TYPE filetype)*",
   "(scope | TO variable | FOR condition | WHILE condition)",
   "(scope | TO variable | FOR condition | WHILE condition)*",
   "(LABEL | QUERY | REPORT | SCREEN)?",
   "(FROM filename)?",
   "(VIEW filename | FROM ENVIRONMENT)",
   "(VIEW filename | FROM ENVIRONMENT)*",
   "(scope | FOR condition | WHILE condition)",
   "(scope | FOR condition | WHILE condition)*",
   "filename?",
   "(scope | explist | FOR condition | WHILE condition | TO PRINT)",
   "(scope | explist | FOR condition | WHILE condition | TO PRINT)*",
   "(LAST <number> | TO PRINT)",
   "(LAST <number> | TO PRINT)*",
   "(MEMORY | STATUS | STRUCTURE)",
   "(TO PRINT)?",
   "(WITH parmlist)?",
   "TYPE?",
   "(<number> | <string>)",
   "(<number> | TOP | BOTTOM)",
   "keyword?",
   "(ELSE cmdlist)?",
   "(ON keyfield | TO filename | UNIQUE)",
   "(ON keyfield | TO filename | UNIQUE)*",
   "(BLANK | BEFORE)",
   "(BLANK | BEFORE)*",
   "(WITH database | TO filename | FOR condition | FIELDS fldlist)",
   "(WITH database | TO filename | FOR condition | FIELDS fldlist)*",
   "(FROM filename | scope | FOR condition | WHILE condition | SAMPLE | TO PRINT | TO FILE filename)",
   "(FROM filename | scope | FOR condition | WHILE condition | SAMPLE | TO PRINT | TO FILE filename)*",
   "(scope | explist | FOR condition | WHILE condition | OFF | TO PRINT)",
   "(scope | explist | FOR condition | WHILE condition | OFF | TO PRINT)*",
   "(COMMAND | LABEL | QUERY | REPORT | SCREEN | VIEW)",
   "(TO MASTER)?",
   "SAVE?",
   "(scope | fieldWITHexplist | FOR condition | WHILE condition)",
   "(scope | fieldWITHexplist | FOR condition | WHILE condition)*",
   "(scope | FOR condition | WHILE condition | PLAIN | HEADING <string> | NOEJECT | TO PRINT | TO FILE filename | SUMMARY)",
   "(scope | FOR condition | WHILE condition | PLAIN | HEADING <string> | NOEJECT | TO PRINT | TO FILE filename | SUMMARY)*",
   "(FROM filename | ADDITIVE | PLAIN | HEADING <string> | NOEJECT)",
   "(FROM filename | ADDITIVE | PLAIN | HEADING <string> | NOEJECT)*",
   "(TO filename? | ON | OFF)",
   "(ON | OFF)",
   "normal?",
   "reverse?",
   "border?",
   "background?",
   "(TO <string> | TO DEFAULT | ON | OFF)",
   "(PRINT | SCREEN)",
   "(ON | OFF | TO ALL | TO fldlist)",
   "(TO condition | TO FILE '?' | TO FILE filename)",
   "(TO '?' | TO filename)",
   "(TO '?' | TO filenamelist)",
   "width?",
   "<string>?",
   "<number>?",
   "dir?",
   "(exp | INTO alias)",
   "(exp | INTO alias)*",
   "(A | D)?",
   "(',' field (A | D)?)",
   "(',' field (A | D)?)*",
   "(scope | ON field (A | D)? (',' field (A | D)?)* | FOR condition | WHILE condition | TO filename)",
   "(scope | ON field (A | D)? (',' field (A | D)?)* | FOR condition | WHILE condition | TO filename)*",
   "(scope | ON keyfield | FIELDS fldlist | FOR condition | WHILE condition | TO filename)",
   "(scope | ON keyfield | FIELDS fldlist | FOR condition | WHILE condition | TO filename)*",
   "(ON keyfield | FROM filename | REPLACE fieldWITHexplist | RANDOM)",
   "(ON keyfield | FROM filename | REPLACE fieldWITHexplist | RANDOM)*",
   "(filename | INDEX filenamelist | ALIAS alias)",
   "(filename | INDEX filenamelist | ALIAS alias)*",
   "(prompt | TO variable)",
   "(prompt | TO variable)*",
   "(any | <CR>)",
   "(any | <CR>)*",
   "any*",
   "('<' | '>' | '#' | '=' | '<=' | '>=' | '<>')",
   "('+' | '-' | '*' | '/' | '^' | '**')",
   "('/' background)?",
   "'*'?",
   "'+'?",
   "(N | B | GR | BG | G | BR | R | W)",
   "(CASE condition <CR> cmdlist)",
   "(CASE condition <CR> cmdlist)+",
   "(',' exp)",
   "(',' exp)*",
   "(',' parameter)",
   "(',' parameter)*",
   "(',' field)",
   "(',' field)*",
   "(',' filename)",
   "(',' filename)*",
   "(',' variable)",
   "(',' variable)*",
   "(',' field WITH exp)",
   "(',' field WITH exp)*",
};

template<>
const char * const *Dbase_parser_tables_t::head_symb = &head_symb_[0];

// Terninal action names found in the grammar ...
static const char *tact_name_[2] = {
   "error",
   "lookup",
};

template<>
const char * const *Dbase_parser_tables_t::tact_name = &tact_name_[0];

template<>
const char * const *Dbase_parser_tables_t::node_name = 0;

// Head symbol numbers for the productions.
static const uint8 head_numb_[618] = {
       0,     1,     2,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     4, 
       5,     6,     6,     6,     7,     7,     8,     8,     9,     9, 
      10,    11,    11,    12,    13,    13,    13,    13,    13,    13, 
      14,    15,    15,    15,    15,    16,    17,    18,    19,    20, 
      21,    21,    22,    23,    24,    25,    26,    27,    28,    29, 
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39, 
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49, 
      50,    51,    52,    53,    54,    55,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    56,    56,    56,    56, 
      56,    56,    56,    56,    56,    56,    57,    57,    58,    58, 
      59,    59,    60,    60,    61,    61,    62,    62,    63,    63, 
      64,    64,    65,    65,    65,    65,    66,    66,    67,    67, 
      67,    67,    67,    68,    68,    69,    69,    69,    69,    69, 
      69,    69,    70,    70,    71,    71,    72,    72,    72,    72, 
      73,    73,    74,    74,    74,    74,    74,    75,    75,    75, 
      75,    75,    75,    76,    76,    76,    77,    77,    78,    78, 
      78,    78,    78,    78,    78,    79,    79,    80,    80,    80, 
      80,    81,    81,    82,    82,    82,    82,    82,    83,    83, 
      84,    84,    85,    85,    86,    86,    86,    87,    87,    88, 
      88,    89,    89,    89,    89,    89,    90,    90,    91,    91, 
      92,    92,    93,    93,    93,    94,    94,    95,    95,    96, 
      96,    97,    97,    98,    98,    98,    99,    99,   100,   100, 
     101,   101,   101,   102,   102,   103,   103,   104,   104,   105, 
     105,   105,   105,   106,   106,   107,   107,   107,   107,   107, 
     107,   107,   108,   108,   109,   109,   109,   109,   109,   109, 
     110,   110,   111,   111,   111,   111,   111,   111,   112,   112, 
     113,   113,   114,   114,   114,   114,   115,   115,   116,   116, 
     116,   116,   116,   116,   116,   116,   116,   117,   117,   118, 
     118,   118,   118,   118,   119,   119,   120,   120,   120,   121, 
     121,   122,   122,   123,   123,   124,   124,   125,   125,   126, 
     126,   126,   126,   127,   127,   128,   128,   128,   128,   129, 
     129,   129,   130,   130,   131,   131,   132,   132,   133,   133, 
     134,   134,   135,   135,   136,   136,   137,   137,   138,   138, 
     138,   139,   140,   140,   141,   141,   141,   141,   141,   142, 
     142,   143,   143,   143,   143,   143,   143,   144,   144,   145, 
     145,   145,   145,   146,   146,   147,   147,   147,   148,   148, 
     149,   149,   150,   150,   151,   151,   152,   152,   153,   153, 
     154,   154,   154,   154,   154,   154,   154,   155,   155,   155, 
     155,   155,   155,   156,   156,   157,   157,   158,   158,   159, 
     159,   159,   159,   159,   159,   159,   159,   160,   161,   161, 
     162,   163,   163,   164,   165,   165,   166,   167,   167,   168, 
     169,   169,   170,   171,   171,   172,   173,   173, 
};

template<>
const uint8 *Dbase_parser_tables_t::head_numb = &head_numb_[0];

// First tail symbol index into the tail list ...
static const uint16 f_tail_[619] = {
       0,     2,     3,     5,     7,     9,    11,    13,    18,    23, 
      28,    33,    36,    40,    42,    43,    45,    47,    50,    51, 
      53,    55,    57,    58,    61,    63,    65,    69,    71,    73, 
      75,    77,    80,    83,    86,    92,    98,   100,   101,   103, 
     105,   106,   111,   113,   115,   117,   119,   125,   130,   132, 
     136,   138,   140,   142,   144,   147,   150,   152,   154,   155, 
     157,   160,   162,   166,   170,   174,   175,   177,   179,   181, 
     185,   189,   195,   197,   198,   200,   202,   203,   205,   207, 
     211,   215,   218,   222,   224,   227,   231,   233,   234,   235, 
     237,   240,   244,   250,   256,   258,   260,   261,   264,   267, 
     270,   273,   277,   283,   291,   301,   304,   307,   310,   313, 
     317,   321,   324,   327,   331,   334,   337,   340,   343,   346, 
     349,   352,   355,   360,   363,   366,   369,   372,   376,   380, 
     383,   387,   391,   395,   398,   402,   406,   410,   413,   416, 
     419,   422,   425,   428,   432,   435,   438,   440,   442,   446, 
     448,   449,   452,   454,   457,   459,   461,   463,   465,   466, 
     467,   468,   469,   470,   471,   472,   475,   476,   477,   480, 
     483,   484,   485,   488,   489,   490,   491,   492,   493,   495, 
     498,   501,   503,   505,   506,   507,   510,   513,   514,   515, 
     517,   518,   519,   520,   521,   523,   525,   527,   529,   531, 
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544, 
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554, 
     555,   556,   557,   558,   559,   560,   561,   565,   569,   575, 
     578,   582,   586,   590,   593,   597,   600,   604,   607,   610, 
     613,   617,   621,   624,   627,   631,   635,   639,   643,   646, 
     649,   653,   661,   664,   668,   672,   675,   679,   683,   689, 
     693,   697,   701,   705,   708,   714,   717,   723,   729,   733, 
     737,   740,   743,   746,   749,   752,   755,   758,   764,   770, 
     776,   779,   783,   787,   791,   799,   809,   815,   823,   826, 
     832,   836,   840,   844,   848,   851,   855,   856,   858,   858, 
     859,   859,   860,   862,   865,   865,   867,   867,   869,   869, 
     870,   870,   871,   872,   874,   876,   878,   878,   880,   881, 
     882,   884,   886,   888,   888,   890,   892,   894,   896,   898, 
     899,   900,   901,   901,   903,   903,   905,   906,   908,   910, 
     912,   912,   914,   915,   916,   917,   918,   919,   920,   921, 
     922,   923,   924,   925,   926,   928,   930,   930,   932,   934, 
     936,   937,   939,   941,   943,   945,   945,   947,   948,   950, 
     952,   954,   954,   956,   956,   957,   958,   959,   960,   960, 
     962,   964,   966,   966,   968,   969,   971,   973,   973,   975, 
     975,   976,   977,   978,   980,   982,   984,   984,   986,   988, 
     990,   990,   992,   993,   994,   995,   995,   997,   997,   999, 
     999,  1000,  1001,  1002,  1003,  1004,  1005,  1005,  1006,  1006, 
    1008,  1010,  1012,  1013,  1013,  1015,  1016,  1017,  1017,  1019, 
    1021,  1023,  1025,  1027,  1027,  1029,  1031,  1032,  1034,  1036, 
    1037,  1039,  1042,  1042,  1044,  1045,  1046,  1048,  1050,  1051, 
    1053,  1053,  1055,  1056,  1057,  1058,  1059,  1060,  1061,  1061, 
    1063,  1063,  1064,  1065,  1066,  1068,  1070,  1070,  1072,  1073, 
    1075,  1077,  1078,  1080,  1081,  1083,  1086,  1087,  1087,  1089, 
    1091,  1092,  1093,  1095,  1096,  1096,  1098,  1100,  1101,  1102, 
    1103,  1104,  1104,  1105,  1105,  1106,  1106,  1107,  1107,  1108, 
    1110,  1112,  1113,  1114,  1115,  1116,  1117,  1118,  1120,  1122, 
    1124,  1127,  1130,  1132,  1134,  1136,  1138,  1138,  1139,  1139, 
    1140,  1140,  1141,  1141,  1142,  1143,  1145,  1145,  1147,  1147, 
    1148,  1149,  1152,  1152,  1154,  1155,  1159,  1161,  1163,  1165, 
    1165,  1167,  1168,  1170,  1172,  1174,  1176,  1178,  1178,  1180, 
    1182,  1184,  1186,  1187,  1187,  1189,  1190,  1192,  1194,  1194, 
    1196,  1197,  1199,  1199,  1201,  1202,  1203,  1203,  1205,  1205, 
    1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216, 
    1217,  1218,  1219,  1220,  1220,  1222,  1222,  1223,  1223,  1224, 
    1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1236,  1237, 
    1239,  1241,  1241,  1243,  1245,  1245,  1247,  1249,  1249,  1251, 
    1253,  1253,  1255,  1257,  1257,  1259,  1263,  1263,  1265, 
};

template<>
const uint16 *Dbase_parser_tables_t::f_tail = &f_tail_[0];

// Tail symbol numbers ...
static const int16 tail_[1265] = {
      -1,     1,   -57,   -58,     5,     6,    -5,     7,    -2,     8, 
     -59,     9,   -24,    10,   -14,    11,    12,   -14,    10,   -14, 
      13,   -54,   -61,    10,   -14,    16,   -11,   -62,    10,   -14, 
      12,   -14,   -63,   -54,    18,   -11,    19,   -64,    12,   -54, 
      20,   -66,    25,    26,   -68,    28,   -70,    36,   -45,   -71, 
      38,    39,   -73,    11,   -74,    44,   -75,    50,    51,    52, 
     -77,    51,   -79,    55,   -81,    56,   -82,   -38,   -83,    56, 
     -85,    63,   -87,    64,   -88,    65,   -90,    65,    67,   -92, 
      65,   -93,   -94,    70,   -46,   -95,    70,    71,   -23,    72, 
     -57,    73,    70,    27,    -7,     5,    -1,    74,    75,   -73, 
      76,    77,     8,    77,   -38,    78,    79,    12,   -38,   -96, 
      80,    81,   -97,    82,   -98,    85,   -98,    86,   -99,    87, 
      -7,     5,    -1,  -100,    89,    90,    22,   -38,   -96,    80, 
      48,  -102,    93,   -64,    12,   -54,    94,  -104,    96,  -106, 
      57,  -108,    98,  -110,    98,    67,   -92,    98,   -93,   -94, 
     100,   -45,   101,   -87,   102,   103,    52,   103,  -111,   -38, 
     105,    -5,    91,   106,   -58,     5,    91,   107,   -58,     5, 
      91,   108,   -58,     5,   109,   110,   -28,   111,   -28,   111, 
      40,   111,    40,   112,   -52,   111,    40,   113,   -52,    49, 
     -48,     5,    -1,   114,  -112,   116,   -28,   117,   118,  -113, 
     120,   -87,   121,   122,   -28,   122,    40,   122,    40,   112, 
     -52,   122,    40,   113,   -52,   122,   123,   -45,   124,   -38, 
      12,   -38,   125,  -115,    59,   126,     8,    59,   126,   -38, 
    -117,   131,  -119,   133,   134,   135,    -2,   119,    12,   -38, 
     119,    12,   -38,    40,   119,    12,   -38,    40,   112,   -52, 
     119,    12,   -38,    40,   113,   -52,   136,   -11,   137,   -30, 
     138,   138,    45,  -120,   138,   139,  -121,   138,   140,  -121, 
     138,   141,  -121,   138,   141,    12,  -122,   138,   141,    12, 
    -122,   142,  -123,   138,   141,    12,  -122,   142,  -123,   142, 
    -124,   138,   141,    12,  -122,   142,  -123,   142,  -124,   142, 
    -125,   138,   143,  -121,   138,   144,  -121,   138,   145,   -33, 
     138,   146,  -121,   138,   147,    12,     3,   138,   148,    12, 
     -36,   138,   149,  -121,   138,   150,  -126,   138,   151,    12, 
    -127,   138,   152,  -121,   138,   153,  -121,   138,   107,  -121, 
     138,   154,  -121,   138,    29,  -128,   138,   155,  -129,   138, 
     156,  -121,   138,    47,  -130,   138,   157,   -40,    12,     4, 
     138,   128,  -121,   138,    86,  -121,   138,    48,  -131,   138, 
     158,  -121,   138,   159,    12,     3,   138,   160,    12,  -132, 
     138,   161,  -121,   138,   162,    12,  -133,   138,   163,    12, 
    -134,   138,   164,    12,  -135,   138,    66,  -121,   138,   165, 
      12,   -34,   138,    49,    12,   -88,   138,   166,    12,  -137, 
     138,   168,  -121,   138,   169,  -121,   138,    69,  -121,   138, 
     170,  -121,   138,   171,  -121,   138,   172,  -121,   138,    43, 
      12,     3,   138,    92,  -121,   138,    61,  -130,   173,  -134, 
     174,  -142,   177,   -11,    12,   -28,   178,   -68,   179,   180, 
      -4,   181,   182,  -144,    24,   -38,   -94,   183,  -146,   185, 
       8,   185,  -148,   187,  -150,   188,  -152,  -153,     2,     3, 
       4,    -9,    -7,    -8,    -9,   189,   190,   -11,   -10,   -11, 
     191,    -9,   192,  -154,   -13,   -11,   -12,   -13,  -155,     3, 
       4,     2,   -56,   204,   -13,   191,   -11,   192,   -50,   142, 
     -31,   205,     3,   206,     3,   207,    40,   -20,  -156,  -157, 
     -20,  -156,  -157,   -22,   -22,   -21,  -158,   208,   -22,  -159, 
    -161,   -11,  -163,   -47,  -165,   -37,  -167,   -38,  -169,   -54, 
    -171,   -37,    37,   -11,  -173,     2,     3,     2,     3,     2, 
       2,     2,     2,     2,     2,     3,     3,     2,     2,     3, 
       2,     2,     2,     2,     4,     3,     3,     2,     4,     2, 
       3,   217,   191,   -11,   192,   218,   191,     4,   192,   219, 
     191,     4,   142,     4,   192,   220,   191,   192,   221,   191, 
     -11,   192,   222,   191,     3,   192,   223,   191,   -11,   192, 
     224,   191,   192,   225,   191,     4,   192,   145,   191,   192, 
     226,   191,   -11,   192,   227,   191,   192,   149,   191,   192, 
     228,   191,   192,   229,   191,   -11,   192,   230,   191,   -11, 
     192,   231,   191,   192,   106,   191,   192,   232,   191,     3, 
     192,   233,   191,     3,   192,    54,   191,   -38,   192,   234, 
     191,     3,   192,   235,   191,   192,   236,   191,   192,   237, 
     191,   -54,   192,   238,   191,    -7,   142,   -11,   142,   -11, 
     192,   239,   191,   192,   240,   191,     3,   192,   241,   191, 
       4,   192,   242,   191,   192,   243,   191,     4,   192,   244, 
     191,     4,   192,   245,   191,     4,   142,     3,   192,   246, 
     191,     4,   192,   247,   191,     3,   192,   248,   191,     4, 
     192,   249,   191,     4,   192,   250,   191,   192,   251,   191, 
       3,   142,     3,   192,   162,   191,   192,   252,   191,     3, 
     142,     3,   192,   253,   191,     3,   142,     3,   192,   254, 
     191,   -11,   192,   255,   191,     3,   192,   256,   191,   192, 
     257,   191,   192,   258,   191,   192,   259,   191,   192,   260, 
     191,   192,   261,   191,   192,   262,   191,   192,   263,   191, 
       4,   142,     3,   192,   264,   191,     4,   142,     3,   192, 
     265,   191,     3,   142,     3,   192,   266,   191,   192,   267, 
     191,     4,   192,   268,   191,     3,   192,   269,   191,     3, 
     192,   270,   191,     3,   142,     3,   142,     3,   192,   271, 
     191,     4,   142,     3,   142,     3,   142,     4,   192,   272, 
     191,     4,   142,     3,   192,   272,   191,     4,   142,     3, 
     142,     3,   192,   273,   191,   192,   274,   191,   -11,   142, 
       4,   192,   275,   191,     4,   192,    24,   191,   -11,   192, 
     276,   191,     4,   192,   277,   191,     4,   192,   278,   191, 
     192,   279,   191,   -11,   192,    -2,   -57,    -2,    -3,   -24, 
      14,   -53,    15,   -44,   -41,   -61,   -60,    14,   -53,    17, 
     -49,    21,    22,   -38,    23,    -7,    24,   -39,   -66,   -65, 
     -15,   -24,    12,   -28,    23,    -7,    27,    -7,   -68,   -67, 
      29,   -26,    30,     3,    31,   -51,    32,   -37,    33,    34, 
      35,   -70,   -69,    37,   -54,   -15,    29,   -26,    23,    -7, 
      27,    -7,   -73,   -72,    40,    29,    41,    42,    43,    40, 
      45,    46,    47,    48,    49,    53,    12,   -38,    29,   -26, 
     -77,   -76,    54,   -38,    12,   -38,   -15,    29,   -26,    23, 
      -7,    27,    -7,    24,   -39,   -79,   -78,   -15,    12,   -54, 
      23,    -7,    27,    -7,   -81,   -80,    57,    58,    59,    60, 
      22,   -38,    61,   -38,    22,    62,   -85,   -84,   -15,    23, 
      -7,    27,    -7,   -87,   -86,   -38,   -15,   -24,    23,    -7, 
      27,    -7,    12,    66,   -90,   -89,    68,     3,    12,    66, 
     -92,   -91,    42,    69,    52,    12,    66,    37,   -25,    24, 
       3,     4,     3,    83,    84,   -43,    88,    -1,    91,   -42, 
      12,   -38,    92,  -102,  -101,    21,    95,  -104,  -103,    37, 
     -32,    12,   -38,    23,    -7,    29,   -26,  -106,  -105,    22, 
     -38,   -15,    23,    -7,    27,    -7,    97,    12,    66,    12, 
      54,   -38,  -108,  -107,   -15,   -24,    23,    -7,    27,    -7, 
      99,    12,    66,  -110,  -109,   104,    57,    58,    59,    60, 
      61,    12,   115,   119,   -15,   -29,    23,    -7,    27,    -7, 
    -115,  -114,   -15,    23,    -7,    27,    -7,   127,   128,     4, 
     129,    12,    66,    12,    54,   -38,   130,  -117,  -116,    22, 
     -38,   132,   127,   128,     4,   129,  -119,  -118,    12,   -88, 
      91,    99,    91,    99,   -16,   -17,   -19,   -18,    12,     4, 
      12,   148,    91,    99,    66,    60,    91,    99,    12,    40, 
      12,   -26,    12,    -7,    12,    54,     8,    12,    54,   -38, 
      12,     8,    12,   -38,    12,     8,    12,   -27,   -55,     4, 
       3,   -35,   -11,   167,   -30,  -137,  -136,   175,   176,   142, 
     -37,  -138,  -140,  -139,   -15,    91,   -37,  -138,  -140,    23, 
      -7,    27,    -7,    12,   -38,  -142,  -141,   -15,    91,   -42, 
      29,   -26,    23,    -7,    27,    -7,    12,   -38,  -144,  -143, 
      91,   -42,    22,   -38,   125,   -29,   184,  -146,  -145,   -38, 
      48,   -27,   186,   -30,  -148,  -147,   -49,    12,   -54,  -150, 
    -149,    -6,     5,  -152,  -151,  -153,    -6,   193,   194,   195, 
      18,   196,   197,   198,   199,   200,     6,   201,   202,   203, 
     201,   -18,     6,   199,   209,   210,   211,   212,   213,   214, 
     215,   216,    71,    -7,     5,    -1,  -160,  -161,  -160,   142, 
     -11,  -163,  -162,   142,   -47,  -165,  -164,   142,   -37,  -167, 
    -166,   142,   -38,  -169,  -168,   142,   -54,  -171,  -170,   142, 
     -37,    37,   -11,  -173,  -172, 
};

template<>
const int16 *Dbase_parser_tables_t::tail = &tail_[0];

// Arguments for token actions ...
static const int8 arga_[280] = {
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *Dbase_parser_tables_t::arga = &arga_[0];

template<>
const uint32 *Dbase_parser_tables_t::argx = 0;

template<>
const uint32 *Dbase_parser_tables_t::argy = 0;

// Boolean matrix ...
static const uint8 Bm_[785] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   196,     3,     8,   192,     8,     0,    36,     0, 
      10,     0,     0,     0,     2,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,   128,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,    28,     0,     8, 
       0,     4,     0,     0,     8,     0,     8,     8,     2,     8, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,    16,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     4,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,    32,    15,     0,     0,     0,     0, 
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0, 
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0, 
       0,    56,     0,     0,     0,     0,     0,     0,     0,     4, 
       1,    10,     0,     0,     0,     0,     0,     0,     4,     0, 
      16,     0,     0,    16,     0,     0,     0,     0,     0,     0, 
       4,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     8,     0,     0,     0,     0,     0, 
       2,     0,     0,     0,     0,     0,   121,     0,     0,     4, 
       0,     0,     0,     0,     4,     0,     0,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0, 
       4,     0,     0,     1,     0,     0,     0,     0,     4,     0, 
       0,    32,   216,    64,     9,    68,    16,    64,    26,     0, 
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,    64,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,   192,     1,     0,    14,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,    15,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,    28,     4,    28, 
       1,     4,     0,     0,     8,     0,     8,     8,     6,     0, 
       0,    96,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,    52,     1,     0,     0,     0,     0,     0,     0,     0, 
       4,    60,     1,     4,     0,     0,     0,     0,     0,     0, 
       4,    20,     1,     0,     0,     0,     0,     0,     0,     0, 
       4,     0,     0,     2,     0,    64,     0,     0,     0,     0, 
       0,     0,     0,    20,     1,     0,     0,     0,     0,     0, 
       0,     0,     4,    32,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     4,    64,   128,     0,     0,     0,     0, 
       0,     0,     0,     0,   224,     1,     0,     4,     0,     0, 
       0,     0,    96,     0,     0,     0,     0,     0,     1,     0, 
       0,     0,   128,     0,     0,     0,     0,     0,     4,   164, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4, 
      22,     1,     0,     0,     0,     1,     0,     0,     0,     4, 
      28,     4,    28,     1,     4,     0,     0,    10,     0,     8, 
       8,     6,     4,     0,    20,     1,     0,     0,     0,     0, 
       0,     0,     0,     4,     0,     0,     2,     0,     0,     0, 
       0,     0,    96,     1,     0,     0,     4,     0,     0,     0, 
       0,    32,     2,     0,     0,     0,     0,     0,     0,    32, 
       2,     0,     0,     0,     0,     4,    20,     1,     0,     0, 
      32,     0,     0,     0,     0,     4,    64,     4,     0,     0, 
       0,     0,     0,     0,     0,     0,   192,     1,    60,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       4,    52,     1,     0,     0,    32,     0,     0,     0,     0, 
       4,     0,     0,     2,     0,     0,     0,    32,     0,     8, 
       0,     1,     0,     4,     0,     0,    64,     0,     0,     0, 
       0,     0,     0,     2,     0,    16,     4,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,    64,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,   208,     1,     0,     4, 
      32,     0,     2,     0,     0,     0,     0,     0,     0,     0, 
       4,     0,     0,     0,     4,     0,     0,     0,     0,     0, 
       0,     8,     0,     0,     0,     0,     0,     0,     0,     0, 
      64,   128,     0,     0,     0,     0,     0,     0,     0,     0, 
     240,     1,     0,     0,     0,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,    24,    16,     0, 
       0,     0,     0,     0,     0,     0,     0,    16,     0,     0, 
       0,     0,    32,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     4,     4,    64,     0,     0,     0,     0, 
       0,     0,     0,     0,     4,   192,     1,    64,    16,     0, 
       0,     0,     0,     0,     0,     0,     0,   192,     1,     0, 
       4,    20,     1,     0,     0,     0,     0,   224,     0,     0, 
       4,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     4,     1,     0,     0,     0,     0,     0, 
       0,     0,     0,     8,     0,    28,     0,     8,     0,     4, 
       0,     0,     8,     0,    40,     8,     2,     0,    48,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196, 
       3,     8,   192,     8,    64,    36,     0,    10,     0,     0, 
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     4,    16,     0, 
};

template<>
const uint8 *Dbase_parser_tables_t::Bm = &Bm_[0];

// Boolean matrix row (for state)...
static const uint16 Br_[635] = {
      12,    24,    12,    35,    45,     0,    12,    57,    57,    69, 
      81,     0,     0,     0,    93,     0,   102,   111,   119,     0, 
     127,     0,    93,   136,   148,     0,   160,    92,   172,   184, 
     184,    93,    57,    22,     0,    81,     0,     0,     0,   136, 
      93,     0,   192,     0,   124,    93,   204,    93,    93,   208, 
       0,   220,    93,     0,    73,     0,    12,    92,    57,    93, 
     229,    69,     0,    57,     0,     0,     0,    93,     0,   240, 
       0,    57,   252,   263,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174, 
     174,   174,   174,    57,    57,   275,    84,    92,   285,   297, 
     309,    44,   319,   329,     0,   339,    93,   351,   361,   297, 
      92,     0,    44,    76,    57,   319,    93,   373,   384,    57, 
      93,   396,    92,   406,   417,   428,   440,    92,     0,   361, 
      93,    12,    12,    12,     0,   256,    35,   361,   256,    93, 
      92,   452,   160,   464,    93,   263,   475,   483,   483,   475, 
     483,   483,    69,   483,    92,    92,   483,   475,    92,   483, 
     483,   483,   483,   475,    92,   483,    92,    69,   483,   483, 
      92,   483,    92,    92,   483,    92,    92,    92,   483,    92, 
      92,    92,   483,   483,   483,   483,   483,   483,    92,   483, 
      92,   494,   506,   297,    37,   518,   529,    92,   541,   553, 
     565,   263,    57,    84,    57,    81,    81,    71,    57,    69, 
      57,    71,    81,    71,    57,    71,    71,    71,    57,    57, 
      71,    71,    69,    69,    93,    69,    71,    71,    93,    57, 
      71,    69,    81,    71,    81,    81,    81,    81,    69,    81, 
      81,    71,    69,    71,    69,    69,    57,    69,    71,    71, 
      71,    71,    71,    71,    71,    81,    81,    69,    71,    81, 
      69,    69,    69,    81,    81,    71,    57,    81,    57,    81, 
      81,    71,    57,   576,    92,    93,    57,    69,    69,    93, 
      93,    57,    93,    69,    69,    93,    57,    57,    93,    69, 
      69,    93,    93,    93,    57,    57,    93,    93,    93,    57, 
      57,    93,   588,    93,    57,    57,    22,    93,    42,    57, 
      57,    57,    57,   118,   118,   599,    93,    30,    76,    57, 
     373,   609,    57,    12,    57,    71,   620,   609,    93,    93, 
      93,    93,    93,    57,    93,    93,    57,    57,   156,    57, 
      57,   118,   599,    35,    35,    35,    84,    93,    93,    12, 
      93,    93,    93,    44,    57,    57,     0,    93,    81,   632, 
      93,   636,    69,    93,   648,   658,   204,    57,   160,    92, 
     160,    69,    69,    81,    69,    93,    93,    93,     0,    69, 
      93,    57,    57,    93,    93,    93,    93,    57,    57,    93, 
      93,    93,    93,    93,    93,    93,    57,   576,    71,    84, 
     576,    71,   576,    71,   576,   576,   576,    71,    71,    71, 
      71,    71,   664,    71,    71,    71,    71,    84,    71,    71, 
      71,    71,    84,    84,    84,   576,    71,    84,    84,    84, 
      71,    71,    71,    84,    84,    84,   675,    71,   576,    71, 
      71,   576,    69,     0,   687,   262,    83,    83,    83,     0, 
      83,    83,    83,    83,    93,    93,    83,    83,    93,    83, 
      83,    83,    83,    69,   118,     0,    12,   373,    12,   117, 
     178,   263,   117,    83,    83,    83,    93,    83,    83,    93, 
      39,    57,    83,    83,   699,   256,    84,   711,   253,    83, 
     723,    81,     0,   735,   254,    83,    83,    83,    83,   263, 
      81,    57,    69,    69,    69,    69,    69,    69,    69,    69, 
      69,    69,    81,   747,    81,    84,    84,   759,    12,    41, 
      75,    12,    92,   263,    57,    57,    81,   156,    93,    93, 
     636,   770,    70,    84,   263,    93,     0,    71,   675,    71, 
      71,    71,    71,    71,    71,    71,    84,    84,   773,    71, 
      81,    69,    93,    93,   115,    84,    83,    83,    93,    84, 
     711,    93,    84,    57,    69,    69,    69,    69,    93,    70, 
     770,    93,   576,    71,    84,    71,    44,    84,   254,    81, 
      57,    70,    71,   263,     0, 
      };

template<>
const uint16 *Dbase_parser_tables_t::Br = &Br_[0];

// Boolean matrix column (displacement) ...
static const uint8 Bc_[280] = {
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       0,     1,     1,     1,     1,     1,     1,     1,     1,     0, 
       0,     2,     2,     2,     2,     0,     0,     2,     0,     2, 
       2,     2,     2,     2,     2,     2,     0,     2,     0,     0, 
       3,     3,     3,     3,     0,     3,     3,     3,     3,     3, 
       0,     0,     4,     4,     4,     0,     0,     4,     4,     4, 
       4,     4,     4,     0,     0,     0,     5,     5,     5,     5, 
       0,     5,     5,     5,     5,     0,     0,     0,     0,     0, 
       6,     0,     0,     6,     6,     0,     6,     0,     6,     6, 
       0,     6,     6,     0,     0,     6,     0,     7,     0,     7, 
       0,     0,     0,     0,     7,     0,     7,     7,     7,     0, 
       0,     0,     7,     7,     7,     8,     0,     0,     0,     8, 
       0,     0,     0,     8,     0,     8,     8,     8,     8,     8, 
       8,     0,     9,     0,     0,     0,     0,     0,     0,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     0,     0,     9,     9,     0,     0,     0, 
       0,     9,     0,     0,    10,     0,    10,     0,     0,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,    10,    10, 
      10,    11,    10,    10,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      };

template<>
const uint8 *Dbase_parser_tables_t::Bc = &Bc_[0];

// Boolean matrix filter/mask value ...
static const uint8 Bf_[280] = {
       1,     2,     4,     8,    16,    32,    64,   128,     1,   128, 
     128,     2,     4,     8,    16,    32,     8,    64,   128,   128, 
     128,     1,     2,     4,     8,   128,   128,    16,   128,    32, 
      64,    64,    64,    64,    64,    64,   128,   128,   128,   128, 
       1,     2,     4,     8,   128,    16,    32,    16,    64,   128, 
     128,   128,     1,     2,     4,   128,   128,     8,    16,     8, 
      32,    64,   128,   128,   128,   128,     1,     2,     4,     8, 
     128,    16,    32,    64,   128,   128,   128,   128,   128,   128, 
       1,   128,   128,     2,     2,   128,     4,   128,     8,    16, 
     128,    32,    64,   128,   128,   128,   128,     1,   128,     2, 
     128,   128,   128,   128,     4,   128,     8,    16,    32,   128, 
     128,   128,    64,    64,   128,     1,   128,   128,   128,     2, 
     128,   128,   128,     4,   128,     8,    16,    32,    64,    32, 
     128,   128,     1,   128,   128,   128,   128,   128,   128,     2, 
       2,     2,     4,     2,     2,     8,     2,     2,    16,     8, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     8,     2,     2,     2,     2,    32,     2,     2, 
       2,     2,     2,   128,   128,    64,    64,   128,   128,   128, 
     128,   128,   128,   128,     1,   128,     2,   128,   128,     4, 
       4,     8,    16,    32,    32,    32,    32,    32,    32,    64, 
     128,     1,   128,   128,     2,     4,     4,     4,     8,    16, 
      16,    16,    16,    16,    16,    16,    16,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
};

template<>
const uint8 *Dbase_parser_tables_t::Bf = &Bf_[0];

// Terminal transition matrix ...
static const int16 Tm_[1996] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,   597,     0,   598,     0, 
    -214,     0,   623,     0,   624,     0,   625,     0,   301,  -269, 
     302,  -281,   303,  -282,   304,  -283,   305,  -290,   307,  -292, 
     308,  -293,   310,  -228,   311,  -258,   312,  -264,   313,  -266, 
     314,  -267,   315,  -277,   316,  -278,   317,  -279,   319,  -289, 
     321,  -284,   322,  -287,   293,  -254,   294,  -256,   295,  -257, 
     296,  -259,   297,  -260,   298,  -261,  -211,   616,  -208,   591, 
     492,   594,   541,   596,   604,     0,  -510,     0,  -127,   428, 
     593,   514,  -182,   424,     0,   318,  -286,  -223,     0,   513, 
       0,  -519,     0,  -221,   426,   592,   504,   505,     0,     0, 
    -353,     0,   587,     0,   469,   412,     0,     0,     0,  -209, 
       0,   274,   621,   471,   299,  -262,     0,   287,  -244,   290, 
    -247,   292,  -253,   631,     0,     0,   281,  -231,   289,  -246, 
     277,  -169,     0,     0,   561,     0,     0,     0,     0,     0, 
       0,   279,  -227,   288,  -245,   474,   415,     0,     0,     0, 
    -202,     0,   266,  -270,   480,   479,   417,  -201,   422,     0, 
    -206,     0,  -205,     0,   485,     0,  -482,  -162,   402,   482, 
     420,     0,  -161,  -579,  -208,   602,  -163,     0,   489,   483, 
     421,  -565,  -512,     0,  -208,   611,  -579,   618,   490,     0, 
       0,  -579,  -514,   269,  -273,     0,     0,   558,     0,   614, 
       0,     0,     0,   271,  -275,   275,  -294,  -579,     0,   615, 
       0,   300,  -268,     0,     0,   263,  -255,   273,  -280,  -577, 
    -578,  -580,  -581,  -582,   306,  -291,     0,   274,  -288,   309, 
    -295,     0,  -577,  -578,  -580,  -581,  -582,  -577,  -578,  -580, 
    -581,  -582,     0,     0,     0,   320,  -251,     0,     0,     0, 
       0,     0,     0,  -577,  -578,  -580,  -581,  -582,   473,   414, 
     476,   416,     0,  -212,     0,  -222,     0,   478,     0,   484, 
    -501,     0,  -505,  -502,     0,  -506,  -398,   434,     0,     0, 
     463,   411,     0,     0,     0,  -208,  -579,     0,   580,   470, 
     603,     0,  -489,   -84,     0,  -490,     0,     0,     0,     0, 
       0,     0,  -109,   427,     0,     0,   268,  -272,   270,  -274, 
     560,   599,  -579,     0,     0,     0,     0,  -225,   429,     0, 
       0,     0,     0,     0,   284,  -236,  -472,  -579,   265,  -265, 
     590,   445,  -577,  -578,  -580,  -581,  -582,     0,     0,  -219, 
    -579,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
     280,  -230,     0,     0,     0,     0,     0,     0,  -577,  -578, 
    -580,  -581,  -582,     0,     0,   282,  -232,     0,     0,     0, 
       0,     0,     0,  -577,  -578,  -580,  -581,  -582,   286,  -241, 
       0,     0,     0,     0,     0,     0,  -577,  -578,  -580,  -581, 
    -582,   457,   382,   384,   383,     0,  -224,  -326,   425,     0, 
     466,  -143,   433,     0,   431,     0,  -122,  -579,     0,   432, 
     632,     0,   189,   430,     0,     0,     0,     0,     0,     0, 
     381,   556,   188,     0,     0,     0,     0,   629,   451,   380, 
       0,   359,  -184,  -218,     0,     0,   360,   465,     0,   261, 
    -249,     0,     0,     0,     0,   278,  -226,     0,     0,   283, 
    -234,     0,     0,  -577,  -578,  -580,  -581,  -582,   555,  -184, 
       0,     0,     0,   333,   334,  -183,     0,     0,     0,   472, 
     413,     0,     0,     0,  -217,     0,   260,  -248,   477,  -579, 
       0,     0,     0,     0,   481,   418,     0,     0,     0,  -207, 
     333,   334,  -183,   487,  -579,     0,     0,     0,     0,   562, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,   613,  -507,     0,   267,  -271,     0, 
       0,     0,     0,     0,     0,  -577,  -578,  -580,  -581,  -582, 
       0,     0,   272,  -276,     0,     0,     0,     0,     0,     0, 
    -577,  -578,  -580,  -581,  -582,   595,   577,     0,   574,  -210, 
     379,     0,     0,   575,  -224,     0,  -474,     0,   464,     0, 
       0,   378,  -422,   568,     0,     0,     0,  -471,   576,  -473, 
    -476,     0,     0,     0,     0,     0,  -184,     0,     0,   554, 
     185,     0,     0,     0,     0,     0,   608,     0,     0,     0, 
       0,     0,     0,   291,  -250,  -166,  -167,   259,  -243,     0, 
       0,     0,     0,     0,     0,     0,     0,   333,   334,  -183, 
     458,   388,     0,   386,     0,  -200,     0,     0,   387,   467, 
     460,   410,     0,   404,  -439,  -207,     0,     0,   405,   468, 
       0,   385,  -487,     0,     0,  -488,     0,     0,     0,     0, 
     557,  -184,     0,     0,   589,   439,   436,   437,     0,     0, 
     559,  -184,   438,     0,  -579,     0,   435,     0,   262,  -252, 
       0,     0,     0,     0,     0,     0,     0,     0,   264,  -263, 
       0,     0,   333,   334,  -183,  -184,     0,     0,     0,     0, 
       0,     0,   333,   334,  -183,     0,     0,     0,     0,     0, 
       0,     0,   285,  -240,     0,     0,     0,     0,     0,     0, 
    -577,  -578,  -580,  -581,  -582,     0,   333,   334,  -183,  -203, 
     347,   348,   349,     0,  -213,     0,  -503,   350,   453,     0, 
       0,     0,     0,   -63,     0,     0,  -181,   423,     0,     0, 
     508,  -204,     0,     0,   351,  -499,  -579,     0,     0,   552, 
    -184,     0,  -573,     0,     0,     0,   346,     0,     0,     0, 
    -504,     0,     0,     0,     0,     0,   619,   258,  -239,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,   333,   334,  -183,   276,  -179,  -570,  -571,  -572,  -574, 
    -575,  -576,  -577,  -578,  -580,  -581,  -582,  -411,   327,     0, 
     331,     0,  -215,     0,  -440,   178,  -412,  -586,     0,     0, 
       0,   399,     0,     0,     0,   578,   579,     0,   330,   324, 
     325,     0,   332,   326,     0,     0,   531,   529,   535,     0, 
    -402,  -312,     0,  -404,   526,     0,     0,     0,     0,  -500, 
       0,     0,     0,     0,     0,   255,  -235,     0,  -413,   329, 
     343,   344,   443,  -208,  -457,  -449,   345,   448,  -414,  -415, 
    -403,   -38,   518,     0,  -452,     0,     0,     0,     0,   407, 
    -481,   408,  -483,  -410,  -480,     0,     0,   630,   550,  -184, 
       0,     0,     0,     0,   -59,     0,  -453,  -454,  -455,  -456, 
       0,     0,     0,   444,  -166,  -167,   256,  -237,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
     333,   334,  -183,  -521,   364,   213,   216,   220,  -216,   240, 
     228,   164,   449,     0,     0,   440,   239,   -62,     0,     0, 
       0,     0,     0,     0,   441,     0,   218,     0,     0,     0, 
     197,   198,   199,   551,   200,   202,   203,   204,   206,   207, 
     208,   212,   214,   215,   217,   225,   238,   237,   196,  -166, 
    -167,   257,  -238,   163,     0,     0,   219,     0,     0,     0, 
       0,     0,     0,     0,     0,   230,   234,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   211,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,   442,     0,     0,     0, 
       0,     0,     0,     0,     0,   201,   205,   209,   210,   221, 
     222,   223,   224,   226,   227,   229,   231,   232,   233,   235, 
     236,  -174,     0,     0,     0,     0,  -176,     0,     0,     0, 
    -175,     0,  -552,     0,     0,     0,     0,     0,    91,     0, 
       0,     0,     0,     0,     0,     0,   138,     0,     0,     0, 
       0,     0,     0,    83,     0,     0,    86,     0,   540,     0, 
       0,     0,     0,   113,     0,     0,     0,     0,     0,   169, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   143,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,    74,    75,    76,    77,    78,    79,    80, 
      81,    82,    84,    85,    87,    88,    89,    90,    92,    93, 
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104, 
     105,   106,   107,   108,   109,   110,   111,   112,   114,   115, 
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125, 
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135, 
     136,   137,   139,   140,   141,   142,  -174,   363,     0,   361, 
       0,  -176,     0,     0,   362,  -175,     0,     0,     0,     0, 
       0,     0,     0,    91,     0,     0,     0,     0,     0,     0, 
       0,   138,     0,     0,     0,     0,     0,  -184,    83,     0, 
       0,    86,     0,    94,     0,     0,     0,     0,   113,     0, 
       0,     0,     0,     0,   144,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,   143,   333,   334, 
    -183,     0,     0,     0,     0,     0,     0,     0,    74,    75, 
      76,    77,    78,    79,    80,    81,    82,    84,    85,    87, 
      88,    89,    90,    92,    93,    95,    96,    97,    98,    99, 
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109, 
     110,   111,   112,   114,   115,   116,   117,   118,   119,   120, 
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130, 
     131,   132,   133,   134,   135,   136,   137,   139,   140,   141, 
     142,  -174,   335,     0,   336,     0,  -176,     0,     0,   337, 
    -175,     0,     0,     0,     0,     0,     0,     0,    91,     0, 
       0,     0,     0,     0,     0,     0,   138,     0,     0,     0, 
       0,     0,  -184,    83,     0,     0,    86,     0,    94,     0, 
       0,     0,     0,   113,     0,     0,     0,     0,     0,   144, 
    -285,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   143,   333,   334,  -183,     0,     0,     0,     0, 
       0,     0,     0,    74,    75,    76,    77,    78,    79,    80, 
      81,    82,    84,    85,    87,    88,    89,    90,    92,    93, 
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104, 
     105,   106,   107,   108,   109,   110,   111,   112,   114,   115, 
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125, 
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135, 
     136,   137,   139,   140,   141,   142,  -174,   391,     0,   389, 
       0,  -176,     0,     0,   390,  -175,     0,     0,     0,     0, 
       0,  -448,     0,    91,     0,     0,     0,     0,     0,     0, 
       0,   138,     0,     0,     0,     0,     0,  -184,    83,     0, 
       0,    86,     0,    94,     0,     0,     0,     0,   113,     0, 
       0,     0,     0,     0,   144,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,   143,   333,   334, 
    -183,     0,     0,     0,     0,     0,     0,     0,    74,    75, 
      76,    77,    78,    79,    80,    81,    82,    84,    85,    87, 
      88,    89,    90,    92,    93,    95,    96,    97,    98,    99, 
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109, 
     110,   111,   112,   114,   115,   116,   117,   118,   119,   120, 
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130, 
     131,   132,   133,   134,   135,   136,   137,   139,   140,   141, 
     142,  -174,   353,     0,   354,     0,  -176,     0,  -399,   355, 
    -175,     0,     0,     0,     0,   -64,     0,     0,    91,     0, 
       0,     0,     0,     0,     0,     0,   138,     0,     0,     0, 
       0,   553,  -184,    83,     0,     0,    86,     0,    94,     0, 
       0,     0,     0,   113,     0,     0,     0,     0,     0,   169, 
    -242,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   143,   333,   334,  -183,     0,     0,     0,     0, 
       0,     0,     0,    74,    75,    76,    77,    78,    79,    80, 
      81,    82,    84,    85,    87,    88,    89,    90,    92,    93, 
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104, 
     105,   106,   107,   108,   109,   110,   111,   112,   114,   115, 
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125, 
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135, 
     136,   137,   139,   140,   141,   142,  -174,   194,   338,  -350, 
    -351,  -176,   357,  -406,   161,  -175,  -579,   564,  -489,  -155, 
     373,  -490,  -573,    91,   400,   401,  -461,   358,   339,   340, 
     341,   138,  -329,  -330,  -331,   366,   446,  -347,    83,  -402, 
    -349,    86,  -404,    94,  -374,  -375,  -376,  -377,   113,   585, 
     -47,  -348,  -166,  -167,   144,  -233,  -570,  -571,  -572,  -574, 
    -575,  -576,  -577,  -578,  -580,  -581,  -582,   143,  -352,  -403, 
       0,     0,     0,     0,     0,     0,     0,     0,    74,    75, 
      76,    77,    78,    79,    80,    81,    82,    84,    85,    87, 
      88,    89,    90,    92,    93,    95,    96,    97,    98,    99, 
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109, 
     110,   111,   112,   114,   115,   116,   117,   118,   119,   120, 
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130, 
     131,   132,   133,   134,   135,   136,   137,   139,   140,   141, 
     142,  -220,   166,  -343,     8,    34,  -224,    14,  -395,     9, 
    -219,     5,   600,    44,     7,    -2,    15,    71,   181,   397, 
     398,    57,   170,    16,   634,   601,    67,     6,  -309,    10, 
     342,   328,  -342,    17,  -345,  -425,    18,   154,   -14,    38, 
      12,    54,    13,    24,  -346,   -41,    11,  -166,  -167,   254, 
    -229,   369,    29,    30,    31,    32,   571,  -588,   -46,   582, 
      33,    35,    36,    47,   -18,  -426,  -590,  -591,  -592,  -593, 
    -594,  -595,  -596,    37,    39,    40,    41,   -58,    42,    43, 
     182,   183,   -65,    45,    46,   572,  -459,    48,   -73,    49, 
      50,   -76,    51,    52,    53,   192,    55,   -87,   -88,    56, 
      58,    59,    60,  -344,   -22,    19,    20,  -381,    21,    22, 
      23,   516,   -34,   -35,    25,   -37,    26,   -40,    27,    61, 
      62,  -529,  -530,    63,    64,  -150,    65,  -151,    66,    68, 
      28,    69,    70,  -158,  -190,  -589, 
};

template<>
const int16 *Dbase_parser_tables_t::Tm = &Tm_[0];

// Terminal transition matrix row ...
static const uint16 Tr_[635] = {
    1861,  1861,  1861,  1861,  1861,  1861,  1861,  1726,  1726,  1861, 
    1861,  1861,  1861,  1861,   817,  1861,  1861,  1726,  1861,  1861, 
    1726,  1861,   868,  1726,   933,  1861,   868,  1861,   817,   868, 
     868,   739,  1591,  1861,  1861,  1861,  1861,  1861,  1861,   817, 
     817,  1861,   868,  1861,  1861,  1861,   579,   458,  1861,  1726, 
    1861,   421,   868,  1861,  1861,  1861,  1861,  1726,  1726,   640, 
     933,   933,  1861,  1726,  1861,  1861,  1861,   868,  1861,  1726, 
    1861,  1726,   197,  1726,  1861,   817,   868,   933,   739,   579, 
     458,   421,   640,   197,   650,   310,   134,   499,   288,   175, 
     290,   185,   514,   199,   209,   187,   756,   112,   427,   123, 
     332,   108,   347,   431,   306,   674,   360,    99,   125,   110, 
     101,   575,   103,    36,    38,    40,    42,    44,    46,    96, 
     193,     0,     2,     4,     6,     8,   206,    10,    12,   211, 
      14,    16,    18,    20,    22,    24,    26,    28,    67,    30, 
     227,    32,    34,  1726,  1726,   817,  1861,   868,   817,  1321, 
    1726,  1861,   868,   739,  1861,  1591,   868,  1726,   458,  1186, 
     933,  1861,  1726,  1861,  1591,   868,   868,  1726,  1726,  1591, 
     868,   579,   458,  1861,   421,   640,  1456,   933,  1861,   458, 
     868,  1861,  1861,  1861,  1861,  1861,   817,   458,  1726,   817, 
     197,   650,   310,   868,   868,  1726,   650,  1726,  1726,   310, 
    1726,  1726,   739,  1726,   134,   499,  1726,   288,   175,  1726, 
    1726,  1726,  1726,   290,   185,  1726,   514,   579,  1726,  1726, 
     199,  1726,   209,   187,  1726,   756,   112,   427,  1726,   123, 
     332,   108,  1726,  1726,  1726,  1726,  1726,  1726,   347,  1726, 
     514,   431,   306,  1321,  1861,   197,   674,   933,   933,   868, 
     360,  1726,  1726,  1726,  1726,   868,   933,  1861,  1726,   458, 
    1726,  1726,   739,   817,  1726,   868,   933,   739,  1726,  1726, 
    1591,   579,   421,   640,   868,   650,   458,   421,  1861,  1591, 
     640,   310,   579,   197,   458,   421,   640,   650,   134,   310, 
     134,   650,   499,   310,   288,   175,  1726,   290,   134,   499, 
     288,   175,   290,   185,   514,   499,   288,   185,   199,   175, 
     514,   199,   209,   290,   185,   209,  1726,   514,  1726,   199, 
     209,   187,  1726,   756,    99,  1861,  1726,  1861,   187,  1861, 
     868,  1591,   134,   756,   112,  1861,  1591,  1591,   650,   427, 
     123,   650,  1861,   650,  1591,  1591,   868,   868,   650,  1591, 
    1591,   134,   125,  1861,  1591,  1591,   739,   868,  1861,  1591, 
    1591,  1591,  1591,  1861,  1726,   110,   499,  1861,  1861,  1591, 
     868,   868,  1591,  1861,  1726,   112,   756,   868,   288,   868, 
    1861,   175,   868,  1591,   650,   868,  1591,  1591,   817,  1591, 
    1591,   868,   110,   933,   739,  1591,   817,   290,   290,  1861, 
     290,   290,   868,   817,  1591,  1591,  1861,   868,   187,   817, 
     868,  1861,   332,   185,   756,   739,   514,  1051,   199,   101, 
     209,   108,   347,   112,   933,   187,   756,   868,  1861,   431, 
     650,  1591,  1591,   868,  1861,   288,   650,  1591,  1591,   868, 
     288,   868,   650,   868,   640,  1861,  1726,   427,   123,   868, 
     332,   108,   347,   431,   306,   674,   360,    99,   125,   110, 
     101,   575,   933,   103,    36,    38,    40,   739,    42,    44, 
      46,    96,  1591,   579,   458,   193,     0,   421,   640,   197, 
       2,     4,     6,   650,   310,   134,   499,     8,   206,    10, 
      12,   211,  1861,  1861,  1726,  1861,  1861,  1861,  1861,  1861, 
    1861,  1861,  1861,  1861,   868,   650,  1861,  1861,   868,  1861, 
    1861,  1861,  1861,   306,  1591,  1861,  1861,   579,  1861,  1861, 
    1861,  1726,  1726,  1861,  1861,  1861,   868,  1861,  1861,  1861, 
    1861,  1726,  1861,  1861,   575,   817,   288,  1861,  1861,  1861, 
      93,   427,  1861,  1726,  1861,  1861,  1861,  1861,  1861,  1726, 
     123,  1726,   674,   360,    99,   125,   110,   101,   575,   103, 
      36,    38,   332,  1861,   108,   175,   290,  1861,  1861,  1861, 
    1861,  1861,   103,  1726,  1591,  1591,   347,   579,   290,   290, 
    1861,   817,  1861,   185,  1726,   640,  1861,    14,   514,    16, 
      18,    20,    22,    24,    26,    28,   199,   209,    67,    30, 
     108,    40,   650,   499,  1861,   187,  1861,  1861,   868,   756, 
    1861,   868,   112,  1726,    42,    44,    46,    96,   650,  1861, 
     817,   650,   227,    32,   427,    34,   868,   123,  1861,   431, 
    1726,  1861,  1321,  1726,  1861, 
};

template<>
const uint16 *Dbase_parser_tables_t::Tr = &Tr_[0];

// Terminal transition matrix column ...
static const uint8 Tc_[280] = {
      23,    23,     5,     0,     9,    14,    10,    26,    13,     3, 
       8,    22,     1,    23,    11,    24,    26,    27,    16,    28, 
      45,    34,    21,     3,    25,    37,    39,     8,    41,     2, 
      22,    23,    24,    26,    27,    28,     6,    29,    63,    15, 
      31,   102,    33,    43,    32,    45,    34,     3,     4,    62, 
     103,    35,    36,     5,    37,   104,   105,    38,    39,    40, 
      41,     6,   106,   107,   108,   109,     7,     8,     9,    63, 
      42,    50,   110,   111,   112,   113,   114,   115,   116,   117, 
      44,   129,    51,    10,    11,    52,    53,    54,    55,    57, 
      59,    12,    13,    60,    61,    64,    72,    14,    73,    15, 
      74,    75,    76,    77,    16,    78,    17,    79,    80,    81, 
      82,    83,    18,    19,    84,    85,    86,    87,    88,    20, 
      89,    90,    91,    21,    92,    93,    94,    22,    23,    24, 
      25,    95,    26,    96,    97,    98,    99,   100,   101,    27, 
      28,    29,    30,    31,   102,    32,    33,    34,   103,    35, 
      36,    37,   104,   105,    38,    39,    40,    41,   106,   107, 
     108,   109,    42,   110,   111,   112,   113,    43,   114,   115, 
     116,   117,    44,   118,   119,   120,   121,   122,   123,   124, 
     125,   126,   127,   128,   129,   130,    45,   131,   132,    46, 
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56, 
      57,    58,    59,    60,    61,    62,    63,    64,   133,   134, 
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74, 
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84, 
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94, 
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104, 
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114, 
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124, 
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134, 
};

template<>
const uint8 *Dbase_parser_tables_t::Tc = &Tc_[0];

// Nonterminal transition matrix ...
static const int16 Nm_[1094] = {
    -171,  -171,  -171,  -171,  -171,  -171,  -171,     0,  -171,  -171, 
     509,   510,  -171,  -171,  -171,   511,   512,     0,  -171,     0, 
     517,  -171,  -171,   523,   524,     0,     0,     0,  -177,  -177, 
    -177,  -177,  -177,  -177,  -177,     0,  -177,  -177,     0,     0, 
    -177,  -177,  -177,     0,     0,  -165,  -177,  -164,  -164,  -177, 
    -177,     0,  -164,  -164,  -171,     0,   525,  -164,     0,     0, 
    -164,  -164,  -171,  -171,   527,   528,  -171,  -171,   532,   533, 
    -171,  -171,   539,   545,     0,     0,     0,     0,     0,     0, 
       0,     0,  -177,     0,  -171,     0,   546,     0,     0,     0, 
    -177,  -177,     0,  -164,  -177,  -177,     0,     0,  -177,  -177, 
       0,  -164,  -164,     0,     0,  -164,  -164,     0,     0,  -164, 
    -164,     0,  -177,   521,   549,   573,   588,   622,   633,   168, 
    -527,   168,   168,  -164,     0,   584,   168,   168,     0,  -171, 
    -171,   168,   547,     0,   168,   168,     0,  -172,  -171,  -380, 
     548,     0,  -171,  -171,   606,   607,   628,  -358,     0,     0, 
       0,     0,     0,     0,     0,  -335,     0,  -177,  -177,     0, 
       0,     0,     0,   -12,  -171,  -177,  -177,   168,  -171,  -164, 
    -177,  -177,     0,     0,  -421,   168,   168,  -164,  -435,   168, 
     168,  -164,  -164,   168,   168,  -171,     0,     0,     0,  -171, 
    -368,   497,  -177,     0,   -49,  -390,  -177,   168,  -171,  -550, 
     500,     0,     0,     0,     0,  -171,  -171,   501,  -354,     0, 
    -171,  -612,   502,  -177,     0,  -379,  -390,  -177,     0,  -171, 
    -441,   503,  -129,     0,     0,  -171,  -177,   506,  -164,  -511, 
    -124,     0,  -561,  -177,  -177,  -475,     0,  -164,  -177,     0, 
       0,     0,   450,   168,  -164,  -135,     0,  -177,     0,  -164, 
    -171,   168,   507,  -177,     0,   168,   168,  -133,  -164,  -171, 
    -609,  -138,  -171,  -320,  -164,  -171,  -486,   498,   626,  -313, 
       0,     0,  -359,     0,     0,   542,     0,   452,  -177,     0, 
       0,   455,     0,     0,     0,   493,  -171,  -177,   184,  -164, 
    -177,     0,     0,  -177,     0,  -606,   459,     0,   491,  -141, 
    -178,   -77,   168,     0,  -164,  -171,  -148,   462,     0,   499, 
     377,   168,   461,     0,  -177,  -479,     0,     0,   168,   475, 
       0,     0,     0,   168,     0,   375,   184,     0,  -177,     0, 
       0,   184,   168,  -177,     0,     0,  -171,  -299,   168,     0, 
    -451,     0,     0,     0,  -164,     0,  -513,     0,     0,     0, 
       0,     0,  -123,     0,     0,  -126,  -445,     0,     0,  -171, 
    -299,     0,     4,   168,  -177,   567,     3,  -444,     0,  -538, 
       0,     0,    73,     0,     0,   447,  -171,  -299,   168,  -120, 
       0,  -171,  -299,     0,  -556,     4,  -430,  -177,     2,     3, 
       0,   -82,     0,  -111,     0,     0,     0,     0,  -140,   376, 
       0,     0,     4,     0,  -177,     2,     3,     4,  -534,  -177, 
       2,     3,     0,  -540,     0,  -171,   -72,  -463,   168,     0, 
       0,     0,  -296,  -508,   403,   371,  -171,  -299,     0,  -142, 
       0,     0,     0,     0,     0,   544,   -60,     0,  -597,   -93, 
       0,   184,     0,  -177,     0,  -296,     0,  -171,  -299,   486, 
       0,     0,     4,     0,  -177,   520,     3,   542,     0,     0, 
     530,     0,  -296,     0,     0,     0,     0,  -296,     0,  -137, 
    -171,  -299,   494,     4,  -139,  -177,     2,     3,     0,   499, 
     406,     0,     0,     0,     0,  -171,  -299,   496,     0,   454, 
       0,     0,     0,     0,   456,  -546,     4,     0,  -177,     0, 
     393,  -467,     0,     0,     0,     0,     0,     0,  -108,  -324, 
       0,     4,   -89,  -177,     2,     3,     0,     0,     0,  -114, 
    -171,  -299,  -551,  -462,  -164,     0,   569,     0,   251,   403, 
     409,     0,     0,  -296,  -541,     0,     0,     0,     0,   323, 
    -144,  -548,     0,     0,  -171,   -66,     4,     0,  -177,     0, 
     394,     0,     0,   499,   247,     0,     0,     0,     0,     0, 
     488,     0,     0,  -115,  -419,     0,  -515,  -319,   -80,     0, 
     184,  -296,  -177,     0,     0,  -171,  -299,   370,  -318,     0, 
       0,  -397,     0,    73,   499,  -555,     0,     0,     0,     0, 
       0,     0,     0,  -543,     0,     0,     0,     0,   168,  -171, 
     -67,     4,  -388,  -177,     0,   395,     0,     0,   499,   356, 
       0,     0,     0,  -116,  -164,     0,     0,  -392,     0,     0, 
       0,     0,     0,   -92,     0,   184,     0,  -177,  -391,     0, 
    -496,     0,     0,    73,     0,     0,     0,  -105,     0,     0, 
     627,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,  -384,     0,     0,     0,     0,   195,     0,  -188, 
       0,     0,     0,  -478,     0,     0,     0,  -361,  -117,     0, 
       0,     0,     0,     0,     0,  -192,     0,     0,  -443,     0, 
    -498,     0,     0,  -468,     0,     0,     0,     0,   168,     0, 
       0,     0,  -106,     0,  -559,     0,  -104,     0,  -355,  -171, 
    -299,   167,  -525,     0,     0,     0,     0,  -436,   499,   190, 
       0,     0,   242,  -549,  -187,     0,   -81,     0,     0,     0, 
    -560,   146,  -432,   -79,     0,     4,     0,  -177,     0,     3, 
    -192,     0,     0,     0,     0,     0,     0,     0,  -164,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,  -372,     0,     0,     0,     0,     0,    -7,   187,     0, 
       0,     0,     0,     0,     0,  -153,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    -584,     0,     0,     0,     0,    -4,     0,     0,     0,     0, 
       0,     0,  -100,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,  -367,     0,     0, 
       0,     0,   168,     0,  -187,  -171,  -299,     0,  -557,     0, 
    -563,     0,  -337,     0,  -328,   -39,  -364,     0,     0,  -542, 
    -192,     0,   -56,     0,  -603,     0,  -311,   146,     0,   -70, 
    -302,     4,     0,  -177,     0,     3,     0,     0,     0,     0, 
       0,   172,     0,     0,   -61,   243,     0,     0,     0,     0, 
     165,     0,     0,     0,     0,  -366,     0,     0,     0,     0, 
       0,     0,     0,   495,   179,     0,     0,     0,     0,   392, 
     177,   -55,     0,   522,     0,   -44,     0,     0,     0,     0, 
       0,     0,     0,     0,  -494,     0,  -564,   176,     0,     0, 
       0,  -297,     0,   610,     0,     0,     0,     0,   -99,     0, 
     609,   538,    -6,     0,     0,     0,     0,  -145,     0,     0, 
       0,  -131,     0,  -360,     0,  -531,     0,     0,    73,     0, 
    -191,     0,     0,     0,     0,     0,     0,     0,  -567,     0, 
      72,     0,     0,   620,  -186,     0,  -192,  -599,  -171,  -299, 
     244,   -95,  -429,  -107,  -134,  -523,  -110,   499,  -390,  -315, 
     419,  -303,  -420,  -417,   617,   151,   162,   515,   186,  -311, 
     146,  -327,   -69,  -307,     4,  -517,  -177,     2,     3,    -5, 
    -305,   563,    -9,   -10,   147,  -317,   148,    -3,   149,  -333, 
     150,   -17,  -341,   152,   -20,   -21,  -357,   352,   374,   153, 
     252,   155,   156,   -26,  -383,   157,   145,   158,   -29,  -492, 
     159,  -401,   365,   160,   -32,   -33,   519,   -42,   -43,   -45, 
     570,  -424,   171,  -428,   173,  -434,   174,     1,   175,  -569, 
     367,   180,   -71,   -74,  -296,   191,   537,   534,  -485,   193, 
     -97,   -98,   536,  -408,   538,  -301,  -112,  -113,  -118,  -119, 
    -121,  -125,  -128,  -130,  -146,  -132,  -336,   543,   586,  -533, 
     612,    73,   241,  -191,   246,  -554,   248,   372,   249,  -180, 
     250,  -325,   245,    72,  -170,  -173,   581,  -185,  -189,  -192, 
    -598,   368,  -602,   253,  -605,   566,  -608,   565,  -611,   583, 
    -614,   396,  -617,   605, 
};

template<>
const int16 *Dbase_parser_tables_t::Nm = &Nm_[0];

// Nonterminal transition matrix row ...
static const uint16 Nr_[635] = {
  948,   948,   815,   948,   948,   948,   699,   948,   815,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   815,   815,   948,   948,   948, 
  815,   948,   699,   948,   948,   815,   948,   948,   948,   815, 
  815,   815,   948,   815,   948,   544,   599,   948,   415,   948, 
  699,   300,   699,   948,   948,   948,   426,   948,   544,   948, 
  948,   948,   948,   599,   815,   948,   948,   544,   948,   948, 
  948,   415,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   300,   426,   948,   948,   948,   948,   470, 
  948,   948,   948,   815,   948,   699,   599,   948,   544,   520, 
  948,   948,   948,   948,   575,   948,   415,   948,   948,   286, 
  300,   948,   948,   948,   948,   599,   259,   815,   815,   544, 
  426,   470,   520,   575,   948,   948,   948,   544,   948,   699, 
  948,   415,   470,   948,   520,   948,   948,   948,   815,   699, 
  544,   599,   948,   415,   948,   948,   300,   948,   948,   426, 
  470,   520,   575,   948,   948,   286,   948,   948,   259,   137, 
  948,   262,   948,   948,   129,   948,   948,   948,   164,   948, 
  948,   948,   376,   168,   381,   305,   206,   336,   948,   447, 
  815,   300,   948,   470,   948,   815,   426,   699,   948,   575, 
  699,   948,   137,   948,   262,   948,   948,   948,   129,   948, 
  164,   948,   948,   948,   376,   948,   948,   948,   168,   381, 
  948,   948,   948,   948,   286,   948,   948,   948,   286,   305, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   206,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   336,   948,   447,   948, 
  948,   948,   185,   948,   948,   259,   359,   815,   948,   137, 
  259,   485,   948,   948,   948,   262,   189,   265,   948,   948, 
  948,   815,   129,   699,   198,   205,   137,   262,   544,   210, 
  219,   815,   948,   164,   225,   250,   948,   129,   948,     8, 
    9,    13,    14,   948,   948,   948,   948,   948,   815,    18, 
  948,   948,     6,   376,     0,   948,   948,   815,   948,   164, 
  168,   948,   376,    21,   599,   168,    22,    54,   948,    62, 
   63,   948,   948,   948,   948,   948,   948,   948,   815,   381, 
  699,   544,   381,   948,    66,    67,   948,   305,   948,   948, 
  206,   948,   948,   948,   948,   948,   300,    70,   336,   948, 
  447,   948,   948,   948,   815,   948,   948,   185,   948,   948, 
  426,    71,    84,   359,   305,   815,   470,   130,   138,   485, 
  699,   189,   520,   265,   815,   206,     1,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   699,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   198,   575,   948,   948,   205,   948, 
  948,   948,   948,   948,   948,   948,   336,   948,   447,   948, 
  948,   948,   948,   948,   948,   948,   210,   948,   948,   185, 
  948,     2,   948,   948,   575,   948,   948,   948,   948,   948, 
  219,   948,   948,    12,   948,   948,   948,   948,   948,   948, 
  948,     3,   948,   948,   948,   948,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   815,   359,   948, 
  948,   485,   948,   948,   142,   143,   948,   948,   599,   415, 
  815,   948,   699,   948,   948,   699,   948,   948,   948,   948, 
  948,   948,   948,   948,   948,   948,   948,   948,   948,   948, 
  815,   948,   286,   815,   948,   948,   948,   948,   225,   948, 
  815,   250,   948,     4,   948,   948,   948,   948,   259,   544, 
  815,   137,   948,   948,   948,   948,   948,   948,   815,   948, 
    5,   599,   948,   948,   948, 
};

template<>
const uint16 *Dbase_parser_tables_t::Nr = &Nr_[0];

// Nonterminal transition matrix column ...
static const uint8 Nc_[618] = {
   79,    79,    86,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
    1,     1,     1,     1,     1,     1,     1,     1,     1,     2, 
   39,    81,    81,    81,     2,     2,   119,   119,    39,    39, 
   50,   113,   113,    52,     0,     0,     0,     0,     0,     0, 
   58,   108,   108,   108,   108,    61,    79,    81,    86,    88, 
   96,    96,   115,    82,    97,    95,   123,   119,     1,     2, 
    3,   121,     4,     5,     6,     7,     8,     9,    10,    11, 
   12,    13,    14,    15,    16,    17,    18,    19,    20,    21, 
   22,    23,    24,    25,    26,    27,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    28,    28,    28,    28, 
   28,    28,    28,    28,    28,    28,    29,    29,    30,    30, 
   31,    31,    32,    32,    33,    33,    34,    34,    35,    35, 
   36,    36,    37,    37,    37,    37,    38,    38,    39,    39, 
   39,    39,    39,    40,    40,    41,    41,    41,    41,    41, 
   41,    41,    42,    42,    43,    43,    44,    44,    44,    44, 
   45,    45,    46,    46,    46,    46,    46,    47,    47,    47, 
   47,    47,    47,    48,    48,    48,    49,    49,    50,    50, 
   50,    50,    50,    50,    50,    51,    51,    52,    52,    52, 
   52,    53,    53,    54,    54,    54,    54,    54,    55,    55, 
   56,    56,    57,    57,    58,    58,    58,    59,    59,    60, 
   60,    61,    61,    61,    61,    61,    62,    62,    63,    63, 
   64,    64,    65,    65,    65,    66,    66,    67,    67,    68, 
   68,    69,    69,    70,    70,    70,    71,    71,    72,    72, 
   73,    73,    73,    74,    74,    75,    75,    76,    76,    77, 
   77,    77,    77,    78,    78,    79,    79,    79,    79,    79, 
   79,    79,    80,    80,    81,    81,    81,    81,    81,    81, 
   82,    82,    83,    83,    83,    83,    83,    83,    84,    84, 
   85,    85,    86,    86,    86,    86,    87,    87,    88,    88, 
   88,    88,    88,    88,    88,    88,    88,    89,    89,    90, 
   90,    90,    90,    90,    91,    91,    92,    92,    92,    93, 
   93,    94,    94,    95,    95,    96,    96,    97,    97,    98, 
   98,    98,    98,    99,    99,   100,   100,   100,   100,   101, 
  101,   101,   102,   102,   103,   103,   104,   104,   105,   105, 
  106,   106,   107,   107,   108,   108,   109,   109,   110,   110, 
  110,   111,   112,   112,   113,   113,   113,   113,   113,   114, 
  114,   115,   115,   115,   115,   115,   115,   116,   116,   117, 
  117,   117,   117,   118,   118,   119,   119,   119,   120,   120, 
  121,   121,   122,   122,   123,   123,   124,   124,   125,   125, 
  126,   126,   126,   126,   126,   126,   126,   127,   127,   127, 
  127,   127,   127,   128,   128,   129,   129,   130,   130,   131, 
  131,   131,   131,   131,   131,   131,   131,   132,   133,   133, 
  134,   135,   135,   136,   137,   137,   138,   139,   139,   140, 
  141,   141,   142,   143,   143,   144,   145,   145, 
};

template<>
const uint8 *Dbase_parser_tables_t::Nc = &Nc_[0];

// Reduction matrix ...
static const uint16 Rm_[13] = {
       0,     0,     0,     0,     0,     1,     0,   298,     0,     0, 
     373,   382,   382, 
};

template<>
const uint16 *Dbase_parser_tables_t::Rm = &Rm_[0];

// Reduction matrix row ...
static const int16 Rr_[635] = {
     298,     0,    -4,     0,     0,   568,   298,   300,     0,     0, 
     310,   316,   323,   332,     0,   340,     0,     0,   365,   371, 
      -8,   387,   389,   396,     0,   340,     0,     0,     0,     0, 
       0,   416,     0,     0,   423,   310,   427,   433,   442,   450, 
       0,   387,     0,   568,     0,     0,     0,     0,     0,   460, 
     387,     0,     0,   466,     0,   484,   298,     0,     0,     0, 
      96,   520,   539,     0,   323,   566,   547,     0,   553,   558, 
     562,     0,   160,   601,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,    13,    15, 
      16,   334,    19,    24,   356,    25,     0,    27,    28,    30, 
     405,   400,   407,     0,     0,    36,     0,     0,     0,     0, 
       0,    48,     0,    50,    51,    52,    53,   405,   400,    57, 
       0,   298,   298,   298,   613,    68,     0,    75,    78,     0, 
       0,    83,     0,    86,     0,    94,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,   147,     0,   149,     0,   159,   152,   405,   154,   156, 
     157,    11,     0,   194,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    23,     0,     0,     0,   378,     0,     0,     0, 
       0,     0,     0,     0,     0,    31,     0,     0,   193,     0, 
       0,   409,     0,   298,     0,     0,     0,   409,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    54,     0,     0,     0,   198,     0,     0,   298, 
       0,     0,     0,     0,     0,     0,   477,     0,     0,    90, 
     389,   491,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   516,   518,   520,   522,     0,   389,   526,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,   304,   306,   308,   314,   321,   322,   607, 
     338,   339,   362,   363,     0,     0,   369,   370,     0,   385, 
     386,   393,   394,     0,     0,   604,   298,     0,   298,     0, 
     418,   168,     0,   431,   437,   438,     0,   446,   447,     0, 
       0,     0,   464,   465,    85,    91,   101,   583,   587,   509, 
       0,     0,   610,   136,   528,   536,   537,   544,   545,   600, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     8,     0,   196,   195,   298,   298,     0, 
       0,   298,   458,   616,     0,     0,     0,     0,     0,     0, 
     493,   585,     0,   197,   524,     0,   532,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,   199,   469,   470,     0,   102, 
     583,     0,   535,     0,     0,     0,     0,     0,     0,   495, 
     585,     0,     0,     0,     0,     0,     0,   103,   528,     0, 
       0,   497,     0,   615,     0, 
};

template<>
const int16 *Dbase_parser_tables_t::Rr = &Rr_[0];

// Reduction matrix column ...
static const uint8 Rc_[280] = {
       0,     1,     2,     0,     0,     3,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     4,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     4,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     1,     1,     0,     1,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
};

template<>
const uint8 *Dbase_parser_tables_t::Rc = &Rc_[0];

// Production lengths (minus one) ...
static const int8 PL_[618] = {
       1,     0,     1,     1,     1,     1,     1,     4,     4,     4, 
       4,     2,     3,     1,     0,     1,     1,     2,     0,     1, 
       1,     1,     0,     2,     1,     1,     3,     1,     1,     1, 
       1,     2,     2,     2,     5,     5,     1,     0,     1,     1, 
       0,     4,     1,     1,     1,     1,     5,     4,     1,     3, 
       1,     1,     1,     1,     2,     2,     1,     1,     0,     1, 
       2,     1,     3,     3,     3,     0,     1,     1,     1,     3, 
       3,     5,     1,     0,     1,     1,     0,     1,     1,     3, 
       3,     2,     3,     1,     2,     3,     1,     0,     0,     1, 
       2,     3,     5,     5,     1,     1,     0,     2,     2,     2, 
       2,     3,     5,     7,     9,     2,     2,     2,     2,     3, 
       3,     2,     2,     3,     2,     2,     2,     2,     2,     2, 
       2,     2,     4,     2,     2,     2,     2,     3,     3,     2, 
       3,     3,     3,     2,     3,     3,     3,     2,     2,     2, 
       2,     2,     2,     3,     2,     2,     1,     1,     3,     1, 
       0,     2,     1,     2,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     2,     0,     0,     2,     2, 
       0,     0,     2,     0,     0,     0,     0,     0,     1,     2, 
       2,     1,     1,     0,     0,     2,     2,     0,     0,     1, 
       0,     0,     0,     0,     1,     1,     1,     1,     1,     3, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     3,     3,     5,     2, 
       3,     3,     3,     2,     3,     2,     3,     2,     2,     2, 
       3,     3,     2,     2,     3,     3,     3,     3,     2,     2, 
       3,     7,     2,     3,     3,     2,     3,     3,     5,     3, 
       3,     3,     3,     2,     5,     2,     5,     5,     3,     3, 
       2,     2,     2,     2,     2,     2,     2,     5,     5,     5, 
       2,     3,     3,     3,     7,     9,     5,     7,     2,     5, 
       3,     3,     3,     3,     2,     3,     0,     1,    -1,     0, 
      -1,     0,     1,     2,    -1,     1,    -1,     1,    -1,     0, 
      -1,     0,     0,     1,     1,     1,    -1,     1,     0,     0, 
       1,     1,     1,    -1,     1,     1,     1,     1,     1,     0, 
       0,     0,    -1,     1,    -1,     1,     0,     1,     1,     1, 
      -1,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     1,    -1,     1,     1,     1, 
       0,     1,     1,     1,     1,    -1,     1,     0,     1,     1, 
       1,    -1,     1,    -1,     0,     0,     0,     0,    -1,     1, 
       1,     1,    -1,     1,     0,     1,     1,    -1,     1,    -1, 
       0,     0,     0,     1,     1,     1,    -1,     1,     1,     1, 
      -1,     1,     0,     0,     0,    -1,     1,    -1,     1,    -1, 
       0,     0,     0,     0,     0,     0,    -1,     0,    -1,     1, 
       1,     1,     0,    -1,     1,     0,     0,    -1,     1,     1, 
       1,     1,     1,    -1,     1,     1,     0,     1,     1,     0, 
       1,     2,    -1,     1,     0,     0,     1,     1,     0,     1, 
      -1,     1,     0,     0,     0,     0,     0,     0,    -1,     1, 
      -1,     0,     0,     0,     1,     1,    -1,     1,     0,     1, 
       1,     0,     1,     0,     1,     2,     0,    -1,     1,     1, 
       0,     0,     1,     0,    -1,     1,     1,     0,     0,     0, 
       0,    -1,     0,    -1,     0,    -1,     0,    -1,     0,     1, 
       1,     0,     0,     0,     0,     0,     0,     1,     1,     1, 
       2,     2,     1,     1,     1,     1,    -1,     0,    -1,     0, 
      -1,     0,    -1,     0,     0,     1,    -1,     1,    -1,     0, 
       0,     2,    -1,     1,     0,     3,     1,     1,     1,    -1, 
       1,     0,     1,     1,     1,     1,     1,    -1,     1,     1, 
       1,     1,     0,    -1,     1,     0,     1,     1,    -1,     1, 
       0,     1,    -1,     1,     0,     0,    -1,     1,    -1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,    -1,     1,    -1,     0,    -1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     3,     0,     1, 
       1,    -1,     1,     1,    -1,     1,     1,    -1,     1,     1, 
      -1,     1,     1,    -1,     1,     3,    -1,     1, 
};

template<>
const int8 *Dbase_parser_tables_t::PL = &PL_[0];

template<>
const uint32 *Dbase_parser_tables_t::nd_fterm = 0;

template<>
const uint32 *Dbase_parser_tables_t::nd_term = 0;

template<>
const uint32 *Dbase_parser_tables_t::nd_faction = 0;

template<>
const uint32 *Dbase_parser_tables_t::nd_action = 0;

// Terminal action number ...
static const int8 tact_numb_[280] = {
       0,    -1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *Dbase_parser_tables_t::tact_numb = &tact_numb_[0];

template<>
const uint32 *Dbase_parser_tables_t::node_numb = 0;

template<>
const uint32 *Dbase_parser_tables_t::nact_numb = 0;

template<>
const uint32 *Dbase_parser_tables_t::reverse = 0;

void Dbase_init_actions(lrstar_parser *parser); /* User-supplied */
void Dbase_term_actions(lrstar_parser *parser); /* User-supplied */
static init_func_t Dbase_init_funcs_[2] = {
   Dbase_init_actions,
   Dbase_term_actions
};

// Init action function pointers ...
template<>
init_func_t *Dbase_parser_tables_t::init_func = &Dbase_init_funcs_[0];

int Dbase_error(lrstar_parser *parser, int &t);
int Dbase_lookup(lrstar_parser *parser, int &t);
// Terminal action function pointers ...
static tact_func_t Dbase_tact_funcs_[2] = {
   Dbase_error,
   Dbase_lookup,
};

// Terminal action function pointers ...
template<>
tact_func_t *Dbase_parser_tables_t::tact_func = &Dbase_tact_funcs_[0];

// Node action function pointers ...
template<>
nact_func_t *Dbase_parser_tables_t::nact_func = 0;


//                                                                           //
///////////////////////////////////////////////////////////////////////////////

