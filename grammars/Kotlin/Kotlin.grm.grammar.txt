
/* Kotlin grammar */

/* Terminal Symbols */

       ABSTRACT                  'abstract';
       ACTUAL                    'actual';
       ADD                       '+';
       ADD_ASSIGNMENT            '+=';
       ANNOTATION                'annotation';
       ARROW                     '->';
       AS                        'as';
       ASSIGNMENT                '=';
       AS_SAFE                   'as?';
       AT_NO_WS                  '@';
       BREAK                     'break';
       BREAK_AT                  'break@';
       BY                        'by';
       CATCH                     'catch';
       CLASS                     'class';
       COLON                     ':';
       COLONCOLON                '::';
       COMMA                     ',';
       COMPANION                 'companion';
       CONJ                      '&&';
       CONST                     'const';
       CONSTRUCTOR               'constructor';
       CONTINUE                  'continue';
       CONTINUE_AT               'continue@';
       CROSSINLINE               'crossinline';
       DATA                      'data';
       DECR                      '--';
       DELEGATE                  'delegate';
       DISJ                      '||';
       DIV                       '/';
       DIV_ASSIGNMENT            '/=';
       DO                        'do';
       DOT                       '.';
       DOUBLE_ARROW              '=>';
       DOUBLE_SEMICOLON          ';;';
       DYNAMIC                   'dynamic';
       ELSE                      'else';
       ENUM                      'enum';
       EQEQ                      '==';
       EQEQEQ                    '===';
       EXCL_EQ                   '!=';
       EXCL_EQEQ                 '!==';
       EXCL_NO_WS                '!';
       EXPECT                    'expect';
       EXTERNAL                  'external';
       FIELD                     'field';
       FILE_                     'file';
       FINAL                     'final';
       FINALLY                   'finally';
       FOR                       'for';
       FUN                       'fun';
       GE                        '>=';
       GET                       'get';
       HASH                      '#';
       IF                        'if';
       IMPORT                    'import';
       IN                        'in';
       INCR                      '++';
       INFIX                     'infix';
       INIT                      'init';
       INLINE                    'inline';
       INNER                     'inner';
       INTERFACE                 'interface';
       INTERNAL                  'internal';
       IS                        'is';
       LANGLE                    '<';
       LATEINIT                  'lateinit';
       LCURL                     '{';
       LE                        '<=';
       LPAREN                    '(';
       LSQUARE                   '[';
       MOD                       '%';
       MOD_ASSIGNMENT            '%=';
       MULT                      '*';
       MULT_ASSIGNMENT           '*=';
       NOINLINE                  'noinline';
       OBJECT                    'object';
       OPEN                      'open';
       OPERATOR                  'operator';
       OUT                       'out';
       OVERRIDE                  'override';
       PACKAGE                   'package';
       PARAM                     'param';
       PRIVATE                   'private';
       PROPERTY                  'property';
       PROTECTED                 'protected';
       PUBLIC                    'public';
       QUEST_NO_WS               '?';
       RANGE                     '..';
       RANGLE                    '>';
       RCURL                     '}';
       RECEIVER                  'receiver';
       REIFIED                   'reified';
       RESERVED                  '...';
       RETURN                    'return';
       RETURN_AT                 'return@';
       RPAREN                    ')';
       RSQUARE                   ']';
       SEALED                    'sealed';
       SEMICOLON                 ';';
       SET                       'set';
       SETPARAM                  'setparam';
       SINGLE_QUOTE              '\'';
       SUB                       '-';
       SUB_ASSIGNMENT            '-=';
       SUPER                     'super';
       SUPER_AT                  'super@';
       SUSPEND                   'suspend';
       TAILREC                   'tailrec';
       THIS                      'this';
       THIS_AT                   'this@';
       THROW                     'throw';
       TRY                       'try';
       TYPEOF                    'typeof';
       TYPE_ALIAS                'typealias';
       VAL                       'val';
       VALUE                     'value';
       VAR                       'var';
       VARARG                    'vararg';
       WHEN                      'when';
       WHERE                     'where';
       WHILE                     'while';

    0  <error>
    1  <eof>
    2  'abstract'
    3  'actual'
    4  '+'
    5  '+='
    6  'annotation'
    7  '->'
    8  'as'
    9  '='
   10  'as?'
   11  '@'
   12  'break'
   13  'break@'
   14  'by'
   15  'catch'
   16  'class'
   17  ':'
   18  '::'
   19  ','
   20  'companion'
   21  '&&'
   22  'const'
   23  'constructor'
   24  'continue'
   25  'continue@'
   26  'crossinline'
   27  'data'
   28  '--'
   29  'delegate'
   30  '||'
   31  '/'
   32  '/='
   33  'do'
   34  '.'
   35  '=>'
   36  ';;'
   37  'dynamic'
   38  'else'
   39  'enum'
   40  '=='
   41  '==='
   42  '!='
   43  '!=='
   44  '!'
   45  'expect'
   46  'external'
   47  'field'
   48  'file'
   49  'final'
   50  'finally'
   51  'for'
   52  'fun'
   53  '>='
   54  'get'
   55  '#'
   56  'if'
   57  'import'
   58  'in'
   59  '++'
   60  'infix'
   61  'init'
   62  'inline'
   63  'inner'
   64  'interface'
   65  'internal'
   66  'is'
   67  '<'
   68  'lateinit'
   69  '{'
   70  '<='
   71  '('
   72  '['
   73  '%'
   74  '%='
   75  '*'
   76  '*='
   77  'noinline'
   78  'object'
   79  'open'
   80  'operator'
   81  'out'
   82  'override'
   83  'package'
   84  'param'
   85  'private'
   86  'property'
   87  'protected'
   88  'public'
   89  '?'
   90  '..'
   91  '>'
   92  '}'
   93  'receiver'
   94  'reified'
   95  '...'
   96  'return'
   97  'return@'
   98  ')'
   99  ']'
  100  'sealed'
  101  ';'
  102  'set'
  103  'setparam'
  104  '\''
  105  '-'
  106  '-='
  107  'super'
  108  'super@'
  109  'suspend'
  110  'tailrec'
  111  'this'
  112  'this@'
  113  'throw'
  114  'try'
  115  'typeof'
  116  'typealias'
  117  'val'
  118  'value'
  119  'var'
  120  'vararg'
  121  'when'
  122  'where'
  123  'while'
  124  'NL'
  125  'ShebangLine'
  126  'AT_PRE_WS'
  127  'QUEST_WS'
  128  'AT_POST_WS'
  129  'EOF'
  130  'BooleanLiteral'
  131  'IntegerLiteral'
  132  'HexLiteral'
  133  'BinLiteral'
  134  'CharacterLiteral'
  135  'RealLiteral'
  136  'NullLiteral'
  137  'LongLiteral'
  138  'UnsignedLiteral'
  139  'QUOTE_OPEN'
  140  'QUOTE_CLOSE'
  141  'TRIPLE_QUOTE_OPEN'
  142  'MultiLineStringQuote'
  143  'TRIPLE_QUOTE_CLOSE'
  144  'LineStrText'
  145  'LineStrEscapedChar'
  146  'LineStrRef'
  147  'LineStrExprStart'
  148  'MultiLineStrText'
  149  'MultiLineStrRef'
  150  'MultiLineStrExprStart'
  151  'NOT_IN'
  152  'NOT_IS'
  153  'EXCL_WS'
  154  'Identifier'

/* Productions */

    0       Goal
        0      : (kotlinFile | script) <eof> 
               ;

    1       kotlinFile
        1      : shebangLine? NL* fileAnnotation* packageHeader importList topLevelObject* 
               ;

    2       script
        2      : shebangLine? NL* fileAnnotation* packageHeader importList (statement semi)* 
               ;

    3       shebangLine
        3      : 'ShebangLine' NL+ 
               ;

    4       fileAnnotation
        4      : ('@' | AT_PRE_WS) 'file' NL* ':' NL* ('[' unescapedAnnotation+ ']' | unescapedAnnotation) NL* 
               ;

    5       packageHeader
        5      : ('package' identifier semi?)? 
               ;

    6       importList
        6      : importHeader* 
               ;

    7       importHeader
        7      : 'import' identifier ('.' '*' | importAlias)? semi? 
               ;

    8       importAlias
        8      : 'as' simpleIdentifier 
               ;

    9       topLevelObject
        9      : declaration semis? 
               ;

   10       typeAlias
       10      : modifiers? 'typealias' NL* simpleIdentifier (NL* typeParameters)? NL* '=' NL* type 
               ;

   11       declaration
       11      : classDeclaration 
       12      | objectDeclaration 
       13      | functionDeclaration 
       14      | propertyDeclaration 
       15      | typeAlias 
               ;

   12       classDeclaration
       16      : modifiers? ('class' | ('fun' NL*)? 'interface') NL* simpleIdentifier (NL* typeParameters)? (NL* primaryConstructor)? (NL* ':' NL* delegationSpecifiers)? (NL* typeConstraints)? (NL* classBody | NL* enumClassBody)? 
               ;

   13       primaryConstructor
       17      : (modifiers? 'constructor' NL*)? classParameters 
               ;

   14       classBody
       18      : '{' NL* classMemberDeclarations NL* '}' 
               ;

   15       classParameters
       19      : '(' NL* (classParameter (NL* ',' NL* classParameter)* (NL* ',')?)? NL* ')' 
               ;

   16       classParameter
       20      : modifiers? ('val' | 'var')? NL* simpleIdentifier ':' NL* type (NL* '=' NL* expression)? 
               ;

   17       delegationSpecifiers
       21      : annotatedDelegationSpecifier (NL* ',' NL* annotatedDelegationSpecifier)* 
               ;

   18       delegationSpecifier
       22      : constructorInvocation 
       23      | explicitDelegation 
       24      | userType 
       25      | functionType 
               ;

   19       constructorInvocation
       26      : userType valueArguments 
               ;

   20       annotatedDelegationSpecifier
       27      : annotation* NL* delegationSpecifier 
               ;

   21       explicitDelegation
       28      : (userType | functionType) NL* 'by' NL* expression 
               ;

   22       typeParameters
       29      : '<' NL* typeParameter (NL* ',' NL* typeParameter)* (NL* ',')? NL* '>' 
               ;

   23       typeParameter
       30      : typeParameterModifiers? NL* simpleIdentifier (NL* ':' NL* type)? 
               ;

   24       typeConstraints
       31      : 'where' NL* typeConstraint (NL* ',' NL* typeConstraint)* 
               ;

   25       typeConstraint
       32      : annotation* simpleIdentifier NL* ':' NL* type 
               ;

   26       classMemberDeclarations
       33      : (classMemberDeclaration semis?)* 
               ;

   27       classMemberDeclaration
       34      : declaration 
       35      | companionObject 
       36      | anonymousInitializer 
       37      | secondaryConstructor 
               ;

   28       anonymousInitializer
       38      : 'init' NL* block 
               ;

   29       companionObject
       39      : modifiers? 'companion' NL* 'object' (NL* simpleIdentifier)? (NL* ':' NL* delegationSpecifiers)? (NL* classBody)? 
               ;

   30       functionValueParameters
       40      : '(' NL* (functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?)? NL* ')' 
               ;

   31       functionValueParameter
       41      : parameterModifiers? parameter (NL* '=' NL* expression)? 
               ;

   32       functionDeclaration
       42      : modifiers? 'fun' (NL* typeParameters)? (NL* receiverType NL* '.')? NL* simpleIdentifier NL* functionValueParameters (NL* ':' NL* type)? (NL* typeConstraints)? (NL* functionBody)? 
               ;

   33       functionBody
       43      : block 
       44      | '=' NL* expression 
               ;

   34       variableDeclaration
       45      : annotation* NL* simpleIdentifier (NL* ':' NL* type)? 
               ;

   35       multiVariableDeclaration
       46      : '(' NL* variableDeclaration (NL* ',' NL* variableDeclaration)* (NL* ',')? NL* ')' 
               ;

   36       propertyDeclaration
       47      : modifiers? ('val' | 'var') (NL* typeParameters)? (NL* receiverType NL* '.')? (NL* (multiVariableDeclaration | variableDeclaration)) (NL* typeConstraints)? (NL* ('=' NL* expression | propertyDelegate))? (NL+ ';')? NL* (getter? (NL* semi? setter)? | setter? (NL* semi? getter)?) 
               ;

   37       propertyDelegate
       48      : 'by' NL* expression 
               ;

   38       getter
       49      : modifiers? 'get' (NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody)? 
               ;

   39       setter
       50      : modifiers? 'set' (NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody)? 
               ;

   40       parametersWithOptionalType
       51      : '(' NL* (functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?)? NL* ')' 
               ;

   41       functionValueParameterWithOptionalType
       52      : parameterModifiers? parameterWithOptionalType (NL* '=' NL* expression)? 
               ;

   42       parameterWithOptionalType
       53      : simpleIdentifier NL* (':' NL* type)? 
               ;

   43       parameter
       54      : simpleIdentifier NL* ':' NL* type 
               ;

   44       objectDeclaration
       55      : modifiers? 'object' NL* simpleIdentifier (NL* ':' NL* delegationSpecifiers)? (NL* classBody)? 
               ;

   45       secondaryConstructor
       56      : modifiers? 'constructor' NL* functionValueParameters (NL* ':' NL* constructorDelegationCall)? NL* block? 
               ;

   46       constructorDelegationCall
       57      : ('this' | 'super') NL* valueArguments 
               ;

   47       enumClassBody
       58      : '{' NL* enumEntries? (NL* ';' NL* classMemberDeclarations)? NL* '}' 
               ;

   48       enumEntries
       59      : enumEntry (NL* ',' NL* enumEntry)* NL* ','? 
               ;

   49       enumEntry
       60      : (modifiers NL*)? simpleIdentifier (NL* valueArguments)? (NL* classBody)? 
               ;

   50       type
       61      : typeModifiers? (parenthesizedType | nullableType | typeReference | functionType) 
               ;

   51       typeReference
       62      : userType 
       63      | 'dynamic' 
               ;

   52       nullableType
       64      : (typeReference | parenthesizedType) NL* quest+ 
               ;

   53       quest
       65      : '?' 
       66      | 'QUEST_WS' 
               ;

   54       userType
       67      : simpleUserType (NL* '.' NL* simpleUserType)* 
               ;

   55       simpleUserType
       68      : simpleIdentifier (NL* typeArguments)? 
               ;

   56       typeProjection
       69      : typeProjectionModifiers? type 
       70      | '*' 
               ;

   57       typeProjectionModifiers
       71      : typeProjectionModifier+ 
               ;

   58       typeProjectionModifier
       72      : varianceModifier NL* 
       73      | annotation 
               ;

   59       functionType
       74      : (receiverType NL* '.' NL*)? functionTypeParameters NL* '->' NL* type 
               ;

   60       functionTypeParameters
       75      : '(' NL* (parameter | type)? (NL* ',' NL* (parameter | type))* (NL* ',')? NL* ')' 
               ;

   61       parenthesizedType
       76      : '(' NL* type NL* ')' 
               ;

   62       receiverType
       77      : typeModifiers? (parenthesizedType | nullableType | typeReference) 
               ;

   63       parenthesizedUserType
       78      : '(' NL* (userType | parenthesizedUserType) NL* ')' 
               ;

   64       statements
       79      : (statement (semis statement)*)? semis? 
               ;

   65       statement
       80      : (label | annotation)* (declaration | assignment | loopStatement | expression) 
               ;

   66       label
       81      : simpleIdentifier ('@' | AT_POST_WS) NL* 
               ;

   67       controlStructureBody
       82      : block 
       83      | statement 
               ;

   68       block
       84      : '{' NL* statements NL* '}' 
               ;

   69       loopStatement
       85      : forStatement 
       86      | whileStatement 
       87      | doWhileStatement 
               ;

   70       forStatement
       88      : 'for' NL* '(' annotation* (variableDeclaration | multiVariableDeclaration) 'in' expression ')' NL* controlStructureBody? 
               ;

   71       whileStatement
       89      : 'while' NL* '(' expression ')' NL* (controlStructureBody | ';') 
               ;

   72       doWhileStatement
       90      : 'do' NL* controlStructureBody? NL* 'while' NL* '(' expression ')' 
               ;

   73       assignment
       91      : (directlyAssignableExpression '=' | assignableExpression assignmentAndOperator) NL* expression 
               ;

   74       semi
       92      : (';' | NL) NL* 
       93      | 'EOF' 
               ;

   75       semis
       94      : (';' | NL)+ 
       95      | 'EOF' 
               ;

   76       expression
       96      : disjunction 
               ;

   77       disjunction
       97      : conjunction (NL* '||' NL* conjunction)* 
               ;

   78       conjunction
       98      : equality (NL* '&&' NL* equality)* 
               ;

   79       equality
       99      : comparison (equalityOperator NL* comparison)* 
               ;

   80       comparison
      100      : genericCallLikeComparison (comparisonOperator NL* genericCallLikeComparison)* 
               ;

   81       genericCallLikeComparison
      101      : infixOperation callSuffix* 
               ;

   82       infixOperation
      102      : elvisExpression (inOperator NL* elvisExpression | isOperator NL* type)* 
               ;

   83       elvisExpression
      103      : infixFunctionCall (NL* elvis NL* infixFunctionCall)* 
               ;

   84       elvis
      104      : '?' ':' 
               ;

   85       infixFunctionCall
      105      : rangeExpression (simpleIdentifier NL* rangeExpression)* 
               ;

   86       rangeExpression
      106      : additiveExpression ('..' NL* additiveExpression)* 
               ;

   87       additiveExpression
      107      : multiplicativeExpression (additiveOperator NL* multiplicativeExpression)* 
               ;

   88       multiplicativeExpression
      108      : asExpression (multiplicativeOperator NL* asExpression)* 
               ;

   89       asExpression
      109      : prefixUnaryExpression (NL* asOperator NL* type)* 
               ;

   90       prefixUnaryExpression
      110      : unaryPrefix* postfixUnaryExpression 
               ;

   91       unaryPrefix
      111      : annotation 
      112      | label 
      113      | prefixUnaryOperator NL* 
               ;

   92       postfixUnaryExpression
      114      : primaryExpression postfixUnarySuffix* 
               ;

   93       postfixUnarySuffix
      115      : postfixUnaryOperator 
      116      | typeArguments 
      117      | callSuffix 
      118      | indexingSuffix 
      119      | navigationSuffix 
               ;

   94       directlyAssignableExpression
      120      : postfixUnaryExpression assignableSuffix 
      121      | simpleIdentifier 
      122      | parenthesizedDirectlyAssignableExpression 
               ;

   95       parenthesizedDirectlyAssignableExpression
      123      : '(' NL* directlyAssignableExpression NL* ')' 
               ;

   96       assignableExpression
      124      : prefixUnaryExpression 
      125      | parenthesizedAssignableExpression 
               ;

   97       parenthesizedAssignableExpression
      126      : '(' NL* assignableExpression NL* ')' 
               ;

   98       assignableSuffix
      127      : typeArguments 
      128      | indexingSuffix 
      129      | navigationSuffix 
               ;

   99       indexingSuffix
      130      : '[' NL* expression (NL* ',' NL* expression)* (NL* ',')? NL* ']' 
               ;

  100       navigationSuffix
      131      : memberAccessOperator NL* (simpleIdentifier | parenthesizedExpression | 'class') 
               ;

  101       callSuffix
      132      : typeArguments? (valueArguments? annotatedLambda | valueArguments) 
               ;

  102       annotatedLambda
      133      : annotation* label? NL* lambdaLiteral 
               ;

  103       typeArguments
      134      : '<' NL* typeProjection (NL* ',' NL* typeProjection)* (NL* ',')? NL* '>' 
               ;

  104       valueArguments
      135      : '(' NL* (valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*)? ')' 
               ;

  105       valueArgument
      136      : annotation? NL* (simpleIdentifier NL* '=' NL*)? '*'? NL* expression 
               ;

  106       primaryExpression
      137      : parenthesizedExpression 
      138      | simpleIdentifier 
      139      | literalConstant 
      140      | stringLiteral 
      141      | callableReference 
      142      | functionLiteral 
      143      | objectLiteral 
      144      | collectionLiteral 
      145      | thisExpression 
      146      | superExpression 
      147      | ifExpression 
      148      | whenExpression 
      149      | tryExpression 
      150      | jumpExpression 
               ;

  107       parenthesizedExpression
      151      : '(' NL* expression NL* ')' 
               ;

  108       collectionLiteral
      152      : '[' NL* (expression (NL* ',' NL* expression)* (NL* ',')? NL*)? ']' 
               ;

  109       literalConstant
      153      : 'BooleanLiteral' 
      154      | 'IntegerLiteral' 
      155      | 'HexLiteral' 
      156      | 'BinLiteral' 
      157      | 'CharacterLiteral' 
      158      | 'RealLiteral' 
      159      | 'NullLiteral' 
      160      | 'LongLiteral' 
      161      | 'UnsignedLiteral' 
               ;

  110       stringLiteral
      162      : lineStringLiteral 
      163      | multiLineStringLiteral 
               ;

  111       lineStringLiteral
      164      : 'QUOTE_OPEN' (lineStringContent | lineStringExpression)* 'QUOTE_CLOSE' 
               ;

  112       multiLineStringLiteral
      165      : 'TRIPLE_QUOTE_OPEN' (multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)* 'TRIPLE_QUOTE_CLOSE' 
               ;

  113       lineStringContent
      166      : 'LineStrText' 
      167      | 'LineStrEscapedChar' 
      168      | 'LineStrRef' 
               ;

  114       lineStringExpression
      169      : 'LineStrExprStart' NL* expression NL* '}' 
               ;

  115       multiLineStringContent
      170      : 'MultiLineStrText' 
      171      | 'MultiLineStringQuote' 
      172      | 'MultiLineStrRef' 
               ;

  116       multiLineStringExpression
      173      : 'MultiLineStrExprStart' NL* expression NL* '}' 
               ;

  117       lambdaLiteral
      174      : '{' NL* (lambdaParameters? NL* '->' NL*)? statements NL* '}' 
               ;

  118       lambdaParameters
      175      : lambdaParameter (NL* ',' NL* lambdaParameter)* (NL* ',')? 
               ;

  119       lambdaParameter
      176      : variableDeclaration 
      177      | multiVariableDeclaration (NL* ':' NL* type)? 
               ;

  120       anonymousFunction
      178      : 'fun' (NL* type NL* '.')? NL* parametersWithOptionalType (NL* ':' NL* type)? (NL* typeConstraints)? (NL* functionBody)? 
               ;

  121       functionLiteral
      179      : lambdaLiteral 
      180      | anonymousFunction 
               ;

  122       objectLiteral
      181      : 'object' (NL* ':' NL* delegationSpecifiers NL*)? (NL* classBody)? 
               ;

  123       thisExpression
      182      : 'this' 
      183      | 'this@' 
               ;

  124       superExpression
      184      : 'super' ('<' NL* type NL* '>')? ('@' simpleIdentifier)? 
      185      | 'super@' 
               ;

  125       ifExpression
      186      : 'if' NL* '(' NL* expression NL* ')' NL* (controlStructureBody | controlStructureBody? NL* ';'? NL* 'else' NL* (controlStructureBody | ';') | ';') 
               ;

  126       whenSubject
      187      : '(' (annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*)? expression ')' 
               ;

  127       whenExpression
      188      : 'when' NL* whenSubject? NL* '{' NL* (whenEntry NL*)* NL* '}' 
               ;

  128       whenEntry
      189      : whenCondition (NL* ',' NL* whenCondition)* (NL* ',')? NL* '->' NL* controlStructureBody semi? 
      190      | 'else' NL* '->' NL* controlStructureBody semi? 
               ;

  129       whenCondition
      191      : expression 
      192      | rangeTest 
      193      | typeTest 
               ;

  130       rangeTest
      194      : inOperator NL* expression 
               ;

  131       typeTest
      195      : isOperator NL* type 
               ;

  132       tryExpression
      196      : 'try' NL* block ((NL* catchBlock)+ (NL* finallyBlock)? | NL* finallyBlock) 
               ;

  133       catchBlock
      197      : 'catch' NL* '(' annotation* simpleIdentifier ':' type (NL* ',')? ')' NL* block 
               ;

  134       finallyBlock
      198      : 'finally' NL* block 
               ;

  135       jumpExpression
      199      : 'throw' NL* expression 
      200      | ('return' | 'return@') expression? 
      201      | 'continue' 
      202      | 'continue@' 
      203      | 'break' 
      204      | 'break@' 
               ;

  136       callableReference
      205      : receiverType? '::' NL* (simpleIdentifier | 'class') 
               ;

  137       assignmentAndOperator
      206      : '+=' 
      207      | '-=' 
      208      | '*=' 
      209      | '/=' 
      210      | '%=' 
               ;

  138       equalityOperator
      211      : '!=' 
      212      | '!==' 
      213      | '==' 
      214      | '===' 
               ;

  139       comparisonOperator
      215      : '<' 
      216      | '>' 
      217      | '<=' 
      218      | '>=' 
               ;

  140       inOperator
      219      : 'in' 
      220      | 'NOT_IN' 
               ;

  141       isOperator
      221      : 'is' 
      222      | 'NOT_IS' 
               ;

  142       additiveOperator
      223      : '+' 
      224      | '-' 
               ;

  143       multiplicativeOperator
      225      : '*' 
      226      | '/' 
      227      | '%' 
               ;

  144       asOperator
      228      : 'as' 
      229      | 'as?' 
               ;

  145       prefixUnaryOperator
      230      : '++' 
      231      | '--' 
      232      | '-' 
      233      | '+' 
      234      | excl 
               ;

  146       postfixUnaryOperator
      235      : '++' 
      236      | '--' 
      237      | '!' excl 
               ;

  147       excl
      238      : '!' 
      239      | 'EXCL_WS' 
               ;

  148       memberAccessOperator
      240      : NL* '.' 
      241      | NL* safeNav 
      242      | '::' 
               ;

  149       safeNav
      243      : '?' '.' 
               ;

  150       modifiers
      244      : (annotation | modifier)+ 
               ;

  151       parameterModifiers
      245      : (annotation | parameterModifier)+ 
               ;

  152       modifier
      246      : (classModifier | memberModifier | visibilityModifier | functionModifier | propertyModifier | inheritanceModifier | parameterModifier | platformModifier) NL* 
               ;

  153       typeModifiers
      247      : typeModifier+ 
               ;

  154       typeModifier
      248      : annotation 
      249      | 'suspend' NL* 
               ;

  155       classModifier
      250      : 'enum' 
      251      | 'sealed' 
      252      | 'annotation' 
      253      | 'data' 
      254      | 'inner' 
      255      | 'value' 
               ;

  156       memberModifier
      256      : 'override' 
      257      | 'lateinit' 
               ;

  157       visibilityModifier
      258      : 'public' 
      259      | 'private' 
      260      | 'internal' 
      261      | 'protected' 
               ;

  158       varianceModifier
      262      : 'in' 
      263      | 'out' 
               ;

  159       typeParameterModifiers
      264      : typeParameterModifier+ 
               ;

  160       typeParameterModifier
      265      : reificationModifier NL* 
      266      | varianceModifier NL* 
      267      | annotation 
               ;

  161       functionModifier
      268      : 'tailrec' 
      269      | 'operator' 
      270      | 'infix' 
      271      | 'inline' 
      272      | 'external' 
      273      | 'suspend' 
               ;

  162       propertyModifier
      274      : 'const' 
               ;

  163       inheritanceModifier
      275      : 'abstract' 
      276      | 'final' 
      277      | 'open' 
               ;

  164       parameterModifier
      278      : 'vararg' 
      279      | 'noinline' 
      280      | 'crossinline' 
               ;

  165       reificationModifier
      281      : 'reified' 
               ;

  166       platformModifier
      282      : 'expect' 
      283      | 'actual' 
               ;

  167       annotation
      284      : (singleAnnotation | multiAnnotation) NL* 
               ;

  168       singleAnnotation
      285      : (annotationUseSiteTarget NL* | '@' | AT_PRE_WS) unescapedAnnotation 
               ;

  169       multiAnnotation
      286      : (annotationUseSiteTarget NL* | '@' | AT_PRE_WS) '[' unescapedAnnotation+ ']' 
               ;

  170       annotationUseSiteTarget
      287      : ('@' | AT_PRE_WS) ('field' | 'property' | 'get' | 'set' | 'receiver' | 'param' | 'setparam' | 'delegate') NL* ':' 
               ;

  171       unescapedAnnotation
      288      : constructorInvocation 
      289      | userType 
               ;

  172       simpleIdentifier
      290      : 'Identifier' 
      291      | 'abstract' 
      292      | 'annotation' 
      293      | 'by' 
      294      | 'catch' 
      295      | 'companion' 
      296      | 'constructor' 
      297      | 'crossinline' 
      298      | 'data' 
      299      | 'dynamic' 
      300      | 'enum' 
      301      | 'external' 
      302      | 'final' 
      303      | 'finally' 
      304      | 'get' 
      305      | 'import' 
      306      | 'infix' 
      307      | 'init' 
      308      | 'inline' 
      309      | 'inner' 
      310      | 'internal' 
      311      | 'lateinit' 
      312      | 'noinline' 
      313      | 'open' 
      314      | 'operator' 
      315      | 'out' 
      316      | 'override' 
      317      | 'private' 
      318      | 'protected' 
      319      | 'public' 
      320      | 'reified' 
      321      | 'sealed' 
      322      | 'tailrec' 
      323      | 'set' 
      324      | 'vararg' 
      325      | 'where' 
      326      | 'field' 
      327      | 'property' 
      328      | 'receiver' 
      329      | 'param' 
      330      | 'setparam' 
      331      | 'delegate' 
      332      | 'file' 
      333      | 'expect' 
      334      | 'actual' 
      335      | 'const' 
      336      | 'suspend' 
      337      | 'value' 
               ;

  173       identifier
      338      : simpleIdentifier (NL* '.' simpleIdentifier)* 
               ;

  174       (kotlinFile | script)
      339      : kotlinFile 
      340      | script 
               ;

  175       shebangLine?
      341      : 
      342      | shebangLine 
               ;

  176       NL*
      343      : 
      344      | NL* 'NL' 
               ;

  177       fileAnnotation*
      345      : 
      346      | fileAnnotation* fileAnnotation 
               ;

  178       topLevelObject*
      347      : 
      348      | topLevelObject* topLevelObject 
               ;

  179       (statement semi)
      349      : statement semi 
               ;

  180       (statement semi)*
      350      : 
      351      | (statement semi)* (statement semi) 
               ;

  181       NL+
      352      : 'NL' 
      353      | NL+ 'NL' 
               ;

  182       ('@' | AT_PRE_WS)
      354      : '@' 
      355      | 'AT_PRE_WS' 
               ;

  183       unescapedAnnotation+
      356      : unescapedAnnotation 
      357      | unescapedAnnotation+ unescapedAnnotation 
               ;

  184       ('[' unescapedAnnotation+ ']' | unescapedAnnotation)
      358      : '[' unescapedAnnotation+ ']' 
      359      | unescapedAnnotation 
               ;

  185       semi?
      360      : 
      361      | semi 
               ;

  186       ('package' identifier semi?)
      362      : 'package' identifier semi? 
               ;

  187       ('package' identifier semi?)?
      363      : 
      364      | ('package' identifier semi?) 
               ;

  188       importHeader*
      365      : 
      366      | importHeader* importHeader 
               ;

  189       ('.' '*' | importAlias)
      367      : '.' '*' 
      368      | importAlias 
               ;

  190       ('.' '*' | importAlias)?
      369      : 
      370      | ('.' '*' | importAlias) 
               ;

  191       semis?
      371      : 
      372      | semis 
               ;

  192       modifiers?
      373      : 
      374      | modifiers 
               ;

  193       (NL* typeParameters)
      375      : NL* typeParameters 
               ;

  194       (NL* typeParameters)?
      376      : 
      377      | (NL* typeParameters) 
               ;

  195       ('fun' NL*)
      378      : 'fun' NL* 
               ;

  196       ('fun' NL*)?
      379      : 
      380      | ('fun' NL*) 
               ;

  197       ('class' | ('fun' NL*)? 'interface')
      381      : 'class' 
      382      | ('fun' NL*)? 'interface' 
               ;

  198       (NL* primaryConstructor)
      383      : NL* primaryConstructor 
               ;

  199       (NL* primaryConstructor)?
      384      : 
      385      | (NL* primaryConstructor) 
               ;

  200       (NL* ':' NL* delegationSpecifiers)
      386      : NL* ':' NL* delegationSpecifiers 
               ;

  201       (NL* ':' NL* delegationSpecifiers)?
      387      : 
      388      | (NL* ':' NL* delegationSpecifiers) 
               ;

  202       (NL* typeConstraints)
      389      : NL* typeConstraints 
               ;

  203       (NL* typeConstraints)?
      390      : 
      391      | (NL* typeConstraints) 
               ;

  204       (NL* classBody | NL* enumClassBody)
      392      : NL* classBody 
      393      | NL* enumClassBody 
               ;

  205       (NL* classBody | NL* enumClassBody)?
      394      : 
      395      | (NL* classBody | NL* enumClassBody) 
               ;

  206       (modifiers? 'constructor' NL*)
      396      : modifiers? 'constructor' NL* 
               ;

  207       (modifiers? 'constructor' NL*)?
      397      : 
      398      | (modifiers? 'constructor' NL*) 
               ;

  208       (NL* ',' NL* classParameter)
      399      : NL* ',' NL* classParameter 
               ;

  209       (NL* ',' NL* classParameter)*
      400      : 
      401      | (NL* ',' NL* classParameter)* (NL* ',' NL* classParameter) 
               ;

  210       (NL* ',')
      402      : NL* ',' 
               ;

  211       (NL* ',')?
      403      : 
      404      | (NL* ',') 
               ;

  212       (classParameter (NL* ',' NL* classParameter)* (NL* ',')?)
      405      : classParameter (NL* ',' NL* classParameter)* (NL* ',')? 
               ;

  213       (classParameter (NL* ',' NL* classParameter)* (NL* ',')?)?
      406      : 
      407      | (classParameter (NL* ',' NL* classParameter)* (NL* ',')?) 
               ;

  214       ('val' | 'var')
      408      : 'val' 
      409      | 'var' 
               ;

  215       ('val' | 'var')?
      410      : 
      411      | ('val' | 'var') 
               ;

  216       (NL* '=' NL* expression)
      412      : NL* '=' NL* expression 
               ;

  217       (NL* '=' NL* expression)?
      413      : 
      414      | (NL* '=' NL* expression) 
               ;

  218       (NL* ',' NL* annotatedDelegationSpecifier)
      415      : NL* ',' NL* annotatedDelegationSpecifier 
               ;

  219       (NL* ',' NL* annotatedDelegationSpecifier)*
      416      : 
      417      | (NL* ',' NL* annotatedDelegationSpecifier)* (NL* ',' NL* annotatedDelegationSpecifier) 
               ;

  220       annotation*
      418      : 
      419      | annotation* annotation 
               ;

  221       (userType | functionType)
      420      : userType 
      421      | functionType 
               ;

  222       (NL* ',' NL* typeParameter)
      422      : NL* ',' NL* typeParameter 
               ;

  223       (NL* ',' NL* typeParameter)*
      423      : 
      424      | (NL* ',' NL* typeParameter)* (NL* ',' NL* typeParameter) 
               ;

  224       typeParameterModifiers?
      425      : 
      426      | typeParameterModifiers 
               ;

  225       (NL* ':' NL* type)
      427      : NL* ':' NL* type 
               ;

  226       (NL* ':' NL* type)?
      428      : 
      429      | (NL* ':' NL* type) 
               ;

  227       (NL* ',' NL* typeConstraint)
      430      : NL* ',' NL* typeConstraint 
               ;

  228       (NL* ',' NL* typeConstraint)*
      431      : 
      432      | (NL* ',' NL* typeConstraint)* (NL* ',' NL* typeConstraint) 
               ;

  229       (classMemberDeclaration semis?)
      433      : classMemberDeclaration semis? 
               ;

  230       (classMemberDeclaration semis?)*
      434      : 
      435      | (classMemberDeclaration semis?)* (classMemberDeclaration semis?) 
               ;

  231       (NL* simpleIdentifier)
      436      : NL* simpleIdentifier 
               ;

  232       (NL* simpleIdentifier)?
      437      : 
      438      | (NL* simpleIdentifier) 
               ;

  233       (NL* classBody)
      439      : NL* classBody 
               ;

  234       (NL* classBody)?
      440      : 
      441      | (NL* classBody) 
               ;

  235       (NL* ',' NL* functionValueParameter)
      442      : NL* ',' NL* functionValueParameter 
               ;

  236       (NL* ',' NL* functionValueParameter)*
      443      : 
      444      | (NL* ',' NL* functionValueParameter)* (NL* ',' NL* functionValueParameter) 
               ;

  237       (functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?)
      445      : functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')? 
               ;

  238       (functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?)?
      446      : 
      447      | (functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?) 
               ;

  239       parameterModifiers?
      448      : 
      449      | parameterModifiers 
               ;

  240       (NL* receiverType NL* '.')
      450      : NL* receiverType NL* '.' 
               ;

  241       (NL* receiverType NL* '.')?
      451      : 
      452      | (NL* receiverType NL* '.') 
               ;

  242       (NL* functionBody)
      453      : NL* functionBody 
               ;

  243       (NL* functionBody)?
      454      : 
      455      | (NL* functionBody) 
               ;

  244       (NL* ',' NL* variableDeclaration)
      456      : NL* ',' NL* variableDeclaration 
               ;

  245       (NL* ',' NL* variableDeclaration)*
      457      : 
      458      | (NL* ',' NL* variableDeclaration)* (NL* ',' NL* variableDeclaration) 
               ;

  246       (multiVariableDeclaration | variableDeclaration)
      459      : multiVariableDeclaration 
      460      | variableDeclaration 
               ;

  247       (NL* (multiVariableDeclaration | variableDeclaration))
      461      : NL* (multiVariableDeclaration | variableDeclaration) 
               ;

  248       ('=' NL* expression | propertyDelegate)
      462      : '=' NL* expression 
      463      | propertyDelegate 
               ;

  249       (NL* ('=' NL* expression | propertyDelegate))
      464      : NL* ('=' NL* expression | propertyDelegate) 
               ;

  250       (NL* ('=' NL* expression | propertyDelegate))?
      465      : 
      466      | (NL* ('=' NL* expression | propertyDelegate)) 
               ;

  251       (NL+ ';')
      467      : NL+ ';' 
               ;

  252       (NL+ ';')?
      468      : 
      469      | (NL+ ';') 
               ;

  253       getter?
      470      : 
      471      | getter 
               ;

  254       (NL* semi? setter)
      472      : NL* semi? setter 
               ;

  255       (NL* semi? setter)?
      473      : 
      474      | (NL* semi? setter) 
               ;

  256       setter?
      475      : 
      476      | setter 
               ;

  257       (NL* semi? getter)
      477      : NL* semi? getter 
               ;

  258       (NL* semi? getter)?
      478      : 
      479      | (NL* semi? getter) 
               ;

  259       (getter? (NL* semi? setter)? | setter? (NL* semi? getter)?)
      480      : getter? (NL* semi? setter)? 
      481      | setter? (NL* semi? getter)? 
               ;

  260       (NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody)
      482      : NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody 
               ;

  261       (NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody)?
      483      : 
      484      | (NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody) 
               ;

  262       (NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody)
      485      : NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody 
               ;

  263       (NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody)?
      486      : 
      487      | (NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody) 
               ;

  264       (NL* ',' NL* functionValueParameterWithOptionalType)
      488      : NL* ',' NL* functionValueParameterWithOptionalType 
               ;

  265       (NL* ',' NL* functionValueParameterWithOptionalType)*
      489      : 
      490      | (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',' NL* functionValueParameterWithOptionalType) 
               ;

  266       (functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?)
      491      : functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')? 
               ;

  267       (functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?)?
      492      : 
      493      | (functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?) 
               ;

  268       (':' NL* type)
      494      : ':' NL* type 
               ;

  269       (':' NL* type)?
      495      : 
      496      | (':' NL* type) 
               ;

  270       (NL* ':' NL* constructorDelegationCall)
      497      : NL* ':' NL* constructorDelegationCall 
               ;

  271       (NL* ':' NL* constructorDelegationCall)?
      498      : 
      499      | (NL* ':' NL* constructorDelegationCall) 
               ;

  272       block?
      500      : 
      501      | block 
               ;

  273       ('this' | 'super')
      502      : 'this' 
      503      | 'super' 
               ;

  274       enumEntries?
      504      : 
      505      | enumEntries 
               ;

  275       (NL* ';' NL* classMemberDeclarations)
      506      : NL* ';' NL* classMemberDeclarations 
               ;

  276       (NL* ';' NL* classMemberDeclarations)?
      507      : 
      508      | (NL* ';' NL* classMemberDeclarations) 
               ;

  277       (NL* ',' NL* enumEntry)
      509      : NL* ',' NL* enumEntry 
               ;

  278       (NL* ',' NL* enumEntry)*
      510      : 
      511      | (NL* ',' NL* enumEntry)* (NL* ',' NL* enumEntry) 
               ;

  279       ','?
      512      : 
      513      | ',' 
               ;

  280       (modifiers NL*)
      514      : modifiers NL* 
               ;

  281       (modifiers NL*)?
      515      : 
      516      | (modifiers NL*) 
               ;

  282       (NL* valueArguments)
      517      : NL* valueArguments 
               ;

  283       (NL* valueArguments)?
      518      : 
      519      | (NL* valueArguments) 
               ;

  284       typeModifiers?
      520      : 
      521      | typeModifiers 
               ;

  285       (parenthesizedType | nullableType | typeReference | functionType)
      522      : parenthesizedType 
      523      | nullableType 
      524      | typeReference 
      525      | functionType 
               ;

  286       (typeReference | parenthesizedType)
      526      : typeReference 
      527      | parenthesizedType 
               ;

  287       quest+
      528      : quest 
      529      | quest+ quest 
               ;

  288       (NL* '.' NL* simpleUserType)
      530      : NL* '.' NL* simpleUserType 
               ;

  289       (NL* '.' NL* simpleUserType)*
      531      : 
      532      | (NL* '.' NL* simpleUserType)* (NL* '.' NL* simpleUserType) 
               ;

  290       (NL* typeArguments)
      533      : NL* typeArguments 
               ;

  291       (NL* typeArguments)?
      534      : 
      535      | (NL* typeArguments) 
               ;

  292       typeProjectionModifiers?
      536      : 
      537      | typeProjectionModifiers 
               ;

  293       typeProjectionModifier+
      538      : typeProjectionModifier 
      539      | typeProjectionModifier+ typeProjectionModifier 
               ;

  294       (receiverType NL* '.' NL*)
      540      : receiverType NL* '.' NL* 
               ;

  295       (receiverType NL* '.' NL*)?
      541      : 
      542      | (receiverType NL* '.' NL*) 
               ;

  296       (parameter | type)
      543      : parameter 
      544      | type 
               ;

  297       (parameter | type)?
      545      : 
      546      | (parameter | type) 
               ;

  298       (NL* ',' NL* (parameter | type))
      547      : NL* ',' NL* (parameter | type) 
               ;

  299       (NL* ',' NL* (parameter | type))*
      548      : 
      549      | (NL* ',' NL* (parameter | type))* (NL* ',' NL* (parameter | type)) 
               ;

  300       (parenthesizedType | nullableType | typeReference)
      550      : parenthesizedType 
      551      | nullableType 
      552      | typeReference 
               ;

  301       (userType | parenthesizedUserType)
      553      : userType 
      554      | parenthesizedUserType 
               ;

  302       (semis statement)
      555      : semis statement 
               ;

  303       (semis statement)*
      556      : 
      557      | (semis statement)* (semis statement) 
               ;

  304       (statement (semis statement)*)
      558      : statement (semis statement)* 
               ;

  305       (statement (semis statement)*)?
      559      : 
      560      | (statement (semis statement)*) 
               ;

  306       (label | annotation)
      561      : label 
      562      | annotation 
               ;

  307       (label | annotation)*
      563      : 
      564      | (label | annotation)* (label | annotation) 
               ;

  308       (declaration | assignment | loopStatement | expression)
      565      : declaration 
      566      | assignment 
      567      | loopStatement 
      568      | expression 
               ;

  309       ('@' | AT_POST_WS)
      569      : '@' 
      570      | 'AT_POST_WS' 
               ;

  310       (variableDeclaration | multiVariableDeclaration)
      571      : variableDeclaration 
      572      | multiVariableDeclaration 
               ;

  311       controlStructureBody?
      573      : 
      574      | controlStructureBody 
               ;

  312       (controlStructureBody | ';')
      575      : controlStructureBody 
      576      | ';' 
               ;

  313       (directlyAssignableExpression '=' | assignableExpression assignmentAndOperator)
      577      : directlyAssignableExpression '=' 
      578      | assignableExpression assignmentAndOperator 
               ;

  314       (';' | NL)
      579      : ';' 
      580      | 'NL' 
               ;

  315       (';' | NL)+
      581      : (';' | NL) 
      582      | (';' | NL)+ (';' | NL) 
               ;

  316       (NL* '||' NL* conjunction)
      583      : NL* '||' NL* conjunction 
               ;

  317       (NL* '||' NL* conjunction)*
      584      : 
      585      | (NL* '||' NL* conjunction)* (NL* '||' NL* conjunction) 
               ;

  318       (NL* '&&' NL* equality)
      586      : NL* '&&' NL* equality 
               ;

  319       (NL* '&&' NL* equality)*
      587      : 
      588      | (NL* '&&' NL* equality)* (NL* '&&' NL* equality) 
               ;

  320       (equalityOperator NL* comparison)
      589      : equalityOperator NL* comparison 
               ;

  321       (equalityOperator NL* comparison)*
      590      : 
      591      | (equalityOperator NL* comparison)* (equalityOperator NL* comparison) 
               ;

  322       (comparisonOperator NL* genericCallLikeComparison)
      592      : comparisonOperator NL* genericCallLikeComparison 
               ;

  323       (comparisonOperator NL* genericCallLikeComparison)*
      593      : 
      594      | (comparisonOperator NL* genericCallLikeComparison)* (comparisonOperator NL* genericCallLikeComparison) 
               ;

  324       callSuffix*
      595      : 
      596      | callSuffix* callSuffix 
               ;

  325       (inOperator NL* elvisExpression | isOperator NL* type)
      597      : inOperator NL* elvisExpression 
      598      | isOperator NL* type 
               ;

  326       (inOperator NL* elvisExpression | isOperator NL* type)*
      599      : 
      600      | (inOperator NL* elvisExpression | isOperator NL* type)* (inOperator NL* elvisExpression | isOperator NL* type) 
               ;

  327       (NL* elvis NL* infixFunctionCall)
      601      : NL* elvis NL* infixFunctionCall 
               ;

  328       (NL* elvis NL* infixFunctionCall)*
      602      : 
      603      | (NL* elvis NL* infixFunctionCall)* (NL* elvis NL* infixFunctionCall) 
               ;

  329       (simpleIdentifier NL* rangeExpression)
      604      : simpleIdentifier NL* rangeExpression 
               ;

  330       (simpleIdentifier NL* rangeExpression)*
      605      : 
      606      | (simpleIdentifier NL* rangeExpression)* (simpleIdentifier NL* rangeExpression) 
               ;

  331       ('..' NL* additiveExpression)
      607      : '..' NL* additiveExpression 
               ;

  332       ('..' NL* additiveExpression)*
      608      : 
      609      | ('..' NL* additiveExpression)* ('..' NL* additiveExpression) 
               ;

  333       (additiveOperator NL* multiplicativeExpression)
      610      : additiveOperator NL* multiplicativeExpression 
               ;

  334       (additiveOperator NL* multiplicativeExpression)*
      611      : 
      612      | (additiveOperator NL* multiplicativeExpression)* (additiveOperator NL* multiplicativeExpression) 
               ;

  335       (multiplicativeOperator NL* asExpression)
      613      : multiplicativeOperator NL* asExpression 
               ;

  336       (multiplicativeOperator NL* asExpression)*
      614      : 
      615      | (multiplicativeOperator NL* asExpression)* (multiplicativeOperator NL* asExpression) 
               ;

  337       (NL* asOperator NL* type)
      616      : NL* asOperator NL* type 
               ;

  338       (NL* asOperator NL* type)*
      617      : 
      618      | (NL* asOperator NL* type)* (NL* asOperator NL* type) 
               ;

  339       unaryPrefix*
      619      : 
      620      | unaryPrefix* unaryPrefix 
               ;

  340       postfixUnarySuffix*
      621      : 
      622      | postfixUnarySuffix* postfixUnarySuffix 
               ;

  341       (NL* ',' NL* expression)
      623      : NL* ',' NL* expression 
               ;

  342       (NL* ',' NL* expression)*
      624      : 
      625      | (NL* ',' NL* expression)* (NL* ',' NL* expression) 
               ;

  343       (simpleIdentifier | parenthesizedExpression | 'class')
      626      : simpleIdentifier 
      627      | parenthesizedExpression 
      628      | 'class' 
               ;

  344       typeArguments?
      629      : 
      630      | typeArguments 
               ;

  345       valueArguments?
      631      : 
      632      | valueArguments 
               ;

  346       (valueArguments? annotatedLambda | valueArguments)
      633      : valueArguments? annotatedLambda 
      634      | valueArguments 
               ;

  347       label?
      635      : 
      636      | label 
               ;

  348       (NL* ',' NL* typeProjection)
      637      : NL* ',' NL* typeProjection 
               ;

  349       (NL* ',' NL* typeProjection)*
      638      : 
      639      | (NL* ',' NL* typeProjection)* (NL* ',' NL* typeProjection) 
               ;

  350       (NL* ',' NL* valueArgument)
      640      : NL* ',' NL* valueArgument 
               ;

  351       (NL* ',' NL* valueArgument)*
      641      : 
      642      | (NL* ',' NL* valueArgument)* (NL* ',' NL* valueArgument) 
               ;

  352       (valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*)
      643      : valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL* 
               ;

  353       (valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*)?
      644      : 
      645      | (valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*) 
               ;

  354       annotation?
      646      : 
      647      | annotation 
               ;

  355       (simpleIdentifier NL* '=' NL*)
      648      : simpleIdentifier NL* '=' NL* 
               ;

  356       (simpleIdentifier NL* '=' NL*)?
      649      : 
      650      | (simpleIdentifier NL* '=' NL*) 
               ;

  357       '*'?
      651      : 
      652      | '*' 
               ;

  358       (expression (NL* ',' NL* expression)* (NL* ',')? NL*)
      653      : expression (NL* ',' NL* expression)* (NL* ',')? NL* 
               ;

  359       (expression (NL* ',' NL* expression)* (NL* ',')? NL*)?
      654      : 
      655      | (expression (NL* ',' NL* expression)* (NL* ',')? NL*) 
               ;

  360       (lineStringContent | lineStringExpression)
      656      : lineStringContent 
      657      | lineStringExpression 
               ;

  361       (lineStringContent | lineStringExpression)*
      658      : 
      659      | (lineStringContent | lineStringExpression)* (lineStringContent | lineStringExpression) 
               ;

  362       (multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)
      660      : multiLineStringContent 
      661      | multiLineStringExpression 
      662      | 'MultiLineStringQuote' 
               ;

  363       (multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)*
      663      : 
      664      | (multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)* (multiLineStringContent | multiLineStringExpression | MultiLineStringQuote) 
               ;

  364       lambdaParameters?
      665      : 
      666      | lambdaParameters 
               ;

  365       (lambdaParameters? NL* '->' NL*)
      667      : lambdaParameters? NL* '->' NL* 
               ;

  366       (lambdaParameters? NL* '->' NL*)?
      668      : 
      669      | (lambdaParameters? NL* '->' NL*) 
               ;

  367       (NL* ',' NL* lambdaParameter)
      670      : NL* ',' NL* lambdaParameter 
               ;

  368       (NL* ',' NL* lambdaParameter)*
      671      : 
      672      | (NL* ',' NL* lambdaParameter)* (NL* ',' NL* lambdaParameter) 
               ;

  369       (NL* type NL* '.')
      673      : NL* type NL* '.' 
               ;

  370       (NL* type NL* '.')?
      674      : 
      675      | (NL* type NL* '.') 
               ;

  371       (NL* ':' NL* delegationSpecifiers NL*)
      676      : NL* ':' NL* delegationSpecifiers NL* 
               ;

  372       (NL* ':' NL* delegationSpecifiers NL*)?
      677      : 
      678      | (NL* ':' NL* delegationSpecifiers NL*) 
               ;

  373       ('<' NL* type NL* '>')
      679      : '<' NL* type NL* '>' 
               ;

  374       ('<' NL* type NL* '>')?
      680      : 
      681      | ('<' NL* type NL* '>') 
               ;

  375       ('@' simpleIdentifier)
      682      : '@' simpleIdentifier 
               ;

  376       ('@' simpleIdentifier)?
      683      : 
      684      | ('@' simpleIdentifier) 
               ;

  377       ';'?
      685      : 
      686      | ';' 
               ;

  378       (controlStructureBody | controlStructureBody? NL* ';'? NL* 'else' NL* (controlStructureBody | ';') | ';')
      687      : controlStructureBody 
      688      | controlStructureBody? NL* ';'? NL* 'else' NL* (controlStructureBody | ';') 
      689      | ';' 
               ;

  379       (annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*)
      690      : annotation* NL* 'val' NL* variableDeclaration NL* '=' NL* 
               ;

  380       (annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*)?
      691      : 
      692      | (annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*) 
               ;

  381       whenSubject?
      693      : 
      694      | whenSubject 
               ;

  382       (whenEntry NL*)
      695      : whenEntry NL* 
               ;

  383       (whenEntry NL*)*
      696      : 
      697      | (whenEntry NL*)* (whenEntry NL*) 
               ;

  384       (NL* ',' NL* whenCondition)
      698      : NL* ',' NL* whenCondition 
               ;

  385       (NL* ',' NL* whenCondition)*
      699      : 
      700      | (NL* ',' NL* whenCondition)* (NL* ',' NL* whenCondition) 
               ;

  386       (NL* catchBlock)
      701      : NL* catchBlock 
               ;

  387       (NL* catchBlock)+
      702      : (NL* catchBlock) 
      703      | (NL* catchBlock)+ (NL* catchBlock) 
               ;

  388       (NL* finallyBlock)
      704      : NL* finallyBlock 
               ;

  389       (NL* finallyBlock)?
      705      : 
      706      | (NL* finallyBlock) 
               ;

  390       ((NL* catchBlock)+ (NL* finallyBlock)? | NL* finallyBlock)
      707      : (NL* catchBlock)+ (NL* finallyBlock)? 
      708      | NL* finallyBlock 
               ;

  391       ('return' | 'return@')
      709      : 'return' 
      710      | 'return@' 
               ;

  392       expression?
      711      : 
      712      | expression 
               ;

  393       receiverType?
      713      : 
      714      | receiverType 
               ;

  394       (simpleIdentifier | 'class')
      715      : simpleIdentifier 
      716      | 'class' 
               ;

  395       (annotation | modifier)
      717      : annotation 
      718      | modifier 
               ;

  396       (annotation | modifier)+
      719      : (annotation | modifier) 
      720      | (annotation | modifier)+ (annotation | modifier) 
               ;

  397       (annotation | parameterModifier)
      721      : annotation 
      722      | parameterModifier 
               ;

  398       (annotation | parameterModifier)+
      723      : (annotation | parameterModifier) 
      724      | (annotation | parameterModifier)+ (annotation | parameterModifier) 
               ;

  399       (classModifier | memberModifier | visibilityModifier | functionModifier | propertyModifier | inheritanceModifier | parameterModifier | platformModifier)
      725      : classModifier 
      726      | memberModifier 
      727      | visibilityModifier 
      728      | functionModifier 
      729      | propertyModifier 
      730      | inheritanceModifier 
      731      | parameterModifier 
      732      | platformModifier 
               ;

  400       typeModifier+
      733      : typeModifier 
      734      | typeModifier+ typeModifier 
               ;

  401       typeParameterModifier+
      735      : typeParameterModifier 
      736      | typeParameterModifier+ typeParameterModifier 
               ;

  402       (singleAnnotation | multiAnnotation)
      737      : singleAnnotation 
      738      | multiAnnotation 
               ;

  403       (annotationUseSiteTarget NL* | '@' | AT_PRE_WS)
      739      : annotationUseSiteTarget NL* 
      740      | '@' 
      741      | 'AT_PRE_WS' 
               ;

  404       ('field' | 'property' | 'get' | 'set' | 'receiver' | 'param' | 'setparam' | 'delegate')
      742      : 'field' 
      743      | 'property' 
      744      | 'get' 
      745      | 'set' 
      746      | 'receiver' 
      747      | 'param' 
      748      | 'setparam' 
      749      | 'delegate' 
               ;

  405       (NL* '.' simpleIdentifier)
      750      : NL* '.' simpleIdentifier 
               ;

  406       (NL* '.' simpleIdentifier)*
      751      : 
      752      | (NL* '.' simpleIdentifier)* (NL* '.' simpleIdentifier) 
               ;

/* End of Kotlin grammar 

