
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    Kotlin_ParserTables.hpp (generated by LRSTAR 24.0.017)

      #include "Kotlin_ParserTables.h"
      #include "Kotlin_Actions.h"

      static int n_terms      =  155; // Number of terminals.
      static int n_heads      =  407; // Number of nonterminals.
      static int n_prods      =  753; // Number of productions.
      static int n_states     =  670; // Number of states.
      static int accept_state =  669; // Accept state.
      static int n_termactns  =    0; // Number of terminal actions.
      static int n_nodenames  =    0; // Number of node names.
      static int n_nodeactns  =    0; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      char* Kotlin_ParserTables::term_symb[155] = 
      {
         "<error>",
         "<eof>",
         "\'abstract\'",
         "\'actual\'",
         "\'+\'",
         "\'+=\'",
         "\'annotation\'",
         "\'->\'",
         "\'as\'",
         "\'=\'",
         "\'as?\'",
         "\'@\'",
         "\'break\'",
         "\'break@\'",
         "\'by\'",
         "\'catch\'",
         "\'class\'",
         "\':\'",
         "\'::\'",
         "\',\'",
         "\'companion\'",
         "\'&&\'",
         "\'const\'",
         "\'constructor\'",
         "\'continue\'",
         "\'continue@\'",
         "\'crossinline\'",
         "\'data\'",
         "\'--\'",
         "\'delegate\'",
         "\'||\'",
         "\'/\'",
         "\'/=\'",
         "\'do\'",
         "\'.\'",
         "\'=>\'",
         "\';;\'",
         "\'dynamic\'",
         "\'else\'",
         "\'enum\'",
         "\'==\'",
         "\'===\'",
         "\'!=\'",
         "\'!==\'",
         "\'!\'",
         "\'expect\'",
         "\'external\'",
         "\'field\'",
         "\'file\'",
         "\'final\'",
         "\'finally\'",
         "\'for\'",
         "\'fun\'",
         "\'>=\'",
         "\'get\'",
         "\'#\'",
         "\'if\'",
         "\'import\'",
         "\'in\'",
         "\'++\'",
         "\'infix\'",
         "\'init\'",
         "\'inline\'",
         "\'inner\'",
         "\'interface\'",
         "\'internal\'",
         "\'is\'",
         "\'<\'",
         "\'lateinit\'",
         "\'{\'",
         "\'<=\'",
         "\'(\'",
         "\'[\'",
         "\'%\'",
         "\'%=\'",
         "\'*\'",
         "\'*=\'",
         "\'noinline\'",
         "\'object\'",
         "\'open\'",
         "\'operator\'",
         "\'out\'",
         "\'override\'",
         "\'package\'",
         "\'param\'",
         "\'private\'",
         "\'property\'",
         "\'protected\'",
         "\'public\'",
         "\'?\'",
         "\'..\'",
         "\'>\'",
         "\'}\'",
         "\'receiver\'",
         "\'reified\'",
         "\'...\'",
         "\'return\'",
         "\'return@\'",
         "\')\'",
         "\']\'",
         "\'sealed\'",
         "\';\'",
         "\'set\'",
         "\'setparam\'",
         "\'\'\'",
         "\'-\'",
         "\'-=\'",
         "\'super\'",
         "\'super@\'",
         "\'suspend\'",
         "\'tailrec\'",
         "\'this\'",
         "\'this@\'",
         "\'throw\'",
         "\'try\'",
         "\'typeof\'",
         "\'typealias\'",
         "\'val\'",
         "\'value\'",
         "\'var\'",
         "\'vararg\'",
         "\'when\'",
         "\'where\'",
         "\'while\'",
         "\'NL\'",
         "\'ShebangLine\'",
         "\'AT_PRE_WS\'",
         "\'QUEST_WS\'",
         "\'AT_POST_WS\'",
         "\'EOF\'",
         "\'BooleanLiteral\'",
         "\'IntegerLiteral\'",
         "\'HexLiteral\'",
         "\'BinLiteral\'",
         "\'CharacterLiteral\'",
         "\'RealLiteral\'",
         "\'NullLiteral\'",
         "\'LongLiteral\'",
         "\'UnsignedLiteral\'",
         "\'QUOTE_OPEN\'",
         "\'QUOTE_CLOSE\'",
         "\'TRIPLE_QUOTE_OPEN\'",
         "\'MultiLineStringQuote\'",
         "\'TRIPLE_QUOTE_CLOSE\'",
         "\'LineStrText\'",
         "\'LineStrEscapedChar\'",
         "\'LineStrRef\'",
         "\'LineStrExprStart\'",
         "\'MultiLineStrText\'",
         "\'MultiLineStrRef\'",
         "\'MultiLineStrExprStart\'",
         "\'NOT_IN\'",
         "\'NOT_IS\'",
         "\'EXCL_WS\'",
         "\'Identifier\'"
      };

   // Nonterminal symbols of the grammar ...
      char* Kotlin_ParserTables::head_symb[407] = 
      {
         "Goal",
         "kotlinFile",
         "script",
         "shebangLine",
         "fileAnnotation",
         "packageHeader",
         "importList",
         "importHeader",
         "importAlias",
         "topLevelObject",
         "typeAlias",
         "declaration",
         "classDeclaration",
         "primaryConstructor",
         "classBody",
         "classParameters",
         "classParameter",
         "delegationSpecifiers",
         "delegationSpecifier",
         "constructorInvocation",
         "annotatedDelegationSpecifier",
         "explicitDelegation",
         "typeParameters",
         "typeParameter",
         "typeConstraints",
         "typeConstraint",
         "classMemberDeclarations",
         "classMemberDeclaration",
         "anonymousInitializer",
         "companionObject",
         "functionValueParameters",
         "functionValueParameter",
         "functionDeclaration",
         "functionBody",
         "variableDeclaration",
         "multiVariableDeclaration",
         "propertyDeclaration",
         "propertyDelegate",
         "getter",
         "setter",
         "parametersWithOptionalType",
         "functionValueParameterWithOptionalType",
         "parameterWithOptionalType",
         "parameter",
         "objectDeclaration",
         "secondaryConstructor",
         "constructorDelegationCall",
         "enumClassBody",
         "enumEntries",
         "enumEntry",
         "type",
         "typeReference",
         "nullableType",
         "quest",
         "userType",
         "simpleUserType",
         "typeProjection",
         "typeProjectionModifiers",
         "typeProjectionModifier",
         "functionType",
         "functionTypeParameters",
         "parenthesizedType",
         "receiverType",
         "parenthesizedUserType",
         "statements",
         "statement",
         "label",
         "controlStructureBody",
         "block",
         "loopStatement",
         "forStatement",
         "whileStatement",
         "doWhileStatement",
         "assignment",
         "semi",
         "semis",
         "expression",
         "disjunction",
         "conjunction",
         "equality",
         "comparison",
         "genericCallLikeComparison",
         "infixOperation",
         "elvisExpression",
         "elvis",
         "infixFunctionCall",
         "rangeExpression",
         "additiveExpression",
         "multiplicativeExpression",
         "asExpression",
         "prefixUnaryExpression",
         "unaryPrefix",
         "postfixUnaryExpression",
         "postfixUnarySuffix",
         "directlyAssignableExpression",
         "parenthesizedDirectlyAssignableExpression",
         "assignableExpression",
         "parenthesizedAssignableExpression",
         "assignableSuffix",
         "indexingSuffix",
         "navigationSuffix",
         "callSuffix",
         "annotatedLambda",
         "typeArguments",
         "valueArguments",
         "valueArgument",
         "primaryExpression",
         "parenthesizedExpression",
         "collectionLiteral",
         "literalConstant",
         "stringLiteral",
         "lineStringLiteral",
         "multiLineStringLiteral",
         "lineStringContent",
         "lineStringExpression",
         "multiLineStringContent",
         "multiLineStringExpression",
         "lambdaLiteral",
         "lambdaParameters",
         "lambdaParameter",
         "anonymousFunction",
         "functionLiteral",
         "objectLiteral",
         "thisExpression",
         "superExpression",
         "ifExpression",
         "whenSubject",
         "whenExpression",
         "whenEntry",
         "whenCondition",
         "rangeTest",
         "typeTest",
         "tryExpression",
         "catchBlock",
         "finallyBlock",
         "jumpExpression",
         "callableReference",
         "assignmentAndOperator",
         "equalityOperator",
         "comparisonOperator",
         "inOperator",
         "isOperator",
         "additiveOperator",
         "multiplicativeOperator",
         "asOperator",
         "prefixUnaryOperator",
         "postfixUnaryOperator",
         "excl",
         "memberAccessOperator",
         "safeNav",
         "modifiers",
         "parameterModifiers",
         "modifier",
         "typeModifiers",
         "typeModifier",
         "classModifier",
         "memberModifier",
         "visibilityModifier",
         "varianceModifier",
         "typeParameterModifiers",
         "typeParameterModifier",
         "functionModifier",
         "propertyModifier",
         "inheritanceModifier",
         "parameterModifier",
         "reificationModifier",
         "platformModifier",
         "annotation",
         "singleAnnotation",
         "multiAnnotation",
         "annotationUseSiteTarget",
         "unescapedAnnotation",
         "simpleIdentifier",
         "identifier",
         "(kotlinFile | script)",
         "shebangLine?",
         "NL*",
         "fileAnnotation*",
         "topLevelObject*",
         "(statement semi)",
         "(statement semi)*",
         "NL+",
         "('@' | AT_PRE_WS)",
         "unescapedAnnotation+",
         "('[' unescapedAnnotation+ ']' | unescapedAnnotation)",
         "semi?",
         "('package' identifier semi?)",
         "('package' identifier semi?)?",
         "importHeader*",
         "('.' '*' | importAlias)",
         "('.' '*' | importAlias)?",
         "semis?",
         "modifiers?",
         "(NL* typeParameters)",
         "(NL* typeParameters)?",
         "('fun' NL*)",
         "('fun' NL*)?",
         "('class' | ('fun' NL*)? 'interface')",
         "(NL* primaryConstructor)",
         "(NL* primaryConstructor)?",
         "(NL* ':' NL* delegationSpecifiers)",
         "(NL* ':' NL* delegationSpecifiers)?",
         "(NL* typeConstraints)",
         "(NL* typeConstraints)?",
         "(NL* classBody | NL* enumClassBody)",
         "(NL* classBody | NL* enumClassBody)?",
         "(modifiers? 'constructor' NL*)",
         "(modifiers? 'constructor' NL*)?",
         "(NL* ',' NL* classParameter)",
         "(NL* ',' NL* classParameter)*",
         "(NL* ',')",
         "(NL* ',')?",
         "(classParameter (NL* ',' NL* classParameter)* (NL* ',')?)",
         "(classParameter (NL* ',' NL* classParameter)* (NL* ',')?)?",
         "('val' | 'var')",
         "('val' | 'var')?",
         "(NL* '=' NL* expression)",
         "(NL* '=' NL* expression)?",
         "(NL* ',' NL* annotatedDelegationSpecifier)",
         "(NL* ',' NL* annotatedDelegationSpecifier)*",
         "annotation*",
         "(userType | functionType)",
         "(NL* ',' NL* typeParameter)",
         "(NL* ',' NL* typeParameter)*",
         "typeParameterModifiers?",
         "(NL* ':' NL* type)",
         "(NL* ':' NL* type)?",
         "(NL* ',' NL* typeConstraint)",
         "(NL* ',' NL* typeConstraint)*",
         "(classMemberDeclaration semis?)",
         "(classMemberDeclaration semis?)*",
         "(NL* simpleIdentifier)",
         "(NL* simpleIdentifier)?",
         "(NL* classBody)",
         "(NL* classBody)?",
         "(NL* ',' NL* functionValueParameter)",
         "(NL* ',' NL* functionValueParameter)*",
         "(functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?)",
         "(functionValueParameter (NL* ',' NL* functionValueParameter)* (NL* ',')?)?",
         "parameterModifiers?",
         "(NL* receiverType NL* '.')",
         "(NL* receiverType NL* '.')?",
         "(NL* functionBody)",
         "(NL* functionBody)?",
         "(NL* ',' NL* variableDeclaration)",
         "(NL* ',' NL* variableDeclaration)*",
         "(multiVariableDeclaration | variableDeclaration)",
         "(NL* (multiVariableDeclaration | variableDeclaration))",
         "('=' NL* expression | propertyDelegate)",
         "(NL* ('=' NL* expression | propertyDelegate))",
         "(NL* ('=' NL* expression | propertyDelegate))?",
         "(NL+ ';')",
         "(NL+ ';')?",
         "getter?",
         "(NL* semi? setter)",
         "(NL* semi? setter)?",
         "setter?",
         "(NL* semi? getter)",
         "(NL* semi? getter)?",
         "(getter? (NL* semi? setter)? | setter? (NL* semi? getter)?)",
         "(NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody)",
         "(NL* '(' NL* ')' (NL* ':' NL* type)? NL* functionBody)?",
         "(NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody)",
         "(NL* '(' NL* functionValueParameterWithOptionalType (NL* ',')? NL* ')' (NL* ':' NL* type)? NL* functionBody)?",
         "(NL* ',' NL* functionValueParameterWithOptionalType)",
         "(NL* ',' NL* functionValueParameterWithOptionalType)*",
         "(functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?)",
         "(functionValueParameterWithOptionalType (NL* ',' NL* functionValueParameterWithOptionalType)* (NL* ',')?)?",
         "(':' NL* type)",
         "(':' NL* type)?",
         "(NL* ':' NL* constructorDelegationCall)",
         "(NL* ':' NL* constructorDelegationCall)?",
         "block?",
         "('this' | 'super')",
         "enumEntries?",
         "(NL* ';' NL* classMemberDeclarations)",
         "(NL* ';' NL* classMemberDeclarations)?",
         "(NL* ',' NL* enumEntry)",
         "(NL* ',' NL* enumEntry)*",
         "','?",
         "(modifiers NL*)",
         "(modifiers NL*)?",
         "(NL* valueArguments)",
         "(NL* valueArguments)?",
         "typeModifiers?",
         "(parenthesizedType | nullableType | typeReference | functionType)",
         "(typeReference | parenthesizedType)",
         "quest+",
         "(NL* '.' NL* simpleUserType)",
         "(NL* '.' NL* simpleUserType)*",
         "(NL* typeArguments)",
         "(NL* typeArguments)?",
         "typeProjectionModifiers?",
         "typeProjectionModifier+",
         "(receiverType NL* '.' NL*)",
         "(receiverType NL* '.' NL*)?",
         "(parameter | type)",
         "(parameter | type)?",
         "(NL* ',' NL* (parameter | type))",
         "(NL* ',' NL* (parameter | type))*",
         "(parenthesizedType | nullableType | typeReference)",
         "(userType | parenthesizedUserType)",
         "(semis statement)",
         "(semis statement)*",
         "(statement (semis statement)*)",
         "(statement (semis statement)*)?",
         "(label | annotation)",
         "(label | annotation)*",
         "(declaration | assignment | loopStatement | expression)",
         "('@' | AT_POST_WS)",
         "(variableDeclaration | multiVariableDeclaration)",
         "controlStructureBody?",
         "(controlStructureBody | ';')",
         "(directlyAssignableExpression '=' | assignableExpression assignmentAndOperator)",
         "(';' | NL)",
         "(';' | NL)+",
         "(NL* '||' NL* conjunction)",
         "(NL* '||' NL* conjunction)*",
         "(NL* '&&' NL* equality)",
         "(NL* '&&' NL* equality)*",
         "(equalityOperator NL* comparison)",
         "(equalityOperator NL* comparison)*",
         "(comparisonOperator NL* genericCallLikeComparison)",
         "(comparisonOperator NL* genericCallLikeComparison)*",
         "callSuffix*",
         "(inOperator NL* elvisExpression | isOperator NL* type)",
         "(inOperator NL* elvisExpression | isOperator NL* type)*",
         "(NL* elvis NL* infixFunctionCall)",
         "(NL* elvis NL* infixFunctionCall)*",
         "(simpleIdentifier NL* rangeExpression)",
         "(simpleIdentifier NL* rangeExpression)*",
         "('..' NL* additiveExpression)",
         "('..' NL* additiveExpression)*",
         "(additiveOperator NL* multiplicativeExpression)",
         "(additiveOperator NL* multiplicativeExpression)*",
         "(multiplicativeOperator NL* asExpression)",
         "(multiplicativeOperator NL* asExpression)*",
         "(NL* asOperator NL* type)",
         "(NL* asOperator NL* type)*",
         "unaryPrefix*",
         "postfixUnarySuffix*",
         "(NL* ',' NL* expression)",
         "(NL* ',' NL* expression)*",
         "(simpleIdentifier | parenthesizedExpression | 'class')",
         "typeArguments?",
         "valueArguments?",
         "(valueArguments? annotatedLambda | valueArguments)",
         "label?",
         "(NL* ',' NL* typeProjection)",
         "(NL* ',' NL* typeProjection)*",
         "(NL* ',' NL* valueArgument)",
         "(NL* ',' NL* valueArgument)*",
         "(valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*)",
         "(valueArgument (NL* ',' NL* valueArgument)* (NL* ',')? NL*)?",
         "annotation?",
         "(simpleIdentifier NL* '=' NL*)",
         "(simpleIdentifier NL* '=' NL*)?",
         "'*'?",
         "(expression (NL* ',' NL* expression)* (NL* ',')? NL*)",
         "(expression (NL* ',' NL* expression)* (NL* ',')? NL*)?",
         "(lineStringContent | lineStringExpression)",
         "(lineStringContent | lineStringExpression)*",
         "(multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)",
         "(multiLineStringContent | multiLineStringExpression | MultiLineStringQuote)*",
         "lambdaParameters?",
         "(lambdaParameters? NL* '->' NL*)",
         "(lambdaParameters? NL* '->' NL*)?",
         "(NL* ',' NL* lambdaParameter)",
         "(NL* ',' NL* lambdaParameter)*",
         "(NL* type NL* '.')",
         "(NL* type NL* '.')?",
         "(NL* ':' NL* delegationSpecifiers NL*)",
         "(NL* ':' NL* delegationSpecifiers NL*)?",
         "('<' NL* type NL* '>')",
         "('<' NL* type NL* '>')?",
         "('@' simpleIdentifier)",
         "('@' simpleIdentifier)?",
         "';'?",
         "(controlStructureBody | controlStructureBody? NL* ';'? NL* 'else' NL* (controlStructureBody | ';') | ';')",
         "(annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*)",
         "(annotation* NL* 'val' NL* variableDeclaration NL* '=' NL*)?",
         "whenSubject?",
         "(whenEntry NL*)",
         "(whenEntry NL*)*",
         "(NL* ',' NL* whenCondition)",
         "(NL* ',' NL* whenCondition)*",
         "(NL* catchBlock)",
         "(NL* catchBlock)+",
         "(NL* finallyBlock)",
         "(NL* finallyBlock)?",
         "((NL* catchBlock)+ (NL* finallyBlock)? | NL* finallyBlock)",
         "('return' | 'return@')",
         "expression?",
         "receiverType?",
         "(simpleIdentifier | 'class')",
         "(annotation | modifier)",
         "(annotation | modifier)+",
         "(annotation | parameterModifier)",
         "(annotation | parameterModifier)+",
         "(classModifier | memberModifier | visibilityModifier | functionModifier | propertyModifier | inheritanceModifier | parameterModifier | platformModifier)",
         "typeModifier+",
         "typeParameterModifier+",
         "(singleAnnotation | multiAnnotation)",
         "(annotationUseSiteTarget NL* | '@' | AT_PRE_WS)",
         "('field' | 'property' | 'get' | 'set' | 'receiver' | 'param' | 'setparam' | 'delegate')",
         "(NL* '.' simpleIdentifier)",
         "(NL* '.' simpleIdentifier)*"
      };

   // Head symbol numbers for the productions ...
      ushort Kotlin_ParserTables::head_numb[753] = 
      {
          0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   11,   11,   11,   11,   12,   13,   14,   15,
         16,   17,   18,   18,   18,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   27,   27,   27,   28,   29,
         30,   31,   32,   33,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
         49,   50,   51,   51,   52,   53,   53,   54,   55,   56,   56,   57,   58,   58,   59,   60,   61,   62,   63,   64,
         65,   66,   67,   67,   68,   69,   69,   69,   70,   71,   72,   73,   74,   74,   75,   75,   76,   77,   78,   79,
         80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   91,   91,   92,   93,   93,   93,   93,   93,
         94,   94,   94,   95,   96,   96,   97,   98,   98,   98,   99,  100,  101,  102,  103,  104,  105,  106,  106,  106,
        106,  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,  107,  108,  109,  109,  109,  109,  109,  109,  109,
        109,  109,  110,  110,  111,  112,  113,  113,  113,  114,  115,  115,  115,  116,  117,  118,  119,  119,  120,  121,
        121,  122,  123,  123,  124,  124,  125,  126,  127,  128,  128,  129,  129,  129,  130,  131,  132,  133,  134,  135,
        135,  135,  135,  135,  135,  136,  137,  137,  137,  137,  137,  138,  138,  138,  138,  139,  139,  139,  139,  140,
        140,  141,  141,  142,  142,  143,  143,  143,  144,  144,  145,  145,  145,  145,  145,  146,  146,  146,  147,  147,
        148,  148,  148,  149,  150,  151,  152,  153,  154,  154,  155,  155,  155,  155,  155,  155,  156,  156,  157,  157,
        157,  157,  158,  158,  159,  160,  160,  160,  161,  161,  161,  161,  161,  161,  162,  163,  163,  163,  164,  164,
        164,  165,  166,  166,  167,  168,  169,  170,  171,  171,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
        172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
        172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,  173,  174,
        174,  175,  175,  176,  176,  177,  177,  178,  178,  179,  180,  180,  181,  181,  182,  182,  183,  183,  184,  184,
        185,  185,  186,  187,  187,  188,  188,  189,  189,  190,  190,  191,  191,  192,  192,  193,  194,  194,  195,  196,
        196,  197,  197,  198,  199,  199,  200,  201,  201,  202,  203,  203,  204,  204,  205,  205,  206,  207,  207,  208,
        209,  209,  210,  211,  211,  212,  213,  213,  214,  214,  215,  215,  216,  217,  217,  218,  219,  219,  220,  220,
        221,  221,  222,  223,  223,  224,  224,  225,  226,  226,  227,  228,  228,  229,  230,  230,  231,  232,  232,  233,
        234,  234,  235,  236,  236,  237,  238,  238,  239,  239,  240,  241,  241,  242,  243,  243,  244,  245,  245,  246,
        246,  247,  248,  248,  249,  250,  250,  251,  252,  252,  253,  253,  254,  255,  255,  256,  256,  257,  258,  258,
        259,  259,  260,  261,  261,  262,  263,  263,  264,  265,  265,  266,  267,  267,  268,  269,  269,  270,  271,  271,
        272,  272,  273,  273,  274,  274,  275,  276,  276,  277,  278,  278,  279,  279,  280,  281,  281,  282,  283,  283,
        284,  284,  285,  285,  285,  285,  286,  286,  287,  287,  288,  289,  289,  290,  291,  291,  292,  292,  293,  293,
        294,  295,  295,  296,  296,  297,  297,  298,  299,  299,  300,  300,  300,  301,  301,  302,  303,  303,  304,  305,
        305,  306,  306,  307,  307,  308,  308,  308,  308,  309,  309,  310,  310,  311,  311,  312,  312,  313,  313,  314,
        314,  315,  315,  316,  317,  317,  318,  319,  319,  320,  321,  321,  322,  323,  323,  324,  324,  325,  325,  326,
        326,  327,  328,  328,  329,  330,  330,  331,  332,  332,  333,  334,  334,  335,  336,  336,  337,  338,  338,  339,
        339,  340,  340,  341,  342,  342,  343,  343,  343,  344,  344,  345,  345,  346,  346,  347,  347,  348,  349,  349,
        350,  351,  351,  352,  353,  353,  354,  354,  355,  356,  356,  357,  357,  358,  359,  359,  360,  360,  361,  361,
        362,  362,  362,  363,  363,  364,  364,  365,  366,  366,  367,  368,  368,  369,  370,  370,  371,  372,  372,  373,
        374,  374,  375,  376,  376,  377,  377,  378,  378,  378,  379,  380,  380,  381,  381,  382,  383,  383,  384,  385,
        385,  386,  387,  387,  388,  389,  389,  390,  390,  391,  391,  392,  392,  393,  393,  394,  394,  395,  395,  396,
        396,  397,  397,  398,  398,  399,  399,  399,  399,  399,  399,  399,  399,  400,  400,  401,  401,  402,  402,  403,
        403,  403,  404,  404,  404,  404,  404,  404,  404,  404,  405,  406,  406
      };

   // First tail symbol index into the tail list ...
      ushort Kotlin_ParserTables::f_tail[754] = 
      {
          0,    2,    8,   14,   16,   23,   24,   25,   29,   31,   33,   42,   43,   44,   45,   46,   47,   56,   58,   63,
         68,   76,   78,   79,   80,   81,   82,   84,   87,   92,   99,  103,  107,  113,  114,  115,  116,  117,  118,  121,
        128,  133,  136,  147,  148,  151,  155,  162,  172,  175,  178,  181,  186,  189,  192,  197,  203,  210,  213,  219,
        223,  227,  229,  230,  231,  234,  235,  236,  238,  240,  242,  243,  244,  246,  247,  253,  260,  265,  267,  272,
        274,  276,  279,  280,  281,  286,  287,  288,  289,  299,  306,  315,  318,  320,  321,  322,  323,  324,  326,  328,
        330,  332,  334,  336,  338,  340,  342,  344,  346,  348,  350,  352,  353,  354,  356,  358,  359,  360,  361,  362,
        363,  365,  366,  367,  372,  373,  374,  379,  380,  381,  382,  389,  392,  394,  398,  405,  409,  415,  416,  417,
        418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  434,  438,  439,  440,  441,  442,  443,  444,
        445,  446,  447,  448,  449,  452,  455,  456,  457,  458,  463,  464,  465,  466,  471,  477,  480,  481,  483,  490,
        491,  492,  495,  496,  497,  500,  501,  510,  514,  523,  531,  537,  538,  539,  540,  543,  546,  550,  561,  564,
        567,  569,  570,  571,  572,  573,  577,  578,  579,  580,  581,  582,  583,  584,  585,  586,  587,  588,  589,  590,
        591,  592,  593,  594,  595,  596,  597,  598,  599,  600,  601,  602,  603,  604,  605,  606,  607,  608,  610,  611,
        612,  614,  616,  617,  619,  620,  621,  623,  624,  625,  627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
        637,  638,  639,  640,  641,  642,  644,  646,  647,  648,  649,  650,  651,  652,  653,  654,  655,  656,  657,  658,
        659,  660,  661,  662,  663,  665,  667,  671,  675,  676,  677,  678,  679,  680,  681,  682,  683,  684,  685,  686,
        687,  688,  689,  690,  691,  692,  693,  694,  695,  696,  697,  698,  699,  700,  701,  702,  703,  704,  705,  706,
        707,  708,  709,  710,  711,  712,  713,  714,  715,  716,  717,  718,  719,  720,  721,  722,  723,  724,  725,  727,
        728,  729,  729,  730,  730,  732,  732,  734,  734,  736,  738,  738,  740,  741,  743,  744,  745,  746,  748,  751,
        752,  752,  753,  756,  756,  757,  757,  759,  761,  762,  762,  763,  763,  764,  764,  765,  767,  767,  768,  770,
        770,  771,  772,  774,  776,  776,  777,  781,  781,  782,  784,  784,  785,  787,  789,  789,  790,  793,  793,  794,
        798,  798,  800,  802,  802,  803,  806,  806,  807,  808,  809,  809,  810,  814,  814,  815,  819,  819,  821,  821,
        823,  824,  825,  829,  829,  831,  831,  832,  836,  836,  837,  841,  841,  843,  845,  845,  847,  849,  849,  850,
        852,  852,  853,  857,  857,  859,  862,  862,  863,  863,  864,  868,  868,  869,  871,  871,  872,  876,  876,  878,
        879,  880,  882,  885,  886,  888,  888,  889,  891,  891,  892,  892,  893,  896,  896,  897,  897,  898,  901,  901,
        902,  904,  906,  913,  913,  914,  924,  924,  925,  929,  929,  931,  934,  934,  935,  938,  938,  939,  943,  943,
        944,  944,  945,  946,  947,  947,  948,  952,  952,  953,  957,  957,  959,  959,  960,  962,  962,  963,  965,  965,
        966,  966,  967,  968,  969,  970,  971,  972,  973,  974,  976,  980,  980,  982,  984,  984,  985,  985,  986,  987,
        989,  993,  993,  994,  995,  996,  996,  997, 1001, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1010, 1012, 1014,
       1014, 1015, 1016, 1017, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1027, 1028, 1029, 1030, 1032, 1034,
       1035, 1036, 1037, 1039, 1043, 1043, 1045, 1049, 1049, 1051, 1054, 1054, 1056, 1059, 1059, 1061, 1061, 1063, 1066, 1069,
       1069, 1071, 1075, 1075, 1077, 1080, 1080, 1082, 1085, 1085, 1087, 1090, 1090, 1092, 1095, 1095, 1097, 1101, 1101, 1103,
       1103, 1105, 1105, 1107, 1111, 1111, 1113, 1114, 1115, 1116, 1116, 1117, 1117, 1118, 1120, 1121, 1121, 1122, 1126, 1126,
       1128, 1132, 1132, 1134, 1138, 1138, 1139, 1139, 1140, 1144, 1144, 1145, 1145, 1146, 1150, 1150, 1151, 1152, 1153, 1153,
       1155, 1156, 1157, 1158, 1158, 1160, 1160, 1161, 1165, 1165, 1166, 1170, 1170, 1172, 1176, 1176, 1177, 1182, 1182, 1183,
       1188, 1188, 1189, 1191, 1191, 1192, 1192, 1193, 1194, 1201, 1202, 1210, 1210, 1211, 1211, 1212, 1214, 1214, 1216, 1220,
       1220, 1222, 1224, 1225, 1227, 1229, 1229, 1230, 1232, 1234, 1235, 1236, 1236, 1237, 1237, 1238, 1239, 1240, 1241, 1242,
       1243, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1264, 1265, 1266,
       1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1281, 1281, 1283
      };

   // Tail symbol numbers ...
      short Kotlin_ParserTables::tail[1283] = 
      {
       -174,    1, -175, -176, -177,   -5,   -6, -178, -175, -176, -177,   -5,   -6, -180,  125, -181, -182,   48, -176,   17,
       -176, -184, -176, -187, -188,   57, -173, -190, -185,    8, -172,  -11, -191, -192,  116, -176, -172, -194, -176,    9,
       -176,  -50,  -12,  -44,  -32,  -36,  -10, -192, -197, -176, -172, -194, -199, -201, -203, -205, -207,  -15,   69, -176,
        -26, -176,   92,   71, -176, -213, -176,   98, -192, -215, -176, -172,   17, -176,  -50, -217,  -20, -219,  -19,  -21,
        -54,  -59,  -54, -104, -220, -176,  -18, -221, -176,   14, -176,  -76,   67, -176,  -23, -223, -211, -176,   91, -224,
       -176, -172, -226,  122, -176,  -25, -228, -220, -172, -176,   17, -176,  -50, -230,  -11,  -29,  -28,  -45,   61, -176,
        -68, -192,   20, -176,   78, -232, -201, -234,   71, -176, -238, -176,   98, -239,  -43, -217, -192,   52, -194, -241,
       -176, -172, -176,  -30, -226, -203, -243,  -68,    9, -176,  -76, -220, -176, -172, -226,   71, -176,  -34, -245, -211,
       -176,   98, -192, -214, -194, -241, -247, -203, -250, -252, -176, -259,   14, -176,  -76, -192,   54, -261, -192,  102,
       -263,   71, -176, -267, -176,   98, -239,  -42, -217, -172, -176, -269, -172, -176,   17, -176,  -50, -192,   78, -176,
       -172, -201, -234, -192,   23, -176,  -30, -271, -176, -272, -273, -176, -104,   69, -176, -274, -276, -176,   92,  -49,
       -278, -176, -279, -281, -172, -283, -234, -284, -285,  -54,   37, -286, -176, -287,   89,  127,  -55, -289, -172, -291,
       -292,  -50,   75, -293, -158, -176, -167, -295,  -60, -176,    7, -176,  -50,   71, -176, -297, -299, -211, -176,   98,
         71, -176,  -50, -176,   98, -284, -300,   71, -176, -301, -176,   98, -305, -191, -307, -308, -172, -309, -176,  -68,
        -65,   69, -176,  -64, -176,   92,  -70,  -71,  -72,   51, -176,   71, -220, -310,   58,  -76,   98, -176, -311,  123,
       -176,   71,  -76,   98, -176, -312,   33, -176, -311, -176,  123, -176,   71,  -76,   98, -313, -176,  -76, -314, -176,
        129, -315,  129,  -77,  -78, -317,  -79, -319,  -80, -321,  -81, -323,  -82, -324,  -83, -326,  -85, -328,   89,   17,
        -86, -330,  -87, -332,  -88, -334,  -89, -336,  -90, -338, -339,  -92, -167,  -66, -145, -176, -106, -340, -146, -103,
       -101,  -99, -100,  -92,  -98, -172,  -95,   71, -176,  -94, -176,   98,  -90,  -97,   71, -176,  -96, -176,   98, -103,
        -99, -100,   72, -176,  -76, -342, -211, -176,   99, -148, -176, -343, -344, -346, -220, -347, -176, -117,   67, -176,
        -56, -349, -211, -176,   91,   71, -176, -353,   98, -354, -176, -356, -357, -176,  -76, -107, -172, -109, -110, -136,
       -121, -122, -108, -123, -124, -125, -127, -132, -135,   71, -176,  -76, -176,   98,   72, -176, -359,   99,  130,  131,
        132,  133,  134,  135,  136,  137,  138, -111, -112,  139, -361,  140,  141, -363,  143,  144,  145,  146,  147, -176,
        -76, -176,   92,  148,  142,  149,  150, -176,  -76, -176,   92,   69, -176, -366,  -64, -176,   92, -119, -368, -211,
        -34,  -35, -226,   52, -370, -176,  -40, -226, -203, -243, -117, -120,   78, -372, -234,  111,  112,  107, -374, -376,
        108,   56, -176,   71, -176,  -76, -176,   98, -176, -378,   71, -380,  -76,   98,  121, -176, -381, -176,   69, -176,
       -383, -176,   92, -129, -385, -211, -176,    7, -176,  -67, -185,   38, -176,    7, -176,  -67, -185,  -76, -130, -131,
       -140, -176,  -76, -141, -176,  -50,  114, -176,  -68, -390,   15, -176,   71, -220, -172,   17,  -50, -211,   98, -176,
        -68,   50, -176,  -68,  113, -176,  -76, -391, -392,   24,   25,   12,   13, -393,   18, -176, -394,    5,  106,   76,
         32,   74,   42,   43,   40,   41,   67,   91,   70,   53,   58,  151,   66,  152,    4,  105,   75,   31,   73,    8,
         10,   59,   28,  105,    4, -147,   59,   28,   44, -147,   44,  153, -176,   34, -176, -149,   18,   89,   34, -396,
       -398, -399, -176, -400, -167,  109, -176,   39,  100,    6,   27,   63,  118,   82,   68,   88,   85,   65,   87,   58,
         81, -401, -165, -176, -158, -176, -167,  110,   80,   60,   62,   46,  109,   22,    2,   49,   79,  120,   77,   26,
         94,   45,    3, -402, -176, -403, -171, -403,   72, -183,   99, -182, -404, -176,   17,  -19,  -54,  154,    2,    6,
         14,   15,   20,   23,   26,   27,   37,   39,   46,   49,   50,   54,   57,   60,   61,   62,   63,   65,   68,   77,
         79,   80,   81,   82,   85,   87,   88,   94,  100,  110,  102,  120,  122,   47,   86,   93,   84,  103,   29,   48,
         45,    3,   22,  109,  118, -172, -406,   -1,   -2,   -3, -176,  124, -177,   -4, -178,   -9,  -65,  -74, -180, -179,
        124, -181,  124,   11,  126, -171, -183, -171,   72, -183,   99, -171,  -74,   83, -173, -185, -186, -188,   -7,   34,
         75,   -8, -189,  -75, -150, -176,  -22, -193,   52, -176, -195,   16, -196,   64, -176,  -13, -198, -176,   17, -176,
        -17, -200, -176,  -24, -202, -176,  -14, -176,  -47, -204, -192,   23, -176, -206, -176,   19, -176,  -16, -209, -208,
       -176,   19, -210,  -16, -209, -211, -212,  117,  119, -214, -176,    9, -176,  -76, -216, -176,   19, -176,  -20, -219,
       -218, -220, -167,  -54,  -59, -176,   19, -176,  -23, -223, -222, -159, -176,   17, -176,  -50, -225, -176,   19, -176,
        -25, -228, -227,  -27, -191, -230, -229, -176, -172, -231, -176,  -14, -233, -176,   19, -176,  -31, -236, -235,  -31,
       -236, -211, -237, -151, -176,  -62, -176,   34, -240, -176,  -33, -242, -176,   19, -176,  -34, -245, -244,  -35,  -34,
       -176, -246,    9, -176,  -76,  -37, -176, -248, -249, -181,  101, -251,  -38, -176, -185,  -39, -254,  -39, -176, -185,
        -38, -257, -253, -255, -256, -258, -176,   71, -176,   98, -226, -176,  -33, -260, -176,   71, -176,  -41, -211, -176,
         98, -226, -176,  -33, -262, -176,   19, -176,  -41, -265, -264,  -41, -265, -211, -266,   17, -176,  -50, -268, -176,
         17, -176,  -46, -270,  -68,  111,  107,  -48, -176,  101, -176,  -26, -275, -176,   19, -176,  -49, -278, -277,   19,
       -150, -176, -280, -176, -104, -282, -153,  -61,  -52,  -51,  -59,  -51,  -61,  -53, -287,  -53, -176,   34, -176,  -55,
       -289, -288, -176, -103, -290,  -57,  -58, -293,  -58,  -62, -176,   34, -176, -294,  -43,  -50, -296, -176,   19, -176,
       -296, -299, -298,  -61,  -52,  -51,  -54,  -63,  -75,  -65, -303, -302,  -65, -303, -304,  -66, -167, -307, -306,  -11,
        -73,  -69,  -76,   11,  128,  -34,  -35,  -67,  -67,  101,  -94,    9,  -96, -137,  101,  124, -314, -315, -314, -176,
         30, -176,  -78, -317, -316, -176,   21, -176,  -79, -319, -318, -138, -176,  -80, -321, -320, -139, -176,  -81, -323,
       -322, -324, -101, -140, -176,  -83, -141, -176,  -50, -326, -325, -176,  -84, -176,  -85, -328, -327, -172, -176,  -86,
       -330, -329,   90, -176,  -87, -332, -331, -142, -176,  -88, -334, -333, -143, -176,  -89, -336, -335, -176, -144, -176,
        -50, -338, -337, -339,  -91, -340,  -93, -176,   19, -176,  -76, -342, -341, -172, -107,   16, -103, -104, -345, -102,
       -104,  -66, -176,   19, -176,  -56, -349, -348, -176,   19, -176, -105, -351, -350, -105, -351, -211, -176, -352, -167,
       -172, -176,    9, -176, -355,   75,  -76, -342, -211, -176, -358, -113, -114, -361, -360, -115, -116,  142, -363, -362,
       -118, -364, -176,    7, -176, -365, -176,   19, -176, -119, -368, -367, -176,  -50, -176,   34, -369, -176,   17, -176,
        -17, -176, -371,   67, -176,  -50, -176,   91, -373,   11, -172, -375,  101,  -67, -311, -176, -377, -176,   38, -176,
       -312,  101, -220, -176,  117, -176,  -34, -176,    9, -176, -379, -126, -128, -176, -383, -382, -176,   19, -176, -129,
       -385, -384, -176, -133, -386, -387, -386, -176, -134, -388, -387, -389, -176, -134,   96,   97,  -76,  -62, -172,   16,
       -167, -152, -395, -396, -395, -167, -164, -397, -398, -397, -155, -156, -157, -161, -162, -163, -164, -166, -154, -400,
       -154, -160, -401, -160, -168, -169, -170, -176,   11,  126,   47,   86,   54,  102,   93,   84,  103,   29, -176,   34,
       -172, -406, -405
      };

   // Boolean matrix ...
      uchar Kotlin_ParserTables::Bm[790] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
          0,    2,    0,    0,    0,  128,    0,    0,    4,    0,    0,    0,  128,    0,    0,    0,    0,    0,    4,   24,
         90,  136,   44,   64,   16,   69,    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,  128,    0,   33,
          4,    2,   16,    0,    0,    0,    0,    4,    4,    0,   64,    0,    0,    0,    0,    0,    0,    1,    0,   32,
          0,    0,    1,   32,    0,   56,    0,    4,   24,   90,  136,   44,   72,   16,   69,    0,    0,   64,    0,    4,
          0,    0,    1,    0,    4,   30,   90,  138,   45,  110,   16,  199,    4,   64,    0,    0,    4,    0,    0,    0,
          0,    0,    4,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,  128,    0,    1,    0,    0,    0,
          0,   64,    0,    0,    0,    0,  128,    0,    0,    0,    0,    0,    0,    0,    0,  128,    0,    0,    0,    9,
          0,    0,    0,    2,    0,    0,    0,    0,    0,    0,   16,    4,   24,   90,  136,   44,   68,   16,   69,    0,
          2,    0,    0,    0,    0,    0,    4,    4,   16,    0,    0,    0,    0,    0,    0,    0,    0,   12,   30,  122,
        200,   45,  110,   16,   71,    4,    1,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,   16,    0,
          0,    0,    4,   24,   90,  136,   44,   72,   16,   69,    1,    4,   24,   90,  136,   44,   64,   16,   69,    1,
          0,    0,    0,    0,    0,    1,    0,    0,    1,    4,   24,   90,  136,   44,   64,   80,   69,    0,    0,    0,
          4,    0,    0,    1,    0,    1,    0,  128,   32,   64,    0,    9,    0,    0,    0,   32,    0,    0,    0,    0,
          0,    2,    1,    4,    0,    0,    0,    0,  144,    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    1,    0,   16,    0,    0,    0,    4,   30,   90,  136,   45,  110,   16,   71,    5,    0,    0,
          0,    0,    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,    4,    0,    0,    1,    0,    2,    0,    0,
          0,    0,    0,    4,    5,    0,    0,    0,    0,    0,    2,    0,    0,    1,    0,    2,    0,    0,    0,    0,
          0,    0,    5,    4,   56,   90,  136,   44,   68,   16,   69,    1,    0,    0,    0,    4,    0,    0,    0,    0,
          0,    2,    0,    0,   16,   80,    0,    0,    5,    0,    0,    0,   64,    0,    0,    0,    0,    0,    1,    4,
         56,   90,  136,   44,   64,   16,   69,    1,    0,    0,    0,    0,    0,    0,    1,    0,    9,   64,    1,    0,
          0,    0,    0,    0,    0,    1,    0,    0,  128,    0,    0,    0,    0,    0,    1,    0,    0,    4,    0,    0,
          0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    1,    0,    1,    0,    2,    0,    0,    0,    0,    0,
          0,    4,   26,   90,  136,   44,   68,   16,   69,    4,    0,    2,    0,    0,   16,   64,   16,    0,    5,    0,
          0,    0,    0,    0,    0,   32,    0,    0,    2,    0,    0,   16,   64,    0,    0,    4,    0,    0,    0,    0,
          0,    0,    1,    0,    8,    0,   64,    0,    0,    0,    0,    0,    0,    0,   32,    0,    1,   32,    0,    0,
          0,    0,    0,    0,    0,    1,    0,   16,    0,    0,    0,    0,    0,    0,    1,    0,    2,    0,    0,    0,
          4,    0,    0,    4,    0,    0,    0,    0,    0,    0,    0,  128,    1,    4,    2,   16,    0,    0,    0,    0,
          4,    5,    0,    0,    0,    0,    0,    0,    0,   64,    1,    0,    2,    0,    0,   16,   64,   16,    0,    4,
        128,    0,    0,    0,    0,    0,    0,    0,    1,    4,   26,   90,  136,   44,   64,   16,   69,    4,    0,    0,
          0,    0,    0,    0,    8,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    1,    0,    2,   16,    0,
          0,    0,    0,    0,    5,    0,    0,    0,    0,    0,    0,    4,    0,    1,    0,    0,    0,    0,    0,    0,
          0,   16,    1,    0,    0,    0,    0,   16,    0,    0,    0,    0,  128,    8,    0,    0,    0,    0,    0,    0,
          1,    0,    2,   16,    0,    0,    0,    0,    0,    4,   26,   90,  136,   44,   64,   16,   69,    5,    4,    2,
         16,    0,   32,    0,    0,    4,    4,    0,    0,    0,    0,    0,    2,  128,    0,    1,    0,    0,    0,    0,
          0,    0,   64,    0,    1,  128,    0,    0,    0,    0,    2,    0,    0,    1,    0,   32,   10,    0,    1,   32,
          0,   56,    0,    0,    0,   16,  144,    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,    1,    0,
          0,    0,    0,    0,    0,    0,   48,    0,    0,    0,    0,    0,   32,    0,    0,    1,    0,    0,    0,    0,
          4,    0,    0,    0,    0,   16,    0,    0,    0,    0,    1,    0,    0,    0,    0,  144,    0,    0,    0,    1,
          0,    0,    0,    0,    0,    0,    0,    2,    1,    0
      };

   // Booeal matrix row (for state)...
      ushort Kotlin_ParserTables::Br[670] = 
      {
          1,    9,    0,   11,   11,   11,   20,    0,   29,   38,    0,   46,    0,   51,    0,   60,    0,   38,   69,    0,
          0,   51,   78,   60,    0,   87,    0,   95,    0,    0,    0,   51,  104,  113,    0,   11,  119,  128,    0,  137,
          0,    0,    0,    0,   11,  117,    0,    0,   38,   11,    0,   11,    0,    0,  146,  154,    0,  162,  145,  171,
        179,    0,  188,    0,  197,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  207,    0,    0,    0,    0,    0,    0,    0,   51,  213,
         38,  222,   38,  231,    0,  240,  231,    0,  240,  231,    0,    0,  240,  249,   69,   11,    0,  257,    0,    0,
        266,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  162,    0,    0,    0,    0,    0,    0,  272,  277,
        207,  284,    0,   38,    3,  293,  300,   11,  309,  318,  147,  327,    0,  336,    0,   69,   11,    8,    0,  327,
        327,  345,   11,  327,  327,  345,    0,   38,    0,    0,  336,    0,    0,    0,    0,  354,  119,  363,  372,  380,
         11,    0,  117,  389,   11,  399,  408,  336,  417,   11,   11,  426,  435,    0,    0,    0,    0,  444,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  453,    0,    0,  327,    0,  461,  345,    0,
        320,    0,   38,  336,    0,    0,    0,    0,    0,    0,    0,    0,   11,  249,    0,    0,  327,    0,  470,    0,
        231,    0,   69,  479,    0,    0,    0,    0,  179,  487,    0,    0,    0,    0,  496,    0,    0,    0,    0,   11,
         11,   11,  336,    0,  505,   11,   11,   11,   11,  508,  508,  508,   11,   11,    0,   51,    0,  517,    0,  231,
         69,   11,    0,    0,  119,    0,    0,  117,    0,    0,   11,    0,    0,   11,  345,    0,  453,    0,  526,   11,
        535,  479,  544,    0,  553,    0,  562,  119,    0,    0,  571,    0,    0,  580,    0,    0,    0,  231,  231,    0,
         11,    0,  589,  508,  336,   11,   11,   11,    0,    0,  598,   51,    0,  607,    0,    0,    0,    0,  616,    0,
          0,  119,   11,    0,    0,  453,  607,    0,  625,    0,    0,  479,  634,  526,    0,    0,    0,  643,    0,    0,
          0,  117,   48,   11,  652,    0,    0,  231,   11,   11,    0,  327,   11,  607,    0,  213,    0,    0,  607,    0,
          0,  162,  598,  598,    0,   11,    0,  336,    0,    0,    0,    0,   38,  661,  517,  669,    0,    0,  678,   11,
          0,  669,    0,   11,  508,   11,    0,  327,  345,  598,    0,  687,  327,    0,    0,    0,    0,  128,    0,    0,
         11,    0,  607,    0,  336,    0,    0,    0,   11,    0,  580,  625,    0,  696,  345,  327,    0,  607,  705,  508,
          0,    0,    0,    0,    0,    0,   11,  598,   51,  714,    0,  607,  117,    0,    0,   11,    0,  722,   11,    0,
        479,    0,  345,  553,   11,  553,   11,   11,    0,  589,  625,    0,    0,  616,  354,   11,    0,  380,  508,    0,
          0,  607,  580,   69,  336,    0,   69,    0,    0,  345,    0,  730,  687,  598,    0,    0,    0,    0,    0,    0,
        589,    0,  479,    0,    0,    0,  739,    0,  328,    0,    0,    0,  470,    0,    0,    0,   38,   11,   11,   11,
          0,    0,    0,    0,  607,    0,  747,  327,   11,    0,    0,    0,   11,    0,   11,  336,  517,  580,  505,  345,
        553,  508,    0,    0,   51,    0,    0,   51,  607,   69,  508,    0,    0,  616,   11,  336,  508,    0,  336,    0,
          0,   11,  128,    0,  607,    0,    0,  179,    0,    0,   38,    0,  607,  231,   60,    0,  327,  327,   60,    0,
          0,  607,  669,    0,  231,    0,   69,    0,  517,    0,  345,   11,    0,    0,  128,    0,    0,   11,    0,  505,
         12,    0,    0,  756,   11,  336,    0,    0,  345,    0,  762,    0,  771,   51,  479,  607,  598,    0,  607,    0,
        327,  553,    0,  508,  616,  616,  780,    0,  345,    0,   11,    0,  336,    0,    0,    0,  687,   51,  345,  553,
          0,    0,    0,  327,  705,  508,    0,    0,  705,    0
      };

   // Booolean matrix column (displacement) ...
      uchar Kotlin_ParserTables::Bc[155] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
          2,    2,    0,    2,    1,    1,    2,    0,    2,    2,    2,    3,    0,    3,    3,    0,    0,    3,    3,    0,
          3,    3,    3,    3,    3,    0,    0,    2,    3,    0,    1,    3,    4,    4,    4,    0,    1,    4,    4,    2,
          0,    4,    0,    0,    4,    0,    4,    5,    0,    5,    4,    5,    5,    3,    0,    5,    0,    2,    5,    0,
          0,    5,    0,    5,    2,    0,    2,    0,    0,    6,    6,    6,    6,    2,    6,    0,    1,    1,    6,    6,
          0,    6,    7,    2,    0,    0,    0,    7,    1,    7,    0,    7,    1,    1,    1,    0,    7,    7,    0,    7,
          2,    1,    7,    7,    8,    8,    8,    8,    8,    8,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          8,    1,    8,    8,    8,    8,    8,    8,    8,    8,    8,    4,    4,    9,    3
      };

   // Boolean matrix filter/mask value ...
      uchar Kotlin_ParserTables::Bf[155] = 
      {
          1,    2,    4,    4,    8,   16,    4,   32,   64,  128,    1,    2,    4,    4,    8,   16,   32,   64,  128,    1,
          2,    4,    4,    8,    4,    4,   16,    4,   32,   64,  128,    1,   16,    2,    4,    1,    1,    8,   16,    4,
         32,   32,   32,   32,   64,    4,    4,   64,  128,    4,   16,    2,    1,    2,    4,    1,    4,    8,   16,   32,
          4,   32,    4,    4,   64,    4,  128,    1,    4,    2,    2,    4,    8,    1,   16,   16,   16,   16,   32,    4,
          4,   64,    4,  128,   64,    4,   64,    4,    4,    1,    2,    4,    8,   64,   16,    1,    4,    4,   32,   64,
          4,  128,    1,   64,    1,    8,   16,    2,    4,    4,    4,    2,    4,    4,    4,    1,    8,   16,    4,   32,
         16,    4,   64,  128,    1,    2,    4,    8,   16,   32,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
         64,    4,  128,  128,   64,   64,   64,   64,  128,  128,  128,  128,  128,    1,    8
      };

   // Terminal transition matrix ...
      short Kotlin_ParserTables::Tm[1244] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -402,  651,  609,  618,  626,  577,    0,    0,    0,    0,
          0,    0,  510,  599,  622,  130,  481,  621,  434,  446,  479,  303,   29,    0,    0,    0,    0,    0,  250,  234,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -75,  653,  666,  -19,    0,  -58,    0,    0,
          0,  629,  -46,  -40,    0,    0,    0,    0,  545,    0,    0, -344, -344, -344, -344, -344, -344, -344, -344, -240,
        523,    0,  439,  374,  422, -344, -344,    0,   30,  438,    0,    0,    0,   29,    0,    0, -262,    0,  191,    0,
        244,    0,    0,    0, -280,    0,    0,    0, -263,    0,    0,    0,    0,    0,    0,    0,  198,  463, -134, -169,
          0, -281,    0,  -70, -126, -130,    0, -686,    0,    0, -287,    0,    0,  148,    0,    0,    0,    0,    0,  375,
          0,    0,  309, -278,    0,  385,    0, -344,    0,   30, -252,  416, -275, -283,  549,    0,  499,    0,    0,    0,
          0,  500,    0,    0,    0,   29,    0,    0,    0, -274,    0,    0,  249, -279,    0,    0, -280,    0, -277, -269,
          0, -256, -253,    0, -259,    0, -261, -258,    0,    0,    0, -188,    0,    0,    0,    0,  -51,    0, -251, -689,
          0,    0,  542,    0,    0, -273, -268,    0,    0,    0,    0,    0,    0, -255,  248, -278,    0,    0,    0, -344,
       -250,   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -282,    0, -272, -276, -270,
          0, -271, -254, -260, -257, -279, -252, -243, -275, -283,    0,    0,    0,  507,    0,    0,    0,    0,   42, -218,
        565,   29,    0,    0, -262, -274, -215, -217,  360,    0,    0,    0, -280,   43, -277, -269, -263, -256, -253,    0,
       -259,    0, -261, -258,    0,    0, -216,    0,    0, -281, -381, -652,  378,    0, -251, -467,  566,    0,  587,    0,
          0, -273, -268,    0,    0,    0,  508,   41, -408, -255, -409, -278,    0,    0,    0, -353, -250,   30,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -282,    0, -272, -276, -270,  470, -271, -254, -260,
       -257, -279, -331, -292,    0, -291, -334, -293, -294,    0, -295,    0, -326, -332,    0,    0,    0, -304,  242,    0,
       -305,    0, -335,    0,    0,  146,    0,    0,    0, -297,    0, -313, -314, -315, -316, -298, -329, -317, -327, -318,
       -319,    0,    0,    0,    0, -328, -320,    0,    0,  521,    0, -321, -579, -323, -330,    0,  147,    0, -336, -322,
          0,    0,    0, -296, -303,    0, -337,    0, -324,    0, -325,    0, -580, -300,    0,    0,    0,  -95,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0, -333,    0, -301, -302, -306, -307, -308, -309, -310, -311, -312,    0,
       -331, -292, -290, -291, -334, -293, -294,  540, -295,    0, -326, -332,    0,    0,    0, -304,    0,    0, -305,    0,
       -335,    0,    0,  154,    0,    0,    0, -297,    0, -313, -314, -315, -316, -298, -329, -317, -327, -318, -319,    0,
          0,    0,    0, -328, -320, -628,    0,  -90,    0, -321,    0, -323, -330,  600, -299,    0, -336, -322,    0,    0,
          0, -296, -303,    0, -337,    0, -324,    0, -325,    0, -344, -300,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0, -333,    0, -301, -302, -306, -307, -308, -309, -310, -311, -312,    0, -331, -292,
       -290, -291, -334, -293, -294,    0, -295,    0, -326, -332,    0,    0,    0, -304,   29,    0, -305,    0, -335,    0,
          0,  146,    0,    0,    0, -297,    0, -313, -314, -315, -316, -298, -329, -317, -327, -318, -319,    0,    0,    0,
          0, -328, -320,    0,    0,  649,    0, -321, -579, -323, -330,    0,  147,    0,  155, -322,    0,    0,    0, -296,
       -303,    0, -337,    0, -324,    0, -325,    0,  595, -300,   30,    0,    0,  -93,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0, -333,    0, -301, -302, -306, -307, -308, -309, -310, -311, -312,    0,    0,    0, -290, -331,
       -292, -673, -291, -334, -293, -294,  452, -295,    0, -326, -332,  541,    0,    0, -304,   29,    0, -305,    0, -335,
          0,    0,  246,  187,    0,    0, -297,    0, -313, -314, -315, -316, -298, -329, -317, -327, -318, -319,    0,  631,
          0,  -84, -328, -320,    0,    0,  -76, -358, -321,    0, -323, -330,  335, -299,    0, -336, -322,    0,    0,    0,
       -296, -303,    0, -337,  370, -324,    0, -325,    0, -344, -300,   30,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0, -333,    0, -301, -302, -306, -307, -308, -309, -310, -311, -312,    0,    0,    0, -290,
       -242, -749, -209,  119,  669, -206, -213, -214, -211, -212,  203, -742,   12, -577,   42, -223, -744, -354,  518,   17,
       -219, -382,  138,  120,  130,  139, -235, -210, -208,   43,    0,    0,    0,    0,    9, -747,    0, -743,    0,    0,
        -65,  219,    0,    0, -746,    0, -381, -367, -135, -152,    0,    0, -745, -748, -104, -207,    0,    0,    0,    0,
          0,    0,  435,   41, -408,    0, -409,    0,    0,    0, -221, -352,    3, -355,  -66, -224, -236,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0, -164,    0,  227, -165, -166, -167, -168,  226, -170, -172,  228, -220, -222,
        142, -331, -292,  122, -291, -334, -293, -294,  406, -295, -238, -326, -332,  390, -226, -229, -304, -569,  647, -305,
        430, -335,  178, -228,  234,   48, -227,  278, -297,  579, -313, -314, -315, -316, -298, -329, -317, -327, -318, -319,
        -65,  352, -679, -174, -328, -320, -716, -225, -123, -286, -321, -576, -323, -330,   34, -299, -503, -336, -322, -502,
          0,    0, -296, -303,  426, -337,  248, -324,    0, -325,  379, -344, -300,    0,  -66, -570,  277,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0, -333,    0, -301, -302, -306, -307, -308, -309, -310, -311, -312,    0,    0,
       -239, -290, -201, -331, -292, -450, -291, -334, -293, -294,  491, -295,    0, -326, -332,  586,  107,    0, -304,   29,
        111, -305,    0, -335,    0, -203,  103,  109,    0, -202, -297,  108, -313, -314, -315, -316, -298, -329, -317, -327,
       -318, -319,    0,    0,    0,  -18, -328, -320, -204, -709,  476, -710, -321,    0, -323, -330,  355, -299,  110,  155,
       -322, -182,  114,  113, -296, -303, -185, -337,  106, -324,  112, -325,    0, -344, -300,   30, -183,    0,    0, -153,
       -154, -155, -156, -157, -158, -159, -160, -161,  104, -333,  105, -301, -302, -306, -307, -308, -309, -310, -311, -312,
       -201, -331,   78, -290,   95,  102, -293, -294,    0, -295,    0, -326, -332,  115,  107,    0, -304,   29,  111, -305,
          0,   94,    0, -203,  103,  109,    0, -202,  100,  108,   97,   89, -315,   82,   79, -329,   85, -327,   87,   84,
          0,  117,    0,    0, -328, -320, -204, -709, -187, -710,   77, -579, -323, -330,  642, -299,  110,   93,   88, -182,
        114,  113, -296, -303, -185,   81,  106,   98,  112, -325,  116, -580,   76,   30, -183,    0,  -93, -153, -154, -155,
       -156, -157, -158, -159, -160, -161,  104,  101,  105,   92,   96,   90, -307,   91,   80,   86,   83,   99,    0,    0,
          0, -290, -201, -331, -292,  266, -291, -334, -293, -294,  447, -295, -238, -326, -332,  496,  107, -233, -304,   29,
        111, -305, -219, -335,  138, -203,  154,  109, -230, -202, -297,  108, -313, -314, -315, -316, -298, -329, -317, -327,
       -318, -319,  284,  585,  -29, -173, -328, -320, -204, -709, -151, -710, -321,  637, -323, -330,  239, -299,  110,  155,
       -322, -182,  114,  113, -296, -303, -185, -337,  106, -324,  112, -325, -221, -344, -300,   30, -183, -232, -231, -153,
       -154, -155, -156, -157, -158, -159, -160, -161,  104, -333,  105, -301, -302, -306, -307, -308, -309, -310, -311, -312,
       -220, -222, -239, -290
      };

   // Terminal transition matrix row ...
      ushort Kotlin_ParserTables::Tr[670] = 
      {
        740,  740,  740,  740,  840,  244,  740,  740,  740,  840,  740,  740,  740, 1040,  740,  244,  740,  840,  840,  740,
        740,  341,  740,  244,  740,  840,  740,  740,  740,  740,  740, 1040, 1040,  740,  740,  840,  840, 1040,  740,  740,
        740,  740,  740,  740,  840,  740,  740,  740,  840,  840,  740,  840,  740,  740,  740,  740,  740,  840,  840,  341,
         76,  740,  740,  740, 1142,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
        740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
        740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  840,  740,  740,  740,  740,  740,  740,  740, 1040,  740,
        840,  638,  840,  840,  740,   76,  840,  740,   76,  840,  740,  740, 1142,  840,   76,  840,  740,   76,  740,  740,
        740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  840,  740,  740,  740,  740,  740,  740,  740,  244,
        740,  740,  740,  840,  740,  740,  840,  840,  942,  740,  740,  840,  740,   76,  740, 1142,  840,  341,  740,   76,
        638,  840,  840,  148,   14,  840,  740,  840,  740,  740,   76,  740,  740,  740,  740,   76, 1142,  439,  244,   76,
        840,  740,  740,  840,  840,  840,  840,   76,  840,  840,  840,  840,  840,  740,  740,  740,  740, 1142,  740,  740,
        740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  740,  244,  740,  740,    7,  740,  537,   76,  740,
        740,  740,  840,   76,  740,  740,  740,  740,  740,  740,  740,  740,  840,  638,  740,  740,  840,  740,   76,  740,
        840,  740,  638,  740,  740,  740,  740,  740,   76,  244,  740,  740,  740,  740,  740,  740,  740,  740,  740,  840,
        840,  840,   76,  740,  740,  840,  840,  840,  840,  840,   76, 1142,  840,  840,  740,  341,  740,  840,  740,  840,
        942,  840,  740,  740,  638,  740,  740,  244,  740,  740,  840,  740,  740,  840,  638,  740,  244,  740,   76,  840,
         15,  244,  840,  740,  148,  740,   76,  942,  740,  740,  244,  740,  740,  840,  740,  740,  740,  840,  840,  740,
        840,  740,  638,  638,   76,  840,  840,  840,  740,  740,  840,  341,  740,  840,  740,  740,  740,  740,   76,  740,
        740,  148,  840,  740,  740,  244,   76,  740,  840,  740,  740, 1040,  840,   76,  740,  740,  740,  840,  740,  740,
        740,    4,  740,  740,   76,  740,  740,  840,  840,  840,  740,    5,  840, 1142,  740,  244,  740,  740,  638,  740,
        740,  840,   76, 1142,  740,  840,  740,   76,  740,  740,  740,  740,  840,  244,   76, 1142,  740,  740,  244,  840,
        740, 1142,  740,  840,  942,  840,  740,    6,  840,  638,  740,  840,    2,  740,  740,  740,  740,  244,  740,  740,
        840,  740,  942,  740,   76,  740,  740,  740,  840,  740, 1142,   76,  740,   76, 1142,  840,  740,  148,  148,  148,
        740,  740,  740,  740,  740,  740,  840,  942,  341,  244,  740,   14,  740,  740,  740,  840,  740,  740,  840,  740,
        341,  740,   14,  148,  840,  148,  840,  840,  740,  638, 1142,  740,  740,   76,   76,  840,  740,   76,   14,  740,
        740,  439,  638,  148,   76,  740,   14,  740,  740,  840,  740,  148,  148,  148,  740,  740,  740,  740,  740,  740,
        638,  740,  439,  740,  740,  740,  740,  740,  244,  740,  740,  740,   76,  740,  740,  740,  840,  840,  840,  840,
        740,  740,  740,  740,    7,  740,  840,    5,  840,  740,  740,  740,  840,  740,  840,   76, 1142,  942,  244,  840,
        148,    7,  740,  740,  537,  740,  740,  537,   15,  439,   15,  740,  740,   76,  840,   76,    4,  740,   76,  740,
        740,  840,   76,  740,    4,  740,  740,   76,  740,  740,  840,  740,    5,  840,  244,  740,    3,    0,  244,  740,
        740,    6, 1142,  740,  840,  740,    7,  740,  638,  740,  840,  840,  740,  740, 1142,  740,  740,  840,  740, 1040,
        244,  740,  740,  244,  840,   76,  740,  740,  840,  740,  840,  740, 1142, 1040,  537,    2,   14,  740,    3,  740,
          1,  148,  740,    5,   76,   76,  840,  740,  840,  740,  840,  740,   76,  740,  740,  740,  840, 1040,  840,  148,
        740,  740,  740,    1,  148,    6,  740,  740,  148,  740
      };

   // Terminal transition matrix column ...
      uchar Kotlin_ParserTables::Tc[155] = 
      {
          4,    4,    4,    5,   15,    5,    2,   41,   23,   13,   15,   17,   23,   46,    6,    7,   46,   54,    0,    8,
          9,   27,   21,   62,    0,   27,   28,   34,   76,    1,   76,   14,    2,   41,    3,    4,    5,   55,   18,   72,
          6,    7,    8,    9,   10,   87,   89,   11,   12,   90,   63,   13,   14,   15,   16,   17,   18,   19,   20,   26,
         91,   92,   93,   94,   21,   95,   70,   22,   96,   66,   23,   24,   25,   26,   27,   47,   28,   97,   29,   30,
         31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   49,   48,   49,
         50,   51,   52,   53,   54,   75,   55,   56,   64,   57,   58,   59,   74,   60,   61,   62,   63,   64,   65,   66,
         67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
         87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,  101
      };

   // Nonterminal transition matrix ...
      short Kotlin_ParserTables::Nm[4648] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,  258,  260,  279,  280,  281,  282,  285,  286,  287,  288,  289,  290,  291,  292,  293,  297,  301,  304,  310,
        313,  314,  319,  322,  327,  333,  337,  338,  340,  343,  344,  345,  346,  347,  350,  358,  361,  362,  368,  387,
        388,  389,  391,  392,  402,  403,  405,  407,  414,  415,  419,  423,  424,  425,  427,  428,  429,  431,  432,  440,
        444,  448,  450,  451,  453,  454,  455,  459,  466,  467,  475,  478,  483,  484,  485,  486,  487,  490,  493,  494,
        495,  497,  498,  503,  504,  506,  509,  511,  512,  532,  537,  538,  539,  546,  547,  548,  552,  554,  555,  556,
        557,  559,  560,  561,  569,  570,  573,  574,  575,  576,  578,  581,  582,  593,  602,  608,  610,  611,  617,  624,
        625,  628,  630,  632,  636,  641,  643,  644,  645,  646,  648,  650,  652,  656,  658,  659,  663,  664,  665,  668,
        471,  568, -511, -377,  259,  300,  262, -385,  326,  238, -417,  300,  262,  383,  125,  300,  324,  326,  458,  482,
        300,  300,  638, -388,  326,  458, -487,  -50,  502, -388,    0,  323,  261,  326, -474, -480, -391,  502,  380, -414,
       -479, -481, -484,  -49,  325, -391, -432,  318, -414, -177,  300,  238, -391,  409,  384,  357, -429,  597,  604,  -45,
        433, -391, -429,  238,  -30,  492, -429, -441,  373,  533,    0, -429, -429,  564,  -52,  596,  567,  -55,  634, -499,
        605,  262,  662,  -41,  635, -395, -508,  613,  635, -519,  639,  300,    0,    0,  661,    0, -455, -178, -388,  502,
          0, -429,  -16, -455,  -42,  606,  640,  627,  614, -441, -414, -438, -175,    0,  367,  603,  394,    0,  353,  -39,
        366, -441,  393,  397,  441,    0,    0,    0, -490,  398,  442,  -60, -702,  317,  399,  667, -196,  456,  543,    0,
        366, -549, -429,  457,  544,  -20,  583,    0,    0,    0,    0, -491,  584, -703, -466, -706, -707,  501, -405, -445,
       -625,   27,    0,    0,  592,  601,    0,    0,    0,    0, -404, -642,    0,    0, -404, -419, -639,    0,  299,    0,
       -625,    0,   27,    0, -672, -424,    0,    0,   27,    0,    0, -436,    0,    0,    0,    0, -419,    0,    0,  372,
         27,    0, -419,    0, -404,  421, -404,    0, -404,    0,    0,    0,    0,    0, -647, -404, -404,  197, -737,    0,
          0,    0,    0,    0,    0, -738, -404,   26,    0, -404, -404, -458,    0,    0, -444, -700,    0,    0, -404, -737,
          0,    0,    0, -404,    0, -737, -738,    0,   26, -401, -404, -404, -738,    0,   26, -521,  -74, -737,    0,    0,
          0,    0, -733,    0, -738,    0,   26,    0,    0,    0,  265,    0, -640,   27,    0,  237, -521, -195,    0,   24,
         25,    0,    0, -733,    0,    0,    0, -248,    0,    0,  200,    0, -521,  -54,   27,    0,  237, -521,  612, -733,
         24,   25,    0,    0, -733,    0,   24,   25, -248,    0,   27,  205,  237, -521,  -32,   27,    0,  237,   24,   25,
       -733,    0,    0,    0, -248,    0,    0,  209,    0, -248, -737,   27,  210,  237,    0,    0,    0, -738,    0,   26,
          0,    0,    0, -521, -494, -248,    0,    0,  235,    0, -733, -737,    0, -449,    0,    0,    0,    0, -738,    0,
         26,   27,    0,  237,    0,    0,    0, -737,    0,    0, -722,    0, -737,   27, -738, -248,   26,  270,  208, -738,
       -637,   26,    0,    0,    0,    0,    0, -721, -737,   60,  207,   24,   25,    0,   27, -738,    0,   26,    0,    0,
          0,    0,  268,  269, -449,    0, -537,    0,  -73,    0,   60,  199,   24,   25, -618,    0,    0,    0, -737,    0,
          0, -722, -538,    0,   27, -738,   60,   26,   24,   25, -737,   60,    0,   24,   25,    0,    0, -738, -721,   26,
          0,  243,    0,    0,    0, -488,    0,   60, -449,   24,   25, -737,    0,    0,    0,    0,    0,    0, -738,    0,
         26,    0, -442,    0,    0, -722,    0,    0,   27,    0,    0,  412,    0,    0,    0,    0,    0,   60,    0,   24,
         25, -737, -721,    0,    0,  252, -723,  413, -738,    0,   26,   24,   25,    0,    0,    0,  654,  332,    0, -426,
       -735,  331, -422,    0,    0,    0,    0,    0,    0,    0,    0,    0,   24,   25,   27,    0,    0,    0,    0,    0,
          0,    0,  412,    0,    0, -737, -521,  660, -267,    0,    0,  204, -738, -733,   26,    0,    0, -723,  413,    0,
        136,    0,   24,   25,   27,    0,  237,    0,    0,    0, -377,  254,    0,  558,    0,    0, -622,    0, -248,    0,
          0,  125,   27,    0,    0,    0,  536,    0,    0,    0,    0, -737,    0,    0,  329,    0, -419,    0, -738,  137,
         26, -723,  413,    0,    0,    0,   24,   25, -118,    0, -119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0, -737,
          0,    0,  202,    0,    0, -117, -738,    0,   26,    0,  201,  330,   24,   25, -521, -544,    0,    0,    0,    0,
          0, -733,    0,  465,    0,    0,    0,    0,  -43,    0,    0,    0,   27,  270,  237,    0,    0,    0,    0,    0,
         60,  218,   24,   25, -547,    0, -248,    0,    0,  217,   27,    0,    0,    0,    0,    0, -115,    0,    0,    0,
         24,   25,    0,    0,  -73,    0,    0,  134,    0,    0,  517,    0,    0,    0,    0, -603, -485,    0, -539,    0,
          0, -191,    0,    0,    0,    0,    0,    0,    0, -737,    0,    0,  -96,    0,    0, -606, -738,    0,   26,    0,
         65,   66,   67,    0,    0,   64,    0, -737,    0,    0,    0,  513,    0,    0, -738,    0,   26,    0,    0,    0,
          0,  489,    0,    0,    0,    0,   68, -543,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,
          0,    0,    0,    0,    0, -430,    0,   72,   60,   64,   24,   25, -613,  149, -197,    0,    0,    0,    0,  332,
          0, -426, -735,  331,  328,    0,    0,  194,   24,   25,    0,    0,    0,    0,    0,    0,   27,   73,    0,    0,
          0,  514,    0,    0,    0,    0,    0,    0, -192,  515, -267,    0, -697,  129,   74,    0,   75,  149, -193,    0,
          0,    0,    0, -456,    0,    0,    0,    0,    0,    0,    0,  516, -449,    0,    0,    0,    0,    0,    0,    0,
          0, -493,  410,  354,    0,    0,    0,    0,    0, -722,    0,   64,   27, -737,    0,    0,  329,    0,    0,    0,
       -738,  -28,   26,    0,    0,  531, -721,  232,    0,  176,    0,    0,  -96,    0,   27,    0,    0,    0,    0, -607,
         65,   66,   67,    0,    0,    0,    0,    0, -419,    0,    0,  195,    0,    0,    0,    0,   74, -601,   75,  149,
          0,    0,    0,    0,    0,   72,   68,   64,   69, -737,    0,    0,    0,  330,   24,   25, -738,   70,   26,   71,
          0,    0,    0,    0,  411,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,   73,    0,    0, -738,    0,
         26,    0,    0,    0,    0,    0,    0,    0,    0,    0,  412,    0,   74,    0,   75,  149,    0,   73,    0,    0,
          0,    0,    0,    0,    0, -723,  413, -374,    0, -718,   24,   25, -725,    0,   74,    0,   75,  149, -726,    0,
       -727, -728,    0, -729, -730, -731,    0,    0,   27, -732,    0,  620,   24,   25,    0,    0,    0,    0,    0,    0,
          0, -374, -717, -718,    0,  211, -725,    0,    0,    0,    0,    0, -726,    0, -727, -728, -472, -729, -730, -731,
       -585,    0,   27, -732,    0,  623,    0,    0,    0,    0,    0,    0,    0,    0, -477,    0, -717,    0,    0,  212,
          0,    0,    0,    0,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0, -588,    0,    0,    0,
       -374,    0, -718,    0,    0, -725,    0,    0,    0,    0,    0, -726,    0, -727, -728,    0, -729, -730, -731, -737,
          0,   27, -732,    0,  526,    0, -738,    0,   26,    0,    0,    0, -399,    0,    0, -717,    0,    0,  238, -719,
         23,    0,    0,   28,    0,    0,   24,   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -719,   23,    0,    0,   28, -737,    0,
         24,   25,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0, -441,    0,    0,  591,
          0, -718,    0,    0, -725,    0, -181,    0,    0,    0, -726,    0, -727, -728,    0, -729, -730, -731, -516,  590,
         27, -732,    0,    0,    0,    0,    0,    0,    0,    0,    0, -509, -719,   23, -717,    0,   28,  256,  522,   24,
         25,    0,  401,    0,    0,    0,    0,    0,    0,  -96,    0,   27,    0,    0,    0,    0,    0,   65,   66,   67,
          0,    0,    0,    0,    0, -419,    0,    0,  181,    0,    0,    0,    0,    0,    0,    0,    0, -737,    0,    0,
          0,    0,    0,   68, -738,   69,   26,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,
          0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,  400, -738,    0,   26,    0,    0,
          0,    0,    0,    0,    0,  332,    0,    0, -736,  331,  255, -719,   23, -682,   73,   28,    0,    0,   24,   25,
          0,    0,   27,    0,    0,    0,    0,    0, -583,   66,   67,   74,    0,   75,  149,    0, -267,    0,    0,  173,
          0,    0,    0,    0,    0, -636,    0,    0,    0,   24,   25,    0,    0, -623,   68,    0,   69,   47,    0,    0,
          0,    0,    0, -722,  -96,   70,   27,   71,    0,    0,    0,    0,   65,   66,   67,   72,    0,   64,    0, -737,
       -721,    0,    0,  180,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
         69,    0,    0,    0,    0,   73,    0, -675,  172,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,
          0,   64,   74, -737,   75,  149,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,
         24,   25,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,  -43, -530,    0,    0, -521,  -69,    0,    0,
          0,    0, -357, -733,    0,   47,   74,    0,   75,  149,    0,    0,    0,    0,   27,    0,  237,    0,    0, -724,
       -535,  -68,    0,    0,   24,   25, -288,    0, -248,    0,    0,  132,    0,    0,    0,    0,    0,    0,    0,    0,
       -482,    0, -415,    0,    0,    0,    0, -521, -616,    0,    0,    0,    0,    0, -733,    0,  334,    0,    0,    0,
          0,    0,    0,    0,    0,   27,    0,  237,    0,   64,    0, -737, -586,   67,    0,    0,    0,   45, -738, -248,
         26,    0,  175,    0,    0,  365,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,   69,
          0,   46,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0, -610,    0,   75,  149,   72,    0,
         64,    0, -737,    0,    0,    0,    0,    0,    0, -738,   60,   26,   24,   25,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0, -678,  174,    0,    0,    0,    0,  591, -505,
       -718,    0,    0, -725,    0,   74,    0,   75,  149, -726,    0, -727, -728,  588, -729, -730, -731, -516,  590,   27,
       -732,   60,    0,   24,   25,    0,    0,    0,  349,    0,  589,    0, -626, -717,    0,    0,  206,    0,    0,  -96,
          0,   27,    0,  418,    0, -521,  -10,   65,   66,   67,  -48,  461, -733,    0,  462, -419,    0,    0,  167,    0,
          0,  -96,    0,   27,    0,  237,    0,  377, -571,   65,   66,   67,    0,   68,    0,   69, -737, -248,    0,    0,
        183,    0,    0, -738,   70,   26,   71,    0,    0,    0,    0,    0,    0,    0,   72,   68,   64,   69, -737,    0,
       -131,    0,    0,    0, -572, -738,   70,   26,   71, -627,    0,    0,  232,  417,    0,    0,   72,    0,   64,    0,
       -737,    0,    0,    0,   73,    0,    0, -738,    0,   26, -719,   23,    0,    0,   28,    0,    0,   24,   25,    0,
          0,   74,    0,   75,  149,    0,   73,    0,    0,    0,    0,  -82,    0,    0,    0, -521,  275,    0,    0,   24,
         25,    0, -733,   74,  188,   75,  149,    0,    0,    0,    0,    0, -361,   27, -190,  237,    0,    0,    0,   60,
          0,   24,   25,    0,  657,    0,    0, -248,    0,    0,  126,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        519,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -597,    0,   71,    0,
          0,    0,    0,    0,    0,    0,   72,    0,   64,  -82, -737,    0,    0, -521,  312,    0,    0, -738,    0,   26,
       -733,    0,  192,    0,  232,    0,    0,    0,    0,    0, -361,   27, -189,  237,    0,    0,   73, -377,  127,    0,
          0,    0, -575,    0,    0, -248,    0,    0,  128,    0,    0,    0,    0,   74,   32,   75,  149,  -83,    0, -688,
          0,   19,    0,    0,    0,    0,    0,    0,    0,   60,    0,   24,   25,    0,    0,    0,    0,    0,    0,    0,
       -521, -427,    0,    0, -604,  480,   64, -733, -737,  396,    0,    0,    0,    0,    0, -738,  -96,   26,   27,    0,
        237,    0,  520,    0,   65,   66,   67,    0,    0,    0,    0,    0, -248,    0,   73,  179,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,   74,   69,   75,  149,  -83,    0,    0,    0,    0,
          0,   70,    0,   71,    0,    0,    0,   60,    0,   24,   25,   72,    0,   64,    0, -737,    0,    0, -521, -544,
          0,    0, -738, -136,   26, -733,    0,  465,    0, -650,  395,    0,    0,    0,  -96,    0,   27,    0,  237,    0,
          0,   73,   65,   66,   67,    0,    0,    0, -546,  464, -248,    0,    0,  184,    0,    0,    0,    0,   74,    0,
         75,  149,    0,    0,    0,    0,    0,    0,   68,    0,   69,    0,    0,    0,   60,    0,   24,   25,    0,   70,
          0,   71,    0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,    0,
       -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0,    0, -501,    0,    0,    0,    0,  270,    0,   73,
        267,    0,    0,    0,    0, -750,    0,  -56,    0,    0,    0, -543,    0, -361,   27,  598,   74,    0,   75,  149,
       -377,  124,  268,  269,    0,    0, -537,    0,  -73,    0,    0,  125,   60,    0,   24,   25,    0,    0,    0,    0,
          0, -176, -538,    0,   19,    0, -592,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,
          0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,  -38,    0,    0,    0,  233, -738,    0,
         26,    0, -199, -356, -734,  232,   47,    0,    0,  133,    0,    0,    0,  -96, -361,   27,   -7,   73,    0, -670,
          0,   65,   66,   67,    0,    0,    0, -288,    0, -248,    0,    0,   44,    0,   74,    0,   75,  149,   32,    0,
          0,    0, -633,    0,    0,   19,    0,   68,    0,   69,    0,    0,   24,   25,    0,    0,    0,    0,   70,    0,
         71,    0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,   45, -738,
          0,   26,    0,    0,    0,    0,  342,    0,    0,    0,  -82,    0,    0,    0,    0,    0,    0,    0,   73,    0,
       -359,    0,   46,   47,    0,    0,    0,    0,    0,    0,  186, -361,   27,  594,    0,   74,    0,   75,  149, -555,
       -589,    0,    0,  633, -288,    0, -647,    0,    0,  123,    0,    0,    0,   24,   25,   32,    0,    0,    0,    0,
          0,    0,   19,    0,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,
          0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,   45, -738,    0,   26,    0,
       -645,  263,  265,  489,  264,    0,    0,    0,    0,    0,    0,    0,    0, -521,    0,   73,    0,    0,  -44,   46,
       -733,    0,   47,    0,    0,    0,    0,  488,    0,  -96,    0,   27,   74,   59,   75,  149,  -83,   65,   66,   67,
          0, -542,  307,  -22,    0, -248,    0,    0,  185,  -27,   24,   25,    0,    0,    0,    0,    0,    0,  474,    0,
          0,    0,    0,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,
          0,    0,    0,    0,   72,    0,   64,    0, -737,    0,  473,    0,    0,    0,  472, -738,    0,   26,    0,    0,
          0,    0,    0,  -23,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,   46,    0,
          0,    0,    0,    0,  517,    0,  308,    0, -449,    0,    0,   74,    0,   75,  149, -191,    0,    0,    0,  619,
          0,    0,  535,    0,    0, -722,  -96,   60,   27,   24,   25,    0, -532,    0,   65,   66,   67,    0,    0,    0,
          0,    0, -721,    0,    0,  196,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,
          0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0, -447,  534,    0,    0,    0,
          0,    0, -192, -698,    0,    0,  536,    0,   74,    0,   75,  149, -193,    0,    0,    0,    0,    0,    0,  136,
          0, -723,  413, -521, -598,  516,   24,   25,  348, -356, -733,    0,   47,    0,    0,  253,    0,    0,    0,  -96,
          0,   27,    0,  237,    0,    0,    0,   65,   66,   67,    0,    0,    0, -288,    0, -248,    0,    0,  137, -120,
          0,    0,    0,    0,    0,    0,    0, -128,    0, -129,    0,    0,    0,   68,    0,   69,    0,    0,    0,    0,
          0,    0,    0,    0,   70,    0,   71,    0,    0,    0, -521,    0,    0,    0,   72,  371,   64, -733, -737,   47,
          0,    0,    0,    0,   45, -738,  -96,   26,   27, -127,   59,  -61,    0,    0,   65,   66,   67,  305, -542,  307,
          0,    0, -248,    0,   73,  171,  306,    0,   46,    0,    0,    0,    0,    0, -523, -525,    0,    0,    0,    0,
         68,   74,   69,   75,  149,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,   60,    0,   24,
         25,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,  -62, -738,    0,   26,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,   46,    0,    0,    0,    0,
          0,    0,    0,  308,    0,    0,    0,    0,   74,    0,   75,  149,  -82,    0,    0,    0, -521,    0,    0,    0,
          0,  321,    0, -733,   60,   -8,   24,   25, -386,  144,    0,    0,  -96, -433,   27,    0,   59,    0,    0,    0,
         65,   66,   67,    0,    0, -574,    0, -372, -248,    0,    0,  121,    0,    0,    0,    0,    0,   32,    0,    0,
          0,  -88,  364,    0, -581,   37,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,
          0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,
         26,    0,    0,    0,    0,  365,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  257,    0,    0,    0,    0,   74,    0,   75,  149,  -83,    0,
          0,    0,    0, -374,    0, -718,    0,    0, -725,    0,   60,  369,   24,   25, -726, -715, -727, -728,    0, -729,
       -730, -731,  -96,    0,   27, -732,    0,  382,    0,    0,   65,   66,   67,  381,    0,    0, -398,    0, -717,    0,
          0,  168,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,   69,    0,
          0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,    0,   64,
          0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -383,
          0,    0,    0,    0,   74,    0,   75,  149,    0,    0,    0,    0,    0,    0, -205, -719,   23,    0,    0,   28,
          0,    0,   24,   25, -374,    0, -718,    0,    0, -725,    0,    0, -194,    0,    0, -726,  465, -727, -728,    0,
       -729, -730, -731,  -96,    0,   27, -732,    0,  526,    0,    0,   65,   66,   67,    0,    0,  525,    0, -407, -717,
          0,    0,  190,  524,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,   69,
          0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,    0,
         64,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -452,
        572,    0,    0,    0,    0,   74,    0,   75,  149,  189,    0,    0,    0,    0,    0,    0, -719,   23,    0,    0,
         28,    0,    0,   24,   25,  527,    0, -374,  529, -718,    0,  -47, -725,    0,    0, -412,    0,    0, -726,  616,
       -727, -728,    0, -729, -730, -731,  -96,    0,   27, -732,    0,  528,    0,    0,   65,   66,   67,    0,    0,    0,
       -471,    0, -717,    0,    0,  190,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -476,    0,    0,    0,
         68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,
          0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0, -452,    0,    0,    0,    0,    0,   74,    0,   75,  149,  193,    0,    0,    0,    0,    0,    0, -719,
         23,    0,    0,   28,  -82,    0,   24,   25, -521,  236,    0,    0,    0,  271,    0, -733,    0,   47,    0,    0,
          0,    0,    0,    0,  -96,  -79,   27,    0,  237,    0,    0,    0,   65,   66,   67,  143,    0, -575,    0, -372,
       -248,    0,  -77,   49,  145,    0,    0,    0,    0,   32,    0,    0, -551,  356,  -89,    0, -581,   37,   68,    0,
         69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,
          0,   64,    0, -737,    0,    0,    0,    0,    0,  -62, -738,    0,   26,    0,    0,    0,    0,  232,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,   74,    0,   75,  149,  -83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,   60,    0,   24,   25,  -36,  144, -374,  468, -718,    0,    0, -725,    0,    0, -462,  -11,    0, -726,
        443, -727, -728,  -12, -729, -730, -731,  -96,    0,   27, -732,    0,  469,    0,    0,   65,   66,   67,    0,    0,
        -35,    0,    0, -717,    0,    0,  182,  -13,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -15,    0,    0,
          0,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,
          0,    0,   72,    0,   64,    0, -737,    0,    0,    0,    0,    0,    0, -738,    0,   26,    0,    0, -435,    0,
          0,  -34,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,  -14,    0,    0,    0,
          0,    0,    0,  -37,    0,    0,    0,    0,    0,   74,    0,   75,  149,    0,    0,    0,    0,    0,    0,    0,
       -719,   23,    0, -198,   28,    0, -718,   24,   25, -725,    0,    0,  241, -285,    0, -726,   47, -727, -728,    0,
       -729, -730, -731,  -96, -349,   27, -732,    0,    0,    0,    0,   65,   66,   67,    0,    0,    0, -288,    0, -717,
          0,    0,   35,    0,    0, -560,  295,    0,   32,    0,    0,    0,    0,    0,    0,   19,    0,   68,    0,   69,
          0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,    0,
         64,    0, -737,    0, -517,    0,    0,    0,   45, -738,    0,   26,    0,    0,    0,    0,  320,    0,    0, -655,
        240,    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,   46,    0,    0,    0,    0,    0,    0,  294,
          0,    0,    0,    0, -150,   74,    0,   75,  149,  296, -521,    0,    0,    0,    0,  225, -720, -733,    0,  223,
         28,    0,    0,   24,   25,    0,  -96,  224,   27,    0,   59,    0,    0,    0,   65,   66,   67,  222,    0, -122,
         55, -125, -248,    0,    0,  135,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,
          0,   72,    0,   64,    0, -737,    0,    0,   56, -144, -139,    0, -738,    0,   26,    0, -137, -140, -162,    0,
          0,    0, -179, -163,    0,    0,    0,    0,    0,    0,    0,   73,    0, -180, -142,    0, -143,    0,    0,    0,
          0,    0,    0, -714, -146,    0, -145,    0,   74,    0,   75,   63,    0, -147,    0,   61,    0,   58, -148,    0,
          0, -141,    0,    0,   60, -149,   24,   25, -150,  153,  -82,    0,    0,    0, -521,    0, -234,    0,    0,  225,
       -620, -733,    0,  151,    0,    0,  363,    0,    0,    0,  -96,    0,   27,    0,   59,    0,    0,    0,   65,   66,
         67,    0,    0,  550, -110,  404,  152,    0,    0,   51, -557,    0,    0,    0,    0,   32,    0,    0,    0,  551,
        364,    0, -581,   37,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,   71,    0,    0,
          0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,    0,   56, -144, -139,    0, -738,    0,   26,    0,
       -137, -140, -162,  365,    0,    0, -179, -163,    0,    0,    0,    0,    0,    0,    0,   73,    0, -180, -142,    0,
       -143,    0,    0,    0,    0,    0, -186, -714, -146,    0, -145,    0,   74,    0,   75,  149,  -83, -147,    0,   61,
          0,   58, -148,    0,    0, -141, -112,    0,   60, -149,   24,   25, -393,  -82, -374, -392, -718,    0,  580, -725,
       -529,    0,  -91,  -11,   33, -726,   14, -727, -728,  -12, -729, -730, -731,  -96,   -9,   27, -732,    0,   22,    0,
          0,   65,   66,   67,    0,    0, -574, -348, -372, -717,    0, -411,   18,  -13,    0,    0,    0,    0,   32,  418,
          0,  563,  251,  -15,    0, -581,   37,   68,    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
         71,    0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,  341,  273,  202,  272, -132, -596, -738,
          0,   26,    0, -630,    0,    0,  316,   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
          0,    0,  -14, -701,    0,    0,    0,    0,    0, -506, -692,  315,    0, -704,    0,   74,    0,   75,  149,  -83,
          0,  437,    0,    0,    0,    0, -719,   23, -469,  436,   28,    0,    0,   24,   25, -150, -567,  -43, -374,  -85,
       -718, -521,  -86, -725,  -87, -566, -568,  -11, -733, -726,   57, -727, -728,  -12, -729, -730, -731,  -96,   62,   27,
       -732,   59,   22,    0,    0,   65,   66,   67,   54,    0, -122,   55, -125,   52,    0,    0,   36,  -13,    0, -560,
        295, -564,   32,  -80,    0, -453, -460,  -15,   53, -582,    0,   68,    0,   69,    0,    0,    0,    0,    0,    0,
          0,    0,   70,    0,   71,    0,    0,    0,    0,    0,    0,    0,   72,    0,   64,    0, -737,    0,  -57,   56,
       -144, -139, -459, -738,    0,   26,    0, -137, -140, -162,  232, -565,    0, -179, -163,    0,    0,    0,    0,    0,
          0,    0,   73,    0, -180, -142,  -14, -143,    0,    0,    0,    0,    0,  376, -714, -146,    0, -145,    0,   74,
          0,   75,   63,  296, -147, -461,   61,    0,   58, -148, -719,   23, -141, -561,   28,   60, -149,   24,   25,    0,
       -752,  216,  -17,  247,  221, -439,  276, -241,  445, -237, -528, -463, -712, -346,   13,    1,   14,    2,    6, -366,
         15, -351,   16,  -96, -361,    8, -362, -380,  118,   38,  131,   65,   66,   67,  302,  562,   10, -339,  359, -364,
        505,   40,    4, -368,  351,  420,  386,  530,   32,  418,  141, -375, -176, -340,  571,   19,  408,   68,  156,   69,
        157, -591,  158, -594,  159,  160, -600,  161,   70,  162,   71,  163, -609,  164, -612,  165, -615,  166,   72,  150,
         64,  140,   -5,  311,  -26,  283, -656, -657,  233,   11,  339, -370,  336, -533, -660, -661,  232, -342,  449, -133,
       -666, -659,  169, -664,  170,  230, -669,  229,   73,  298,  231, -694, -389, -701, -681,  177, -684, -184,  607,  417,
          7, -578,  245, -708,  477,   74,  553,   75,  149,   31,  213,    5, -464, -200,  460,  214, -496,  -53,  220, -497,
        655,  615,  215,  -59,  274,   50,   39,   20
      };

   // Nonterminal transition matrix row ...
      ushort Kotlin_ParserTables::Nr[670] = 
      {
       4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4211, 4501, 4501, 4211, 4501, 4211, 4501, 3801,
       4355, 4211, 4501, 3801, 2331, 3801, 3522, 4501, 4068, 4501, 4501, 3801, 4355, 4501, 2970, 4501, 4501, 4355, 2428, 4501,
       2250, 1929, 2007,  952, 4501, 4501, 4501, 1610, 2331, 4501,  826, 4501, 4501, 3924, 4501, 2777, 4501, 4501, 4501, 3522,
       2331, 4501, 4501, 4501, 4068, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501,
       4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 1797, 4501, 4501, 4501, 4501, 4501, 4501,
       4501, 4501, 4501, 3100, 4501, 4501, 2844, 1458, 1661, 1008, 4501, 2074, 1502, 1367, 3665, 1819, 2152, 2527, 2331, 4501,
       2970, 2428, 2250, 1929, 3241, 4501, 2007, 3384, 4501,  952, 1030, 2644, 4501, 1610, 4501, 4211,  356, 4501,  550,  429,
        718,  670,  450, 4501, 1775, 4501,  529, 4501, 1797, 4501,  517, 4501, 4501,  466,  471, 1797, 1144, 1178, 4501, 4501,
       4211, 4501,  808,  826, 4501, 4501, 4501, 4501, 3924, 4501, 4501, 4501,  487, 3522, 1237, 4501, 3801, 4501,  580, 4501,
       4501, 4501, 2331, 4501, 4501, 4211,  624, 2777,  700, 1336, 2970,    0,  153,    1,  145, 2428, 4501, 1797, 4501, 2250,
       3522, 4501, 4211, 4501, 4501, 3100, 4501, 1929, 4501, 4501, 4068, 4501, 4501,    2,    3,    4,    5, 4501,    6,    7,
          8,    9,   10, 4501,   11,   12,   13, 4501,   14, 3801,   15, 4501,  317,  144,   16, 4501,   17, 2844, 4501,   18,
       4501, 4501, 1458, 2007,   19,   20, 4211,  186,   21, 3801, 2970,   22, 4501, 1610,  155,  147, 4355,   23,  952,   24,
       1661,  148, 4501, 4501, 4501,   25,   26, 4501, 1610,  826,   27, 4211, 2331, 4501, 4211,   28,   29,   30,   31, 2428,
       2250, 1929, 2777,   32, 4501, 2007,  952, 1610,  826, 4501, 4501, 4501, 2777, 1797,   33, 3522, 4501, 4501,  257, 1008,
       4501, 3522,  150,   34, 4501, 4501, 4501, 4501,   35,   36, 4068,  259,   37, 3100, 4501, 2844,  338,  207, 4501, 4355,
       1797, 4501, 4501,  151, 3100,  193, 4501, 4501, 4501,   38, 1458,   39,   40, 4501,   41,   42,  261, 2074, 1502,  268,
       4501,  279, 1367, 4501, 1661, 1458, 1661, 1008,   43,   44, 4501, 4068,   45, 4501,  154,   46, 4501,  156, 1008,   47,
         48, 4501, 4501,   49, 4501,  344, 4501,   50, 4501,   51,   52, 4501, 4501, 4211,   53,   54,   55, 4501,   56,   57,
        163, 4501, 4501, 4211, 4501,   58,  269, 3665, 4501, 4501,   59, 4501, 2970, 4501,   60, 4501,   61,   62, 4501,   63,
         64, 4501, 4501, 4501, 2331, 4501,   65, 2074,  282,  157,   66, 4501, 1819, 1502, 4501, 2152,   67,   68, 3665, 4501,
        139, 2527,   69, 4501, 4501, 4501,   70, 4501, 3801, 4501, 2074, 3522, 4501,  158,   71,   72,   73, 4501,   74,   75,
       2428,   76, 4501,  159, 1819,  160,   77,   78, 4501,   79, 4501, 4501,   80, 4501, 4501, 2250,   81, 4501, 4355, 4501,
        296,  167,   82,   83, 4501,   84, 4501, 4501, 2970, 4501,   85, 4501, 4501,   86, 4501, 1502,   87,  870, 1929, 2007,
       4501, 1367, 4211, 3241, 4501, 3384, 3665, 1819, 4501, 1030, 4501,   88,  172, 2644,  356, 2152,   89,  550, 4501,   90,
         91, 4501, 4501, 4501,  429,  283, 4501,   92,   93, 2331,   94, 4501, 4068, 4501,   95, 4501,   96,   97,   98,   99,
        718,  100, 4501,  101,  102, 4501, 4211,  212, 4501,  215,  140,  103,  670,  164,  104, 4501, 3241, 4501,  952, 2527,
        105,  106,  107,  108, 4501,  109, 4501, 4211, 1610,  110, 4501,  111, 4501,  291, 3241,  450, 4501, 4501, 4501, 2970,
       1775, 4501,  303,  112, 2428,  214,  196, 2250, 4501, 4501, 4501,  304,  176,  529, 3384,  517, 4501,  113,  466,  197,
        244, 1030, 4501,  114, 4501,  115,  116,  471,  247, 4501, 3384,  117, 4501, 2644, 1144, 4501, 4501, 4501, 1178,  118,
        119, 4501,  808,  220,  356,  120, 4501,  121, 4501,  122, 2428, 4501,  223,  123, 4501,  161,  245, 4501,  124, 4501,
       4501,  125,  126, 4501,  826,  487,  127,  190, 2250,  128, 4501,  129, 2644, 1929, 4501, 4501, 4501,  130, 4501,  202,
       3801, 1237,  131, 4501,  580,  624, 4501,  132, 1929,  133, 4211,  134,  700,  189,  227,  135, 2007, 2007,  952, 1336,
        238,  136,  137, 4355, 1610, 4501,  230,  138,  826, 4501
      };

   // Nonterminal transition matrix column ...
      uchar Kotlin_ParserTables::Nc[753] = 
      {
         36,   36,   52,   96,   12,  119,   35,   18,   42,   36,   52,   96,   96,   96,   96,   96,   12,  119,    4,    1,
         35,   18,   42,   42,   42,   42,   36,   52,   96,   50,   12,  111,  119,  118,    4,    4,    4,    4,    1,   35,
          7,   18,   42,   50,   50,   51,   87,  111,   10,   36,   52,   33,   96,   12,  119,   18,  118,  138,    1,    4,
         35,    7,   42,   42,   50,    9,    9,   87,  111,   10,   10,   36,   52,   52,   51,   37,   33,  119,   96,  118,
        128,  138,   35,   35,    2,    1,    1,    1,    4,    7,    9,   10,   23,   23,   37,   37,   11,   22,   30,   31,
         32,   56,   58,   67,   84,   69,   77,  107,  124,  126,  127,   12,   12,   12,   36,   18,   18,   18,   18,   18,
         33,   33,   33,   35,   23,   23,   37,   42,   42,   42,   50,   52,   87,   51,   92,   83,   96,   84,   84,   84,
         84,   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,   92,   85,   86,   86,   86,   86,   86,   86,   86,
         86,   86,   93,   93,   94,   99,   85,   85,   85,   86,   93,   93,   93,   94,   98,   99,  109,  109,  109,  110,
        110,  112,  122,  122,  120,  120,  129,  110,  134,  111,  111,  119,  119,  119,  118,  128,  141,  112,  122,    0,
          0,    0,    0,    0,    0,  137,  120,  120,  120,  120,  120,  129,  129,  129,  129,  134,  134,  134,  134,  141,
        141,    0,    0,  137,  137,    3,    3,    3,    5,    5,    1,    1,    1,    1,    1,  138,  138,  138,    8,    8,
          2,    2,    2,    6,    3,    4,    5,    6,   13,   13,    8,    8,    8,    8,    8,    8,   14,   14,   16,   16,
         16,   16,    7,    7,    9,   10,   10,   10,   17,   17,   17,   17,   17,   17,   19,   20,   20,   20,   21,   21,
         21,   11,   25,   25,   38,   81,   88,   90,   12,   12,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
         15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
         15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   13,   14,
         14,   16,   16,   41,   41,   17,   17,   19,   19,   20,   21,   21,  130,  130,   24,   24,   18,   18,   22,   22,
         25,   25,   38,   81,   81,   88,   88,   90,   90,   27,   27,   23,   23,   27,   27,   30,   31,   31,   26,  145,
        145,   28,   28,   32,   56,   56,   58,   67,   67,   69,   77,   77,  107,  107,  124,  124,   36,   33,   33,  126,
         34,   34,  127,   35,   35,   37,   42,   42,   40,   40,   50,   50,   52,   87,   87,   51,   44,   44,   95,   95,
         83,   83,   96,   45,   45,   84,   84,   92,   85,   85,   86,   46,   46,   93,   48,   48,   94,   98,   98,   99,
        109,  109,  110,   53,   53,  111,  112,  112,  122,  122,  118,  128,  128,  119,  120,  120,  129,   55,   55,  130,
        130,  134,  131,  131,  141,    0,    0,  137,  138,  138,    1,    1,    2,    3,    3,    4,    4,    5,    6,    6,
          7,    7,    8,    9,    9,   10,   11,   11,   12,  133,  133,   13,   14,   14,  135,  136,  136,   15,   16,   16,
         17,   17,  139,  139,   18,   18,   19,   20,   20,   21,  140,  140,  142,  142,   22,   23,   23,   24,   25,   25,
         26,   26,   27,   27,   27,   27,  145,  145,  143,  143,   28,   29,   29,   30,   31,   31,   32,   32,   33,   33,
         34,   35,   35,   36,   36,   37,   37,   38,   39,   39,   40,   40,   40,   41,   41,   42,   43,   43,   44,   45,
         45,   46,   46,   47,   47,   48,   48,   48,   48,   49,   49,   50,   50,   51,   51,   52,   52,   53,   53,   54,
         54,   55,   55,   56,   57,   57,   58,   59,   59,   60,   61,   61,   62,   63,   63,   64,   64,   65,   65,   66,
         66,   67,   68,   68,   69,   70,   70,   71,   72,   72,   73,   74,   74,   75,   76,   76,   77,   78,   78,   79,
         79,   80,   80,   81,   82,   82,   83,   83,   83,   84,   84,   85,   85,   86,   86,   87,   87,   88,   89,   89,
         90,   91,   91,   92,   93,   93,   94,   94,   95,   96,   96,   97,   97,   98,   99,   99,  100,  100,  101,  101,
        102,  102,  102,  103,  103,  104,  104,  105,  106,  106,  107,  108,  108,  109,  110,  110,  111,  112,  112,  113,
        114,  114,  115,  116,  116,  117,  117,  118,  118,  118,  119,  120,  120,  121,  121,  122,  123,  123,  124,  125,
        125,  126,  127,  127,  128,  129,  129,  130,  130,  131,  131,  132,  132,  133,  133,  134,  134,  135,  135,  136,
        136,  137,  137,  138,  138,  139,  139,  139,  139,  139,  139,  139,  139,  140,  140,  141,  141,  142,  142,  143,
        143,  143,  144,  144,  144,  144,  144,  144,  144,  144,  145,  146,  146
      };

   // Reduction matrix ...
      ushort Kotlin_ParserTables::Rm[5540] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  347,  347,  350,    0,    0,    0,    0,
        347,  350,  350,  350,  347,    0,  350,    0,  350,  350,  347,  350,  350,  350,    0,  350,    0,  347,  350,    0,
        350,  347,    0,    0,  350,  350,  350,    0,    0,    0,    0,    0,    0,    0,    0,  350,  347,  347,  350,  350,
          0,  347,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,    0,  373,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,  373,  373,    0,    0,    0,    0,    0,    0,    0,    2,  563,  563,
          0,    0,    0,    0,  563,  563,  563,  563,  563,    0,  563,    0,  563,  563,  563,  563,  563,  563,    0,  563,
          0,  563,  563,    0,  563,  563,    0,    0,  563,  563,  563,    0,    0,    0,    0,    0,    0,    0,    0,  563,
        563,  563,  563,  563,    0,  563,    0,    0,    0,  740,    0,    0,    0,    0,    0,    0,    0,  740,  740,    0,
          0,    0,    0,  740,  740,  740,    0,  354,    0,    0,  740,    0,    0,  354,    0,  740,    0,    0,    0,    0,
          0,  740,    0,    0,    0,    0,    0,    0,    0,    0,  354,    0,    0,  740,    0,    0,    0,    0,    0,    0,
        741,    0,    0,    0,    0,    0,    0,    0,  741,  741,    0,    0,    0,    0,  741,  741,  741,    0,  355,    0,
          0,  741,    0,    0,  355,    0,  741,    0,    0,    0,    0,    0,  741,    0,    0,    0,    0,    0,    0,    0,
          0,  355,    0,    0,  741,    0,    0,    0,    0,    0,    0,  619,    0,    0,    0,    0,    0,    0,    0,    0,
        373,    0,  619,    0,    0,    0,    0,  619,    0,    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  373,  373,    0,    0,    0,    0,    0,    0,
          0,  376,    0,    0,    0,    0,    0,  376,    0,  376,  376,    0,    0,    0,    0,  376,  376,  376,    0,  376,
          0,    0,  376,    0,    0,  376,    0,  376,    0,    0,  343,    0,  376,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  376,    0,    0,  376,    0,  343,  376,    0,    0,    0,  376,    0,    0,    0,    0,    0,  376,    0,
        376,  376,    0,    0,    0,    0,  376,  376,  376,    0,  376,    0,    0,  376,    0,    0,  376,    0,  376,  343,
          0,  343,    0,  376,    0,    0,    0,    0,    0,    0,    0,    0,    0,  376,    0,    0,  376,    0,  343,  376,
          0,    0,    0,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,    0,  534,  534,  534,  534,
        534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  343,  534,  534,  534,  534,  534,  534,
        534,  534,  534,  534,  534,  534,  534,  534,  534,  534,  343,  534,  534,    0,  534,    0,    0,  248,  562,    0,
          0,    0,    0,  248,  562,  248,  248,  562,    0,  562,    0,  248,  248,  248,  562,  248,  562,    0,  248,    0,
        562,  248,    0,  248,  562,    0,    0,  562,  248,  562,    0,    0,    0,    0,    0,    0,    0,    0,  248,  562,
        562,  248,  562,    0,  248,    0,    0,    0,  138,    0,    0,    0,    0,  121,    0,    0,  138,  138,    0,    0,
        138,    0,  138,  138,  138,  138,  138,    0,  138,  138,    0,    0,  138,    0,  138,    0,    0,  138,  138,  138,
        138,    0,    0,  138,    0,    0,    0,    0,    0,  138,    0,    0,  138,    0,  138,  138,    0,    0,    0,  711,
        619,  619,  711,  711,  711,    0,  619,  619,  619,  619,  711,    0,  619,  711,  619,  619,  619,  619,  619,    0,
        711,  619,  711,  619,  619,  711,  619,  711,  711,  711,  619,  619,  619,  711,    0,  711,  711,  711,  711,  711,
        711,  619,  711,  711,  619,  711,  711,  619,    0,    0,  711,    0,  617,  617,  617,  124,  617,  617,    0,  617,
        617,  617,  617,  617,    0,  617,  617,  617,  617,  617,  617,  617,    0,  617,  617,  617,  617,  617,  617,  617,
        617,  617,  617,  617,  617,  617,  617,    0,  617,  617,  617,  124,  617,  617,  617,  617,  617,  617,  617,  124,
        617,    0,    0,  617,    0,    0,  250,    0,    0,    0,    0,  300,  250,    0,  300,  300,  250,    0,  300,    0,
        300,  300,  250,  300,  300,    0,  300,  300,    0,  250,  300,    0,  300,  250,    0,  300,  300,  300,  300,    0,
          0,  300,    0,    0,    0,    0,    0,  300,  250,  250,  300,    0,  250,  250,    0,  300,    0,    0,  251,    0,
          0,    0,    0,  321,  251,    0,  321,  321,  251,    0,  321,    0,  321,  321,  251,  321,  321,    0,  321,  321,
          0,  251,  321,    0,  321,  251,    0,  321,  321,  321,  321,    0,    0,  321,    0,    0,    0,    0,    0,  321,
        251,  251,  321,    0,  251,  251,    0,  321,    0,    0,  252,    0,    0,    0,    0,  292,  252,    0,  292,  292,
        252,    0,  292,    0,  292,  292,  252,  292,  292,    0,  292,  292,    0,  252,  292,    0,  292,  252,    0,  292,
        292,  292,  292,    0,    0,  292,    0,    0,    0,    0,    0,  292,  252,  252,  292,    0,  252,  252,    0,  292,
          0,    0,  253,    0,    0,    0,    0,  298,  253,    0,  298,  298,  253,    0,  298,    0,  298,  298,  253,  298,
        298,    0,  298,  298,    0,  253,  298,    0,  298,  253,    0,  298,  298,  298,  298,    0,    0,  298,    0,    0,
          0,    0,    0,  298,  253,  253,  298,    0,  253,  253,    0,  298,    0,    0,  254,    0,    0,    0,    0,  309,
        254,    0,  309,  309,  254,    0,  309,    0,  309,  309,  254,  309,  309,    0,  309,  309,    0,  254,  309,    0,
        309,  254,    0,  309,  309,  309,  309,    0,    0,  309,    0,    0,    0,    0,    0,  309,  254,  254,  309,    0,
        254,  254,    0,  309,    0,    0,  255,    0,    0,    0,    0,  337,  255,    0,  337,  337,  255,    0,  337,    0,
        337,  337,  255,  337,  337,    0,  337,  337,    0,  255,  337,    0,  337,  255,    0,  337,  337,  337,  337,    0,
          0,  337,    0,    0,    0,    0,    0,  337,  255,  255,  337,    0,  255,  255,    0,  337,    0,    0,  256,    0,
          0,    0,    0,  316,  256,    0,  316,  316,  256,    0,  316,    0,  316,  316,  256,  316,  316,    0,  316,  316,
          0,  256,  316,    0,  316,  256,    0,  316,  316,  316,  316,    0,    0,  316,    0,    0,    0,    0,    0,  316,
        256,  256,  316,    0,  256,  256,    0,  316,    0,    0,  257,    0,    0,    0,    0,  311,  257,    0,  311,  311,
        257,    0,  311,    0,  311,  311,  257,  311,  311,    0,  311,  311,    0,  257,  311,    0,  311,  257,    0,  311,
        311,  311,  311,    0,    0,  311,    0,    0,    0,    0,    0,  311,  257,  257,  311,    0,  257,  257,    0,  311,
          0,    0,  258,    0,    0,    0,    0,  319,  258,    0,  319,  319,  258,    0,  319,    0,  319,  319,  258,  319,
        319,    0,  319,  319,    0,  258,  319,    0,  319,  258,    0,  319,  319,  319,  319,    0,    0,  319,    0,    0,
          0,    0,    0,  319,  258,  258,  319,    0,  258,  258,    0,  319,    0,    0,  259,    0,    0,    0,    0,  317,
        259,    0,  317,  317,  259,    0,  317,    0,  317,  317,  259,  317,  317,    0,  317,  317,    0,  259,  317,    0,
        317,  259,    0,  317,  317,  317,  317,    0,    0,  317,    0,    0,    0,    0,    0,  317,  259,  259,  317,    0,
        259,  259,    0,  317,    0,    0,  260,    0,    0,    0,    0,  310,  260,    0,  310,  310,  260,    0,  310,    0,
        310,  310,  260,  310,  310,    0,  310,  310,    0,  260,  310,    0,  310,  260,    0,  310,  310,  310,  310,    0,
          0,  310,    0,    0,    0,    0,    0,  310,  260,  260,  310,    0,  260,  260,    0,  310,    0,    0,  261,    0,
          0,    0,    0,  318,  261,    0,  318,  318,  261,    0,  318,    0,  318,  318,  261,  318,  318,    0,  318,  318,
          0,  261,  318,    0,  318,  261,    0,  318,  318,  318,  318,    0,    0,  318,    0,    0,    0,    0,    0,  318,
        261,  261,  318,    0,  261,  261,    0,  318,    0,    0,  268,    0,    0,    0,    0,  322,  268,    0,  322,  322,
        268,    0,  322,    0,  322,  322,  268,  322,  322,    0,  322,  322,    0,  268,  322,    0,  322,  268,    0,  322,
        322,  322,  322,    0,    0,  322,    0,    0,    0,    0,    0,  322,  268,  268,  322,    0,  268,  268,    0,  322,
          0,    0,  269,    0,    0,    0,    0,  314,  269,    0,  314,  314,  269,    0,  314,    0,  314,  314,  269,  314,
        314,    0,  314,  314,    0,  269,  314,    0,  314,  269,    0,  314,  314,  314,  314,    0,    0,  314,    0,    0,
          0,    0,    0,  314,  269,  269,  314,    0,  269,  269,    0,  314,    0,    0,  270,    0,    0,    0,    0,  306,
        270,    0,  306,  306,  270,    0,  306,    0,  306,  306,  270,  306,  306,    0,  306,  306,    0,  270,  306,    0,
        306,  270,    0,  306,  306,  306,  306,    0,    0,  306,    0,    0,    0,    0,    0,  306,  270,  270,  306,    0,
        270,  270,    0,  306,    0,    0,  271,    0,    0,    0,    0,  308,  271,    0,  308,  308,  271,    0,  308,    0,
        308,  308,  271,  308,  308,    0,  308,  308,    0,  271,  308,    0,  308,  271,    0,  308,  308,  308,  308,    0,
          0,  308,    0,    0,    0,    0,    0,  308,  271,  271,  308,    0,  271,  271,    0,  308,    0,    0,  272,    0,
          0,    0,    0,  301,  272,    0,  301,  301,  272,    0,  301,    0,  301,  301,  272,  301,  301,    0,  301,  301,
          0,  272,  301,    0,  301,  272,    0,  301,  301,  301,  301,    0,    0,  301,    0,    0,    0,    0,    0,  301,
        272,  272,  301,    0,  272,  272,    0,  301,    0,    0,  273,    0,    0,    0,    0,  336,  273,    0,  336,  336,
        273,    0,  336,    0,  336,  336,  273,  336,  336,    0,  336,  336,    0,  273,  336,    0,  336,  273,    0,  336,
        336,  336,  336,    0,    0,  336,    0,    0,    0,    0,    0,  336,  273,  273,  336,    0,  273,  273,    0,  336,
          0,    0,  274,    0,    0,    0,    0,  335,  274,    0,  335,  335,  274,    0,  335,    0,  335,  335,  274,  335,
        335,    0,  335,  335,    0,  274,  335,    0,  335,  274,    0,  335,  335,  335,  335,    0,    0,  335,    0,    0,
          0,    0,    0,  335,  274,  274,  335,    0,  274,  274,    0,  335,    0,    0,  275,    0,    0,    0,    0,  291,
        275,    0,  291,  291,  275,    0,  291,    0,  291,  291,  275,  291,  291,    0,  291,  291,    0,  275,  291,    0,
        291,  275,    0,  291,  291,  291,  291,    0,    0,  291,    0,    0,    0,    0,    0,  291,  275,  275,  291,    0,
        275,  275,    0,  291,    0,    0,  276,    0,    0,    0,    0,  302,  276,    0,  302,  302,  276,    0,  302,    0,
        302,  302,  276,  302,  302,    0,  302,  302,    0,  276,  302,    0,  302,  276,    0,  302,  302,  302,  302,    0,
          0,  302,    0,    0,    0,    0,    0,  302,  276,  276,  302,    0,  276,  276,    0,  302,    0,    0,  277,    0,
          0,    0,    0,  313,  277,    0,  313,  313,  277,    0,  313,    0,  313,  313,  277,  313,  313,    0,  313,  313,
          0,  277,  313,    0,  313,  277,    0,  313,  313,  313,  313,    0,    0,  313,    0,    0,    0,    0,    0,  313,
        277,  277,  313,    0,  277,  277,    0,  313,    0,    0,  278,    0,    0,    0,    0,  324,  278,    0,  324,  324,
        278,    0,  324,    0,  324,  324,  278,  324,  324,    0,  324,  324,    0,  278,  324,    0,  324,  278,    0,  324,
        324,  324,  324,    0,    0,  324,    0,    0,    0,    0,    0,  324,  278,  278,  324,    0,  278,  278,    0,  324,
          0,    0,  279,    0,    0,    0,    0,  312,  279,    0,  312,  312,  279,    0,  312,    0,  312,  312,  279,  312,
        312,    0,  312,  312,    0,  279,  312,    0,  312,  279,    0,  312,  312,  312,  312,    0,    0,  312,    0,    0,
          0,    0,    0,  312,  279,  279,  312,    0,  279,  279,    0,  312,    0,    0,  280,    0,    0,    0,    0,  297,
        280,    0,  297,  297,  280,    0,  297,    0,  297,  297,  280,  297,  297,    0,  297,  297,    0,  280,  297,    0,
        297,  280,    0,  297,  297,  297,  297,    0,    0,  297,    0,    0,    0,    0,    0,  297,  280,  280,  297,    0,
        280,  280,    0,  297,    0,    0,  282,    0,    0,    0,    0,  333,  282,    0,  333,  333,  282,    0,  333,    0,
        333,  333,  282,  333,  333,    0,  333,  333,    0,  282,  333,    0,  333,  282,    0,  333,  333,  333,  333,    0,
          0,  333,    0,    0,    0,    0,    0,  333,  282,  282,  333,    0,  282,  282,    0,  333,    0,    0,  283,    0,
          0,    0,    0,  334,  283,    0,  334,  334,  283,    0,  334,    0,  334,  334,  283,  334,  334,    0,  334,  334,
          0,  283,  334,    0,  334,  283,    0,  334,  334,  334,  334,    0,    0,  334,    0,    0,    0,    0,    0,  334,
        283,  283,  334,    0,  283,  283,    0,  334,    0,  677,  677,  677,  677,  677,  677,    0,  677,  677,  677,  677,
        677,  343,  677,  677,  677,  677,  677,  677,  677,    0,  677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
        677,  677,  677,  677,    0,  677,  677,  677,  677,  677,  677,  677,  677,  677,  677,  677,  343,  677,    0,    0,
        677,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  550,    0,    0,    0,    0,
          0,    0,    0,  550,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  527,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  527,    0,  527,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  526,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        526,    0,  526,    0,    0,  418,  668,    0,  665,    0,    0,  418,  668,  418,  418,  668,    0,  668,    0,  418,
        418,  418,  668,  418,  668,    0,  418,    0,  668,  418,    0,  418,  668,    0,    0,  668,    0,  668,    0,    0,
          0,    0,  668,    0,    0,  668,  418,  668,  668,  418,  668,    0,  418,    0,    0,  668,    0,  440,  440,  440,
        440,  440,  440,    0,  440,  440,  440,  440,  440,    0,  440,  440,  440,  440,  440,  440,  440,    0,  440,  440,
        440,  440,  440,  440,  440,  440,  440,  440,  343,  440,  440,  440,    0,  440,  440,  440,  440,  440,  440,  440,
        440,  440,  440,  440,  343,  440,    0,    0,  440,    0,    0,  619,  619,    0,    0,    0,    0,  619,  619,  619,
        619,    0,    0,  619,    0,  619,  619,  619,  619,  619,    0,    0,  619,    0,  619,  619,    0,  619,    0,    0,
          0,  619,  619,  619,    0,    0,    0,    0,    0,    0,  654,    0,  619,    0,    0,  619,    0,    0,  619,    0,
          0,    0,  376,  376,  376,  376,  376,  376,    0,  376,  376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
        376,  376,    0,  376,  376,  376,  376,  376,  376,  376,  376,  376,  343,  376,  376,  376,  376,    0,  376,  376,
        376,  376,  376,  376,  376,  376,  376,  376,  376,  343,  376,    0,    0,  376,    0,    0,    0,    0,    0,    0,
          0,  376,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  343,    0,    0,    0,    0,  387,  387,  387,  387,  387,  387,    0,  387,  387,  387,  387,  387,  343,
        387,  387,  387,  387,  387,  387,  387,    0,  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
        387,  387,    0,  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,  343,  387,    0,    0,  387,    0,
          0,  646,  646,    0,    0,    0,    0,    0,  646,  646,  646,    0,    0,  646,    0,  646,  646,  646,  646,  646,
          0,    0,  646,    0,  646,  646,    0,  646,    0,    0,    0,  646,  646,  646,  646,    0,    0,    0,    0,  644,
          0,    0,  646,    0,    0,  646,    0,    0,    0,    0,    0,    0,  138,    0,    0,    0,    0,    0,  138,    0,
        138,  138,    0,    0,  138,    0,  138,  138,  138,  138,  138,    0,  138,  138,    0,    0,  138,    0,  138,    0,
          0,  138,  138,  138,  138,    0,    0,  138,    0,    0,  121,    0,    0,  138,    0,    0,  138,    0,  121,  138,
          0,    0,    0,  563,  563,    0,    0,    0,    0,  563,  563,  563,  563,  563,    0,  563,    0,  563,  563,  563,
        563,  563,  563,    0,  563,    0,  563,  563,    0,  563,  563,    0,    0,  563,  563,  563,    0,    0,    0,    0,
        559,    0,    0,  559,  563,  563,  563,  563,  563,  559,  563,    0,    0,  559,    0,    0,    0,    0,    0,  428,
          0,    0,    0,    0,    0,    0,    0,  343,    0,  428,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  343,    0,    0,    0,    0,  691,  691,    0,    0,    0,    0,  418,  691,  691,  691,    0,    0,  691,
          0,  691,  691,  691,  691,  691,    0,    0,  691,    0,  691,  691,    0,  691,    0,    0,    0,  691,  691,  691,
          0,    0,    0,    0,    0,    0,    0,    0,  691,  418,    0,  691,    0,  418,  418,    0,    0,    0,  384,  343,
        384,  384,  384,  384,    0,  343,  384,  384,  384,  384,  384,  384,  384,  384,  343,  343,  384,  384,    0,  384,
        384,  384,  384,  384,  384,  384,  384,  384,  384,  384,  343,  384,  384,    0,  384,  384,  384,  384,  384,  384,
        384,  384,  384,  384,  384,  343,  343,    0,    0,  384,    0,  390,  390,  390,  390,  390,  390,  390,  390,  390,
        390,  390,  390,    0,  390,  390,  390,  390,  390,  390,  390,    0,  390,  390,  390,  390,  390,  390,  390,  390,
        390,  390,  390,  390,  390,  390,    0,  390,  390,  390,  390,  390,  390,  390,  390,  390,  343,  390,  343,  390,
          0,    0,  390,    0,  634,  632,  634,  634,  634,  634,    0,  632,  634,  632,  632,  634,    0,  634,  634,  632,
        632,  632,  634,  632,    0,  634,  632,  634,  634,  632,  634,  632,  634,  634,  634,  632,  634,  634,  634,    0,
        634,  634,  634,  634,  634,  634,  632,  634,  634,  632,  634,  632,  632,    0,    0,  634,    0,    0,    0,    0,
          0,  403,    0,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,  343,    0,    0,    0,    0,  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
        428,  343,  428,  428,  428,  428,  428,  428,  428,    0,  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
        428,  428,  428,  428,    0,  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,  343,  428,    0,    0,
        428,    0,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,    0,  522,  522,  522,  522,  522,
        522,  522,    0,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,    0,  522,  522,
        522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  522,  527,    0,  522,    0,  524,  524,  524,  524,  524,
        524,  524,  524,  524,  524,  524,  524,    0,  524,  524,  524,  524,  524,  524,  524,    0,  524,  524,  524,  524,
        524,  524,  524,  524,  524,  524,  524,  524,  524,  524,    0,  524,  524,  524,  524,  524,  524,  524,  524,  524,
        524,  524,  524,  524,  526,    0,  524,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,  403,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,
        705,  705,  705,  705,  705,  705,    0,  705,  705,  705,  343,  705,    0,  705,  705,  705,  705,  705,  705,  705,
          0,  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,    0,  705,  705,  705,  705,
        705,  705,  705,  705,  705,  705,  705,  343,  705,    0,    0,  705,    0,    0,  563,  563,    0,    0,    0,    0,
        563,  563,  563,  563,  563,    0,  563,    0,  563,  563,  563,  563,  563,  563,    0,  563,    0,  563,  563,    0,
        563,  563,    0,    0,  563,  563,  563,    0,    0,    0,    0,  559,    0,    0,  559,  563,  563,  563,  563,  563,
          0,  563,    0,    0,  559,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  373,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  397,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  465,  465,
        465,  465,  465,  465,  343,  465,  465,  343,  465,  465,    0,  465,  465,  465,  465,  465,  465,  465,    0,  465,
        465,  465,  465,  465,  465,  465,  465,  465,  465,  465,  465,  465,  465,    0,  465,  465,  465,  465,  465,  465,
        465,  465,  465,  465,  465,  343,  465,    0,    0,  465,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  403,    0,    0,    0,    0,    0,    0,    0,  343,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  403,    0,    0,
          0,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,  448,    0,    0,    0,    0,    0,    0,    0,
        448,  448,    0,    0,    0,    0,  448,  448,    0,    0,  448,    0,    0,  448,    0,    0,  448,    0,  448,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  492,    0,    0,  448,    0,    0,  448,    0,    0,    0,
          0,    0,    0,  390,  390,  390,  390,  390,  390,    0,  390,  390,  390,  390,  390,    0,  390,  390,  390,  390,
        390,  390,  390,    0,  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,    0,  390,
        390,  390,  390,  390,  390,  390,  390,  390,  343,  390,  343,  390,    0,    0,  390,    0,    0,  343,    0,    0,
        402,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,    0,    0,  343,    0,
          0,  343,    0,  343,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,
          0,  343,    0,  343,  343,    0,    0,    0,  454,  454,  454,  454,  454,  454,  343,  454,  454,  454,  454,  454,
          0,  454,  454,  454,  454,  454,  454,  454,    0,  454,  454,  454,  454,  454,  454,  454,  454,  454,  454,  343,
        454,  454,  454,    0,  454,  454,  454,  454,  454,  454,  454,  454,  454,  454,  454,  343,  454,    0,    0,  454,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  545,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  520,    0,    0,    0,    0,    0,    0,
        545,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,    0,  373,  373,    0,
          0,    0,    0,    0,    0,    0,  373,    0,    0,    0,  373,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         33,    0,    0,    0,    0,  373,  373,    0,    0,   33,    0,    0,    0,    0,  343,  343,    0,    0,    0,    0,
        343,  343,  343,  343,    0,    0,  343,    0,  343,  343,  343,  343,  343,    0,    0,  343,    0,  343,  343,    0,
        343,    0,    0,    0,  343,  343,  343,    0,    0,    0,    0,    0,    0,  402,    0,  343,    0,    0,  343,    0,
        343,  343,    0,    0,    0,  394,  394,  394,  394,  394,  394,    0,  394,  394,  394,  394,  394,    0,  394,  394,
        394,  394,  394,  394,  394,    0,  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,  343,  394,  394,  394,
          0,  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,  343,  394,    0,    0,  394,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,  428,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  428,    0,    0,    0,    0,
          0,    0,    0,    0,    0,  343,    0,    0,    0,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,  343,
          0,    0,  343,    0,  343,  343,  343,  343,  343,    0,    0,  343,    0,  343,  343,    0,  343,    0,    0,    0,
        343,  343,  343,  343,    0,    0,    0,    0,  402,    0,    0,  343,    0,    0,  343,    0,  343,  343,    0,    0,
          0,  343,    0,    0,    0,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,
          0,    0,  343,    0,    0,  343,  343,  343,    0,    0,    0,    0,  343,    0,  343,    0,    0,  402,    0,    0,
          0,    0,  343,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,
          0,    0,    0,    0,  413,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  413,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,
          0,    0,  619,  619,    0,    0,    0,    0,  619,  619,  619,  619,    0,    0,  619,    0,  619,  619,  619,  619,
        619,    0,    0,  619,    0,  619,  619,    0,  619,    0,    0,    0,  619,  619,  619,    0,    0,    0,    0,  343,
          0,    0,    0,  619,    0,    0,  619,    0,  343,  619,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        373,  373,    0,    0,    0,    0,  373,  373,    0,    0,  373,    0,    0,  373,    0,    0,  373,    0,  373,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  406,    0,    0,  373,  373,  373,  373,    0,    0,    0,
          0,    0,    0,  470,    0,  470,  470,  470,  470,    0,    0,  470,  470,  470,  470,    0,  470,  470,  470,  470,
          0,  470,  470,    0,  470,  470,  470,  470,  373,  470,  470,  470,  470,  470,  470,  470,  470,  470,    0,  470,
        470,  470,  470,  470,  470,  373,  470,  470,  470,  470,    0,    0,    0,    0,  470,    0,    0,  343,    0,    0,
          0,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,    0,    0,  343,    0,
          0,  343,  343,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,    0,    0,  343,    0,
          0,  343,    0,  343,  343,    0,    0,    0,  448,    0,    0,    0,    0,    0,    0,    0,  448,  448,    0,    0,
          0,    0,  448,  448,    0,    0,  448,    0,    0,  448,    0,    0,  448,    0,  448,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  446,    0,    0,  448,    0,    0,  448,    0,    0,    0,    0,    0,    0,  343,
          0,    0,    0,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,    0,    0,
        343,    0,    0,  343,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
        343,    0,    0,  343,    0,  343,  343,    0,    0,    0,  563,  563,    0,    0,    0,    0,  563,  563,  563,  563,
        563,    0,  563,    0,  563,  563,  563,  563,  563,  563,    0,  563,  573,  563,  563,    0,  563,  563,    0,    0,
          0,  563,  563,    0,    0,    0,    0,    0,    0,    0,    0,  563,  563,  563,  563,  563,    0,  563,    0,    0,
          0,  473,  343,  473,  473,  473,  473,    0,  343,  473,  473,  473,  473,    0,  473,  473,  473,  473,  343,  473,
        473,    0,  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,  473,    0,  473,  473,  473,
        473,  473,  343,  343,  473,  473,  473,  473,  343,  343,    0,    0,  343,    0,  478,  343,  478,  478,  478,  478,
          0,  343,  478,  478,  478,  478,    0,  478,  478,  478,  478,  343,  478,  478,    0,  478,  478,  478,  478,  343,
        478,  478,  478,  478,  478,  478,  478,  478,  478,    0,  478,  478,  478,  478,  478,  343,  478,  478,  478,  478,
        478,  343,  343,    0,    0,  343,    0,  687,  687,  687,  687,  687,  687,    0,  687,  687,  687,  687,  687,    0,
        687,  687,  687,  687,  687,  687,  687,    0,  687,  687,  574,  687,  687,  687,  687,  687,  687,  687,  687,  687,
        687,  687,    0,  687,  687,  687,  687,  687,  574,  687,  687,  687,  687,  687,  574,  687,    0,    0,  687,    0,
        573,  563,  563,  573,  573,  573,    0,  563,  563,  563,  563,  563,    0,  563,  573,  563,  563,  563,  563,  563,
        563,  573,  563,  573,  563,  563,  573,  563,  563,  573,  573,    0,  563,  563,  573,    0,  573,  573,  573,  573,
        573,  573,  563,  563,  563,  563,  563,    0,  563,    0,    0,  573,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  515,  515,  434,    0,    0,    0,  434,  434,    0,    0,  515,    0,    0,  515,    0,  434,  515,    0,
        434,  434,    0,    0,    0,    0,    0,    0,    0,    0,    0,  434,    0,    0,  504,  515,  434,  434,  515,    0,
          0,    0,    0,    0,    0,  483,  483,  483,  483,  483,  483,    0,  483,  483,  483,  483,  483,    0,  483,  483,
        483,  483,  483,  483,  483,    0,  483,  483,  483,  483,  483,  483,  483,  483,  483,  483,  483,  343,  483,  483,
          0,  483,  483,  483,  483,  483,  483,  483,  483,  483,  483,  483,  343,  483,    0,    0,  483,    0,  486,  486,
        486,  486,  486,  486,    0,  486,  486,  486,  486,  486,    0,  486,  486,  486,  486,  486,  486,  486,    0,  486,
        486,  486,  486,  486,  486,  486,  486,  486,  486,  486,  343,  486,  486,    0,  486,  486,  486,  486,  486,  486,
        486,  486,  486,  486,  486,  343,  486,    0,    0,  486,    0,    0,  343,    0,    0,    0,    0,    0,  343,    0,
        343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,    0,    0,  343,    0,    0,  343,    0,  343,    0,
          0,    0,    0,  343,    0,    0,    0,    0,    0,    0,  402,    0,    0,  343,    0,    0,  343,    0,  343,  343,
          0,    0,    0,  343,    0,    0,    0,    0,    0,  437,    0,  343,  343,  437,  437,    0,    0,  343,  343,  343,
          0,  343,    0,    0,  343,    0,  437,  343,    0,  343,  437,    0,    0,  437,    0,    0,    0,    0,    0,    0,
        437,    0,    0,  437,  343,  437,  437,  343,    0,  343,  437,    0,    0,  437,    0,    0,  498,    0,    0,    0,
          0,    0,  498,    0,    0,    0,  498,  343,    0,    0,  498,  498,  498,    0,    0,    0,    0,    0,    0,  498,
          0,    0,  498,  498,    0,    0,  498,    0,    0,    0,    0,    0,    0,  498,    0,    0,  498,    0,  498,  498,
          0,    0,  343,  498,    0,    0,  498,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  507,    0,    0,  343,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,
        387,    0,    0,    0,    0,    0,  387,    0,    0,    0,  387,  343,    0,    0,  387,  387,  387,    0,    0,    0,
          0,    0,    0,  387,    0,    0,  387,  387,    0,    0,  387,    0,    0,    0,    0,    0,    0,  387,    0,    0,
        387,    0,  387,  387,    0,    0,  343,  387,    0,    0,  387,    0,    0,  343,  343,    0,  402,    0,    0,  343,
        343,  343,  343,    0,    0,  343,    0,  343,  343,  343,  343,  343,    0,    0,  343,    0,  343,  343,  343,  343,
          0,  343,    0,  343,  343,  343,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,  343,    0,  343,
        343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  518,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  518,  343,    0,    0,    0,    0,    0,
        518,    0,    0,  518,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0,    0,  343,    0,  343,  343,    0,
          0,    0,    0,  343,  343,  343,    0,  343,    0,    0,  343,    0,    0,  343,    0,  343,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,  402,    0,    0,  343,  343,  343,  343,    0,  343,  343,    0,    0,    0,
        440,    0,    0,    0,    0,    0,  440,    0,    0,    0,  440,    0,    0,    0,  440,  440,  440,    0,    0,    0,
          0,    0,    0,  440,    0,    0,  440,  440,    0,    0,  343,    0,    0,    0,    0,    0,    0,  440,    0,    0,
        440,    0,  440,  440,    0,    0,  343,  440,    0,    0,  440,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  440,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,  343,    0,    0,    0,    0,    0,    0,  440,    0,    0,  440,    0,    0,    0,    0,    0,  343,
          0,    0,    0,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,  343,  343,  343,    0,  343,    0,    0,
        343,    0,    0,  343,    0,  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  513,    0,    0,  513,
        343,    0,    0,  343,    0,  343,  343,    0,    0,    0,    0,    0,    0,    0,  428,    0,    0,    0,    0,    0,
        343,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  428,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  343,    0,    0,    0,    0
      };

   // Reduction matrix row ...
      short Kotlin_ParserTables::Rr[670] = 
      {
        341,    0,  343,    0,  345,    3,  363,  365,    0,    0,  -52,    6,  343,  360,  751, -104, -156,    0,    0,  343,
        338,  371,  379,  244,  343,    0,  343,    0,  343, -207, -258,    0, -308,  369,  343,   92,    0,   94,  343,    0,
       -359,  343, -410,  343,  284,  289,  531, -462,    0,  739,  343,  246, -515,  343,    0,  343,  621, -566,    0,    0,
        247, -618,    0, -671,  713,  584,  587,  590,  593,  595,  599,  602,  605,  608,  611,  614, -724, -776, -828, -880,
       -932, -984,-1036,-1088,-1140,-1192,-1244,-1296,-1348,-1400,-1452,-1504,-1556,-1608,-1660,-1712,-1764,-1816,-1868,-1920,
      -1972,-2024,-2076,  343,  658,  663,  343,  343,-2128,  343,  680,  343,  343,  343,  343,  343,  343,  343,  360,    0,
          0,    0,    0,    0,  343,    0,    0,  343,  378,    0,  343,   67,    0,    0,    0,  619,  343,    0,  343,  343,
        114,  343,  343,-2181,  343,-2232,  343,   63,  343,  617,  109,  138,  111,  343,  343,  336,   97,   98,   99,  100,
        101,  102,  103,  105,  106,  107,  108,  249,  619,    0,    0,-2283,  343,  520,-2336,    0,-2389,  683,  343,    0,
        693,    0,  619,    0,    0,  563,  343,    0,-2441,  343,  520,  343,-2494,  343,-2546,-2599,    0,    0,    0,  536,
        619,  116,  631,    0,   81,    0,    0,  520,    0,  113,  619,    0,    0,  343,  343,  343,  343,    0,  343,  343,
        343,  343,  343,-2650,  343,  343,  343,  171,  343,-2701,  343,  671,  343,-2754,  343,    0,  343,    0,    0,  343,
          0,  624,    0,  520,  343,  343,-2805,  343,  343,  418,  619,  343,    4,    0,-2857,-2910,  418,  343,  425,  343,
          0,-2336,    0,    0,  641,  343,  343,  638,  520,   71,  343,  624,  418,-2963,   64,  343,  343,  343,  343,  619,
        619,  619,  520,  343,    0,  619,  619,  619,  619,    0,    0,    0,  619,  619,  343,  371,  556,    0,-3016,    0,
          0,  418,-3068,  343,    0,-3121,-3174,    0,  343,  343,  418,-3227,  343,  619,    0,  619,  343,-3279,    0,-3332,
        418,    0,    0,-2546,-3385,-3437,    0,    0,  423,  343,  264,  343,  343,    0,  343,  343,-3490,  649,    0,-3539,
         72,-3227,  635,    0,  520,  619,  619,  619,  343,  343,    0,  558,  343,    0,-3068,  343,  457,-2910,-3590,  343,
        343,    0,  434,  343,  416,  343,    0,  343,    0,  343,  343,    0,    0,    0,  343,  343,  343,    0,  343,  343,
      -3642,    0,    0,  468,    0,  343,-3539,    0,  265,  266,  343,    0,  418,    0,  343,  651,  343,  343,    0,  343,
        343,    0,    0,    0,  563,  667,-3695,  520,-3490,-3747,  343,  489,    0,  245,    0,-3800,  343,  343,-3841,  676,
         21,  520,-3892,  653,    0,  696,  343,    0,    0,    0,  619,  563,    0,-3944,  343,  343,  343,    0,  343,  343,
        418,  343,    0,-3997,  520,-3068,  343,-4048,  643,  343,    0,    0,-4099,    0,    0,  418,  343,    0,    0,    0,
      -3490,-4149,  343,  343,  548,  343,  540,    0,  371,  379,  343,    0,   24,  343,   25,  619,  343,-4200,  418,  418,
          0,  619,    0,-4250,  396,-4302,  619,  619,  431,    0,    0,-4355,-2910,-4406,  646,  619,  343,  536,    0,-4457,
        343,    0,    0,  495,  520,-3490,    0,  343,  343,    0,  343,    0,-4508,    0,  343,  699,  343,  343,  343,  343,
          0,  343,    0,  343,  343,  400,  410,-4560,    0,-4613,   31,  343,  425,-3747,  343,  443,    0,  648,  418,  619,
      -4457,  343,  343,  343,    0,  343,    0,    0,  418,  343,-4666,  343,  695,-3016,  619,  520,    0,    0,    0,-4719,
      -4772,    0,-3490,  343,  360,-4824,-4877,  360,    0,    0,    0,-3490,-4149,  448,  619,  520,    0,-4930,  520,-4981,
      -5034,  619,  685,  343,    0,  343,  343,  520,-5087,  510,    0,  343,    0,    0,  373,  344,    0,    0,  373,  343,
        343,    0,  520,-5138,    0,  343,    0,  343,    0,-5191,  563,  690,-3490,  343,    0,  343,-5241,  514,-5287,    0,
          0,  343,  343,    0,  418,  520,-4457,-5338,  500,  343,    0,  343,  619,  360,    0,    0,    0,  343,  512,-5391,
          0,  373,  343,    0,  448,  448,    0,  343,  563,  343,  434,-5437,  520,-5487,-3490,  343,  563,  360,    0,  515,
      -4149,  343,  343,    0,    0,    0,-5487,  343,    0,    0
      };

   // Reduction matrix column ...
      uchar Kotlin_ParserTables::Rc[155] = 
      {
          0,    1,    2,    2,    3,    4,    2,    5,    6,    7,    6,    8,    9,    9,   10,   11,   12,   13,   14,   15,
         16,    6,    2,   17,    9,    9,   18,    2,   19,   20,    6,    6,    4,   21,   22,    0,    0,   23,   24,    2,
          6,    6,    6,    6,   19,    2,    2,   20,   23,    2,   11,   21,   25,    6,   26,    0,    9,   23,   27,   19,
          2,   28,    2,    2,   29,    2,   30,   31,    2,   32,    6,   33,   34,    6,    4,   35,    4,   18,   25,    2,
          2,   23,    2,   36,   20,    2,   20,    2,    2,   37,    6,   38,   39,   20,   23,    0,    9,    9,   40,   41,
          2,   42,   43,   20,    0,    3,    4,    9,    9,    2,    2,    9,    9,    9,    9,    0,   12,   44,    2,   45,
         18,    9,   46,   47,   48,    0,   49,   50,   51,   52,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
          0,    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,   30,   30,    3,   23
      };

   // Production lengths (minus one) ...
      char Kotlin_ParserTables::PL[753] = 
      {
          1,    5,    5,    1,    6,    0,    0,    3,    1,    1,    8,    0,    0,    0,    0,    0,    8,    1,    4,    4,
          7,    1,    0,    0,    0,    0,    1,    2,    4,    6,    3,    3,    5,    0,    0,    0,    0,    0,    2,    6,
          4,    2,   10,    0,    2,    3,    6,    9,    2,    2,    2,    4,    2,    2,    4,    5,    6,    2,    5,    3,
          3,    1,    0,    0,    2,    0,    0,    1,    1,    1,    0,    0,    1,    0,    5,    6,    4,    1,    4,    1,
          1,    2,    0,    0,    4,    0,    0,    0,    9,    6,    8,    2,    1,    0,    0,    0,    0,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,
          1,    0,    0,    4,    0,    0,    4,    0,    0,    0,    6,    2,    1,    3,    6,    3,    5,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    4,    3,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    2,    2,    0,    0,    0,    4,    0,    0,    0,    4,    5,    2,    0,    1,    6,    0,
          0,    2,    0,    0,    2,    0,    8,    3,    8,    7,    5,    0,    0,    0,    2,    2,    3,   10,    2,    2,
          1,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
          1,    1,    0,    1,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    1,    1,    3,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
          0,   -1,    0,   -1,    1,   -1,    1,   -1,    1,    1,   -1,    1,    0,    1,    0,    0,    0,    1,    2,    0,
         -1,    0,    2,   -1,    0,   -1,    1,    1,    0,   -1,    0,   -1,    0,   -1,    0,    1,   -1,    0,    1,   -1,
          0,    0,    1,    1,   -1,    0,    3,   -1,    0,    1,   -1,    0,    1,    1,   -1,    0,    2,   -1,    0,    3,
         -1,    1,    1,   -1,    0,    2,   -1,    0,    0,    0,   -1,    0,    3,   -1,    0,    3,   -1,    1,   -1,    1,
          0,    0,    3,   -1,    1,   -1,    0,    3,   -1,    0,    3,   -1,    1,    1,   -1,    1,    1,   -1,    0,    1,
         -1,    0,    3,   -1,    1,    2,   -1,    0,   -1,    0,    3,   -1,    0,    1,   -1,    0,    3,   -1,    1,    0,
          0,    1,    2,    0,    1,   -1,    0,    1,   -1,    0,   -1,    0,    2,   -1,    0,   -1,    0,    2,   -1,    0,
          1,    1,    6,   -1,    0,    9,   -1,    0,    3,   -1,    1,    2,   -1,    0,    2,   -1,    0,    3,   -1,    0,
         -1,    0,    0,    0,   -1,    0,    3,   -1,    0,    3,   -1,    1,   -1,    0,    1,   -1,    0,    1,   -1,    0,
         -1,    0,    0,    0,    0,    0,    0,    0,    0,    1,    3,   -1,    1,    1,   -1,    0,   -1,    0,    0,    1,
          3,   -1,    0,    0,    0,   -1,    0,    3,   -1,    1,    0,    0,    0,    0,    0,    1,   -1,    1,    1,   -1,
          0,    0,    0,   -1,    1,    0,    0,    0,    0,    0,    0,    0,    0,   -1,    0,    0,    0,    1,    1,    0,
          0,    0,    1,    3,   -1,    1,    3,   -1,    1,    2,   -1,    1,    2,   -1,    1,   -1,    1,    2,    2,   -1,
          1,    3,   -1,    1,    2,   -1,    1,    2,   -1,    1,    2,   -1,    1,    2,   -1,    1,    3,   -1,    1,   -1,
          1,   -1,    1,    3,   -1,    1,    0,    0,    0,   -1,    0,   -1,    0,    1,    0,   -1,    0,    3,   -1,    1,
          3,   -1,    1,    3,   -1,    0,   -1,    0,    3,   -1,    0,   -1,    0,    3,   -1,    0,    0,    0,   -1,    1,
          0,    0,    0,   -1,    1,   -1,    0,    3,   -1,    0,    3,   -1,    1,    3,   -1,    0,    4,   -1,    0,    4,
         -1,    0,    1,   -1,    0,   -1,    0,    0,    6,    0,    7,   -1,    0,   -1,    0,    1,   -1,    1,    3,   -1,
          1,    1,    0,    1,    1,   -1,    0,    1,    1,    0,    0,   -1,    0,   -1,    0,    0,    0,    0,    0,    0,
          1,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    0,    0,    1,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,   -1,    1
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

