
/* CPP5 grammar */

/* Terminal Symbols */

    0  <error>
    1  <eof>
    2  'AUTO'
    3  'DOUBLE'
    4  'INT'
    5  'STRUCT'
    6  'BREAK'
    7  'ELSE'
    8  'LONG'
    9  'SWITCH'
   10  'CASE'
   11  'ENUM'
   12  'REGISTER'
   13  'TYPEDEF'
   14  'CHAR'
   15  'EXTERN'
   16  'RETURN'
   17  'UNION'
   18  'CONST'
   19  'FLOAT'
   20  'SHORT'
   21  'UNSIGNED'
   22  'CONTINUE'
   23  'FOR'
   24  'SIGNED'
   25  'VOID'
   26  'DEFAULT'
   27  'GOTO'
   28  'SIZEOF'
   29  'VOLATILE'
   30  'DO'
   31  'IF'
   32  'STATIC'
   33  'WHILE'
   34  'NEW'
   35  'DELETE'
   36  'THIS'
   37  'OPERATOR'
   38  'CLASS'
   39  'PUBLIC'
   40  'PROTECTED'
   41  'PRIVATE'
   42  'VIRTUAL'
   43  'FRIEND'
   44  'INLINE'
   45  'OVERLOAD'
   46  'IDENTIFIER'
   47  'STRINGliteral'
   48  'FLOATINGconstant'
   49  'INTEGERconstant'
   50  'CHARACTERconstant'
   51  'OCTALconstant'
   52  'HEXconstant'
   53  'TYPEDEFname'
   54  'ARROW'
   55  'ICR'
   56  'DECR'
   57  'LS'
   58  'RS'
   59  'LE'
   60  'GE'
   61  'EQ'
   62  'NE'
   63  'ANDAND'
   64  'OROR'
   65  'ELLIPSIS'
   66  'CLCL'
   67  'DOTstar'
   68  'ARROWstar'
   69  'MULTassign'
   70  'DIVassign'
   71  'MODassign'
   72  'PLUSassign'
   73  'MINUSassign'
   74  'LSassign'
   75  'RSassign'
   76  'ANDassign'
   77  'ERassign'
   78  'ORassign'
   79  '('
   80  ')'
   81  '+'
   82  '-'
   83  '*'
   84  '/'
   85  '%'
   86  '^'
   87  '&'
   88  '|'
   89  '~'
   90  '!'
   91  '<'
   92  '>'
   93  '.'
   94  '['
   95  ']'
   96  ','
   97  '?'
   98  ':'
   99  '='
  100  ';'
  101  '{'
  102  '}'

/* Productions */

    0       Start
        0      : translation_unit <eof> 
               ;

    1       constant
        1      : 'INTEGERconstant' 
        2      | 'FLOATINGconstant' 
        3      | 'OCTALconstant' 
        4      | 'HEXconstant' 
        5      | 'CHARACTERconstant' 
               ;

    2       string_literal_list
        6      : 'STRINGliteral' 
        7      | string_literal_list 'STRINGliteral' 
               ;

    3       paren_identifier_declarator
        8      : scope_opt_identifier 
        9      | scope_opt_complex_name 
       10      | '(' paren_identifier_declarator ')' 
               ;

    4       primary_expression
       11      : global_opt_scope_opt_identifier 
       12      | global_opt_scope_opt_complex_name 
       13      | 'THIS' 
       14      | constant 
       15      | string_literal_list 
       16      | '(' comma_expression ')' 
               ;

    5       non_elaborating_type_specifier
       17      : sue_type_specifier 
       18      | basic_type_specifier 
       19      | typedef_type_specifier 
       20      | basic_type_name 
       21      | 'TYPEDEFname' 
       22      | global_or_scoped_typedefname 
               ;

    6       operator_function_name
       23      : 'OPERATOR' any_operator 
       24      | 'OPERATOR' type_qualifier_list operator_function_ptr_opt 
       25      | 'OPERATOR' non_elaborating_type_specifier operator_function_ptr_opt 
               ;

    7       operator_function_ptr_opt
       26      : 
       27      | unary_modifier operator_function_ptr_opt 
       28      | asterisk_or_ampersand operator_function_ptr_opt 
               ;

    8       any_operator
       29      : '+' 
       30      | '-' 
       31      | '*' 
       32      | '/' 
       33      | '%' 
       34      | '^' 
       35      | '&' 
       36      | '|' 
       37      | '~' 
       38      | '!' 
       39      | '<' 
       40      | '>' 
       41      | 'LS' 
       42      | 'RS' 
       43      | 'ANDAND' 
       44      | 'OROR' 
       45      | 'ARROW' 
       46      | 'ARROWstar' 
       47      | '.' 
       48      | 'DOTstar' 
       49      | 'ICR' 
       50      | 'DECR' 
       51      | 'LE' 
       52      | 'GE' 
       53      | 'EQ' 
       54      | 'NE' 
       55      | assignment_operator 
       56      | '(' ')' 
       57      | '[' ']' 
       58      | 'NEW' 
       59      | 'DELETE' 
       60      | ',' 
               ;

    9       type_qualifier_list_opt
       61      : 
       62      | type_qualifier_list 
               ;

   10       postfix_expression
       63      : primary_expression 
       64      | postfix_expression '[' comma_expression ']' 
       65      | postfix_expression '(' ')' 
       66      | postfix_expression '(' argument_expression_list ')' 
       67      | postfix_expression '.' member_name 
       68      | postfix_expression 'ARROW' member_name 
       69      | postfix_expression 'ICR' 
       70      | postfix_expression 'DECR' 
       71      | 'TYPEDEFname' '(' ')' 
       72      | global_or_scoped_typedefname '(' ')' 
       73      | 'TYPEDEFname' '(' argument_expression_list ')' 
       74      | global_or_scoped_typedefname '(' argument_expression_list ')' 
       75      | basic_type_name '(' assignment_expression ')' 
               ;

   11       member_name
       76      : scope_opt_identifier 
       77      | scope_opt_complex_name 
       78      | basic_type_name 'CLCL' '~' basic_type_name 
       79      | declaration_qualifier_list 'CLCL' '~' declaration_qualifier_list 
       80      | type_qualifier_list 'CLCL' '~' type_qualifier_list 
               ;

   12       argument_expression_list
       81      : assignment_expression 
       82      | argument_expression_list ',' assignment_expression 
               ;

   13       unary_expression
       83      : postfix_expression 
       84      | 'ICR' unary_expression 
       85      | 'DECR' unary_expression 
       86      | asterisk_or_ampersand cast_expression 
       87      | '-' cast_expression 
       88      | '+' cast_expression 
       89      | '~' cast_expression 
       90      | '!' cast_expression 
       91      | 'SIZEOF' unary_expression 
       92      | 'SIZEOF' '(' type_name ')' 
       93      | allocation_expression 
               ;

   14       allocation_expression
       94      : global_opt_scope_opt_operator_new '(' type_name ')' operator_new_initializer_opt 
       95      | global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' type_name ')' operator_new_initializer_opt 
       96      | global_opt_scope_opt_operator_new operator_new_type 
       97      | global_opt_scope_opt_operator_new '(' argument_expression_list ')' operator_new_type 
               ;

   15       global_opt_scope_opt_operator_new
       98      : 'NEW' 
       99      | global_or_scope 'NEW' 
               ;

   16       operator_new_type
      100      : type_qualifier_list operator_new_declarator_opt operator_new_initializer_opt 
      101      | non_elaborating_type_specifier operator_new_declarator_opt operator_new_initializer_opt 
               ;

   17       operator_new_declarator_opt
      102      : 
      103      | operator_new_array_declarator 
      104      | asterisk_or_ampersand operator_new_declarator_opt 
      105      | unary_modifier operator_new_declarator_opt 
               ;

   18       operator_new_array_declarator
      106      : '[' ']' 
      107      | '[' comma_expression ']' 
      108      | operator_new_array_declarator '[' comma_expression ']' 
               ;

   19       operator_new_initializer_opt
      109      : 
      110      | '(' ')' 
      111      | '(' argument_expression_list ')' 
               ;

   20       cast_expression
      112      : unary_expression 
      113      | '(' type_name ')' cast_expression 
               ;

   21       deallocation_expression
      114      : cast_expression 
      115      | global_opt_scope_opt_delete deallocation_expression 
      116      | global_opt_scope_opt_delete '[' comma_expression ']' deallocation_expression 
      117      | global_opt_scope_opt_delete '[' ']' deallocation_expression 
               ;

   22       global_opt_scope_opt_delete
      118      : 'DELETE' 
      119      | global_or_scope 'DELETE' 
               ;

   23       point_member_expression
      120      : deallocation_expression 
      121      | point_member_expression 'DOTstar' deallocation_expression 
      122      | point_member_expression 'ARROWstar' deallocation_expression 
               ;

   24       multiplicative_expression
      123      : point_member_expression 
      124      | multiplicative_expression '*' point_member_expression 
      125      | multiplicative_expression '/' point_member_expression 
      126      | multiplicative_expression '%' point_member_expression 
               ;

   25       additive_expression
      127      : multiplicative_expression 
      128      | additive_expression '+' multiplicative_expression 
      129      | additive_expression '-' multiplicative_expression 
               ;

   26       shift_expression
      130      : additive_expression 
      131      | shift_expression 'LS' additive_expression 
      132      | shift_expression 'RS' additive_expression 
               ;

   27       relational_expression
      133      : shift_expression 
      134      | relational_expression '<' shift_expression 
      135      | relational_expression '>' shift_expression 
      136      | relational_expression 'LE' shift_expression 
      137      | relational_expression 'GE' shift_expression 
               ;

   28       equality_expression
      138      : relational_expression 
      139      | equality_expression 'EQ' relational_expression 
      140      | equality_expression 'NE' relational_expression 
               ;

   29       AND_expression
      141      : equality_expression 
      142      | AND_expression '&' equality_expression 
               ;

   30       exclusive_OR_expression
      143      : AND_expression 
      144      | exclusive_OR_expression '^' AND_expression 
               ;

   31       inclusive_OR_expression
      145      : exclusive_OR_expression 
      146      | inclusive_OR_expression '|' exclusive_OR_expression 
               ;

   32       logical_AND_expression
      147      : inclusive_OR_expression 
      148      | logical_AND_expression 'ANDAND' inclusive_OR_expression 
               ;

   33       logical_OR_expression
      149      : logical_AND_expression 
      150      | logical_OR_expression 'OROR' logical_AND_expression 
               ;

   34       conditional_expression
      151      : logical_OR_expression 
      152      | logical_OR_expression '?' comma_expression ':' conditional_expression 
               ;

   35       assignment_expression
      153      : conditional_expression 
      154      | unary_expression assignment_operator assignment_expression 
               ;

   36       assignment_operator
      155      : '=' 
      156      | 'MULTassign' 
      157      | 'DIVassign' 
      158      | 'MODassign' 
      159      | 'PLUSassign' 
      160      | 'MINUSassign' 
      161      | 'LSassign' 
      162      | 'RSassign' 
      163      | 'ANDassign' 
      164      | 'ERassign' 
      165      | 'ORassign' 
               ;

   37       comma_expression
      166      : assignment_expression 
      167      | comma_expression ',' assignment_expression 
               ;

   38       constant_expression
      168      : conditional_expression 
               ;

   39       comma_expression_opt
      169      : 
      170      | comma_expression 
               ;

   40       declaration
      171      : declaring_list ';' 
      172      | default_declaring_list ';' 
      173      | sue_declaration_specifier ';' 
      174      | sue_type_specifier ';' 
      175      | sue_type_specifier_elaboration ';' 
               ;

   41       default_declaring_list
      176      : declaration_qualifier_list identifier_declarator initializer_opt 
      177      | type_qualifier_list identifier_declarator initializer_opt 
      178      | default_declaring_list ',' identifier_declarator initializer_opt 
      179      | declaration_qualifier_list constructed_identifier_declarator 
      180      | type_qualifier_list constructed_identifier_declarator 
      181      | default_declaring_list ',' constructed_identifier_declarator 
               ;

   42       declaring_list
      182      : declaration_specifier declarator initializer_opt 
      183      | type_specifier declarator initializer_opt 
      184      | basic_type_name declarator initializer_opt 
      185      | 'TYPEDEFname' declarator initializer_opt 
      186      | global_or_scoped_typedefname declarator initializer_opt 
      187      | declaring_list ',' declarator initializer_opt 
      188      | declaration_specifier constructed_declarator 
      189      | type_specifier constructed_declarator 
      190      | basic_type_name constructed_declarator 
      191      | 'TYPEDEFname' constructed_declarator 
      192      | global_or_scoped_typedefname constructed_declarator 
      193      | declaring_list ',' constructed_declarator 
               ;

   43       constructed_declarator
      194      : nonunary_constructed_identifier_declarator 
      195      | constructed_paren_typedef_declarator 
      196      | simple_paren_typedef_declarator '(' argument_expression_list ')' 
      197      | simple_paren_typedef_declarator postfixing_abstract_declarator '(' argument_expression_list ')' 
      198      | constructed_parameter_typedef_declarator 
      199      | asterisk_or_ampersand constructed_declarator 
      200      | unary_modifier constructed_declarator 
               ;

   44       constructed_paren_typedef_declarator
      201      : '(' paren_typedef_declarator ')' '(' argument_expression_list ')' 
      202      | '(' paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' 
      203      | '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')' 
      204      | '(' 'TYPEDEFname' postfixing_abstract_declarator ')' '(' argument_expression_list ')' 
               ;

   45       constructed_parameter_typedef_declarator
      205      : 'TYPEDEFname' '(' argument_expression_list ')' 
      206      | 'TYPEDEFname' postfixing_abstract_declarator '(' argument_expression_list ')' 
      207      | '(' clean_typedef_declarator ')' '(' argument_expression_list ')' 
      208      | '(' clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' 
               ;

   46       constructed_identifier_declarator
      209      : nonunary_constructed_identifier_declarator 
      210      | asterisk_or_ampersand constructed_identifier_declarator 
      211      | unary_modifier constructed_identifier_declarator 
               ;

   47       nonunary_constructed_identifier_declarator
      212      : paren_identifier_declarator '(' argument_expression_list ')' 
      213      | paren_identifier_declarator postfixing_abstract_declarator '(' argument_expression_list ')' 
      214      | '(' unary_identifier_declarator ')' '(' argument_expression_list ')' 
      215      | '(' unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' 
               ;

   48       declaration_specifier
      216      : basic_declaration_specifier 
      217      | sue_declaration_specifier 
      218      | typedef_declaration_specifier 
               ;

   49       type_specifier
      219      : basic_type_specifier 
      220      | sue_type_specifier 
      221      | sue_type_specifier_elaboration 
      222      | typedef_type_specifier 
               ;

   50       declaration_qualifier_list
      223      : storage_class 
      224      | type_qualifier_list storage_class 
      225      | declaration_qualifier_list declaration_qualifier 
               ;

   51       type_qualifier_list
      226      : type_qualifier 
      227      | type_qualifier_list type_qualifier 
               ;

   52       declaration_qualifier
      228      : storage_class 
      229      | type_qualifier 
               ;

   53       type_qualifier
      230      : 'CONST' 
      231      | 'VOLATILE' 
               ;

   54       basic_declaration_specifier
      232      : declaration_qualifier_list basic_type_name 
      233      | basic_type_specifier storage_class 
      234      | basic_type_name storage_class 
      235      | basic_declaration_specifier declaration_qualifier 
      236      | basic_declaration_specifier basic_type_name 
               ;

   55       basic_type_specifier
      237      : type_qualifier_list basic_type_name 
      238      | basic_type_name basic_type_name 
      239      | basic_type_name type_qualifier 
      240      | basic_type_specifier type_qualifier 
      241      | basic_type_specifier basic_type_name 
               ;

   56       sue_declaration_specifier
      242      : declaration_qualifier_list elaborated_type_name 
      243      | declaration_qualifier_list elaborated_type_name_elaboration 
      244      | sue_type_specifier storage_class 
      245      | sue_type_specifier_elaboration storage_class 
      246      | sue_declaration_specifier declaration_qualifier 
               ;

   57       sue_type_specifier_elaboration
      247      : elaborated_type_name_elaboration 
      248      | type_qualifier_list elaborated_type_name_elaboration 
      249      | sue_type_specifier_elaboration type_qualifier 
               ;

   58       sue_type_specifier
      250      : elaborated_type_name 
      251      | type_qualifier_list elaborated_type_name 
      252      | sue_type_specifier type_qualifier 
               ;

   59       typedef_declaration_specifier
      253      : declaration_qualifier_list 'TYPEDEFname' 
      254      | declaration_qualifier_list global_or_scoped_typedefname 
      255      | typedef_type_specifier storage_class 
      256      | 'TYPEDEFname' storage_class 
      257      | global_or_scoped_typedefname storage_class 
      258      | typedef_declaration_specifier declaration_qualifier 
               ;

   60       typedef_type_specifier
      259      : type_qualifier_list 'TYPEDEFname' 
      260      | type_qualifier_list global_or_scoped_typedefname 
      261      | 'TYPEDEFname' type_qualifier 
      262      | global_or_scoped_typedefname type_qualifier 
      263      | typedef_type_specifier type_qualifier 
               ;

   61       storage_class
      264      : 'EXTERN' 
      265      | 'TYPEDEF' 
      266      | 'STATIC' 
      267      | 'AUTO' 
      268      | 'REGISTER' 
      269      | 'FRIEND' 
      270      | 'OVERLOAD' 
      271      | 'INLINE' 
      272      | 'VIRTUAL' 
               ;

   62       basic_type_name
      273      : 'INT' 
      274      | 'CHAR' 
      275      | 'SHORT' 
      276      | 'LONG' 
      277      | 'FLOAT' 
      278      | 'DOUBLE' 
      279      | 'SIGNED' 
      280      | 'UNSIGNED' 
      281      | 'VOID' 
               ;

   63       elaborated_type_name_elaboration
      282      : aggregate_name_elaboration 
      283      | enum_name_elaboration 
               ;

   64       elaborated_type_name
      284      : aggregate_name 
      285      | enum_name 
               ;

   65       aggregate_name_elaboration
      286      : aggregate_name derivation_opt '{' member_declaration_list_opt '}' 
      287      | aggregate_key derivation_opt '{' member_declaration_list_opt '}' 
               ;

   66       aggregate_name
      288      : aggregate_key tag_name 
      289      | global_scope scope aggregate_key tag_name 
      290      | global_scope aggregate_key tag_name 
      291      | scope aggregate_key tag_name 
               ;

   67       derivation_opt
      292      : 
      293      | ':' derivation_list 
               ;

   68       derivation_list
      294      : parent_class 
      295      | derivation_list ',' parent_class 
               ;

   69       parent_class
      296      : global_opt_scope_opt_typedefname 
      297      | 'VIRTUAL' access_specifier_opt global_opt_scope_opt_typedefname 
      298      | access_specifier virtual_opt global_opt_scope_opt_typedefname 
               ;

   70       virtual_opt
      299      : 
      300      | 'VIRTUAL' 
               ;

   71       access_specifier_opt
      301      : 
      302      | access_specifier 
               ;

   72       access_specifier
      303      : 'PUBLIC' 
      304      | 'PRIVATE' 
      305      | 'PROTECTED' 
               ;

   73       aggregate_key
      306      : 'STRUCT' 
      307      | 'UNION' 
      308      | 'CLASS' 
               ;

   74       member_declaration_list_opt
      309      : 
      310      | member_declaration_list_opt member_declaration 
               ;

   75       member_declaration
      311      : member_declaring_list ';' 
      312      | member_default_declaring_list ';' 
      313      | access_specifier ':' 
      314      | new_function_definition 
      315      | constructor_function_in_class 
      316      | sue_type_specifier ';' 
      317      | sue_type_specifier_elaboration ';' 
      318      | identifier_declarator ';' 
      319      | typedef_declaration_specifier ';' 
      320      | sue_declaration_specifier ';' 
               ;

   76       member_default_declaring_list
      321      : type_qualifier_list identifier_declarator member_pure_opt 
      322      | declaration_qualifier_list identifier_declarator member_pure_opt 
      323      | member_default_declaring_list ',' identifier_declarator member_pure_opt 
      324      | type_qualifier_list bit_field_identifier_declarator 
      325      | declaration_qualifier_list bit_field_identifier_declarator 
      326      | member_default_declaring_list ',' bit_field_identifier_declarator 
               ;

   77       member_declaring_list
      327      : type_specifier declarator member_pure_opt 
      328      | basic_type_name declarator member_pure_opt 
      329      | global_or_scoped_typedefname declarator member_pure_opt 
      330      | member_conflict_declaring_item 
      331      | member_declaring_list ',' declarator member_pure_opt 
      332      | type_specifier bit_field_declarator 
      333      | basic_type_name bit_field_declarator 
      334      | 'TYPEDEFname' bit_field_declarator 
      335      | global_or_scoped_typedefname bit_field_declarator 
      336      | declaration_specifier bit_field_declarator 
      337      | member_declaring_list ',' bit_field_declarator 
               ;

   78       member_conflict_declaring_item
      338      : 'TYPEDEFname' identifier_declarator member_pure_opt 
      339      | 'TYPEDEFname' parameter_typedef_declarator member_pure_opt 
      340      | 'TYPEDEFname' simple_paren_typedef_declarator member_pure_opt 
      341      | declaration_specifier identifier_declarator member_pure_opt 
      342      | declaration_specifier parameter_typedef_declarator member_pure_opt 
      343      | declaration_specifier simple_paren_typedef_declarator member_pure_opt 
      344      | member_conflict_paren_declaring_item 
               ;

   79       member_conflict_paren_declaring_item
      345      : 'TYPEDEFname' asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt 
      346      | 'TYPEDEFname' unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt 
      347      | 'TYPEDEFname' asterisk_or_ampersand '(' 'TYPEDEFname' ')' member_pure_opt 
      348      | 'TYPEDEFname' unary_modifier '(' 'TYPEDEFname' ')' member_pure_opt 
      349      | 'TYPEDEFname' asterisk_or_ampersand paren_typedef_declarator member_pure_opt 
      350      | 'TYPEDEFname' unary_modifier paren_typedef_declarator member_pure_opt 
      351      | declaration_specifier asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt 
      352      | declaration_specifier unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt 
      353      | declaration_specifier asterisk_or_ampersand '(' 'TYPEDEFname' ')' member_pure_opt 
      354      | declaration_specifier unary_modifier '(' 'TYPEDEFname' ')' member_pure_opt 
      355      | declaration_specifier asterisk_or_ampersand paren_typedef_declarator member_pure_opt 
      356      | declaration_specifier unary_modifier paren_typedef_declarator member_pure_opt 
      357      | member_conflict_paren_postfix_declaring_item 
               ;

   80       member_conflict_paren_postfix_declaring_item
      358      : 'TYPEDEFname' '(' paren_typedef_declarator ')' member_pure_opt 
      359      | 'TYPEDEFname' '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt 
      360      | 'TYPEDEFname' '(' 'TYPEDEFname' postfixing_abstract_declarator ')' member_pure_opt 
      361      | 'TYPEDEFname' '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt 
      362      | declaration_specifier '(' paren_typedef_declarator ')' member_pure_opt 
      363      | declaration_specifier '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt 
      364      | declaration_specifier '(' 'TYPEDEFname' postfixing_abstract_declarator ')' member_pure_opt 
      365      | declaration_specifier '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt 
               ;

   81       member_pure_opt
      366      : 
      367      | '=' 'OCTALconstant' 
               ;

   82       bit_field_declarator
      368      : bit_field_identifier_declarator 
      369      | 'TYPEDEFname' ':' constant_expression 
               ;

   83       bit_field_identifier_declarator
      370      : ':' constant_expression 
      371      | identifier_declarator ':' constant_expression 
               ;

   84       enum_name_elaboration
      372      : global_opt_scope_opt_enum_key '{' enumerator_list '}' 
      373      | enum_name '{' enumerator_list '}' 
               ;

   85       enum_name
      374      : global_opt_scope_opt_enum_key tag_name 
               ;

   86       global_opt_scope_opt_enum_key
      375      : 'ENUM' 
      376      | global_or_scope 'ENUM' 
               ;

   87       enumerator_list
      377      : enumerator_list_no_trailing_comma 
      378      | enumerator_list_no_trailing_comma ',' 
               ;

   88       enumerator_list_no_trailing_comma
      379      : enumerator_name enumerator_value_opt 
      380      | enumerator_list_no_trailing_comma ',' enumerator_name enumerator_value_opt 
               ;

   89       enumerator_name
      381      : 'IDENTIFIER' 
      382      | 'TYPEDEFname' 
               ;

   90       enumerator_value_opt
      383      : 
      384      | '=' constant_expression 
               ;

   91       parameter_type_list
      385      : '(' ')' type_qualifier_list_opt 
      386      | '(' type_name ')' type_qualifier_list_opt 
      387      | '(' type_name initializer ')' type_qualifier_list_opt 
      388      | '(' named_parameter_type_list ')' type_qualifier_list_opt 
               ;

   92       old_parameter_type_list
      389      : '(' ')' 
      390      | '(' type_name ')' 
      391      | '(' type_name initializer ')' 
      392      | '(' named_parameter_type_list ')' 
               ;

   93       named_parameter_type_list
      393      : parameter_list 
      394      | parameter_list comma_opt_ellipsis 
      395      | type_name comma_opt_ellipsis 
      396      | type_name initializer comma_opt_ellipsis 
      397      | 'ELLIPSIS' 
               ;

   94       comma_opt_ellipsis
      398      : 'ELLIPSIS' 
      399      | ',' 'ELLIPSIS' 
               ;

   95       parameter_list
      400      : non_casting_parameter_declaration 
      401      | non_casting_parameter_declaration initializer 
      402      | type_name ',' parameter_declaration 
      403      | type_name initializer ',' parameter_declaration 
      404      | parameter_list ',' parameter_declaration 
               ;

   96       parameter_declaration
      405      : type_name 
      406      | type_name initializer 
      407      | non_casting_parameter_declaration 
      408      | non_casting_parameter_declaration initializer 
               ;

   97       non_casting_parameter_declaration
      409      : declaration_specifier 
      410      | declaration_specifier abstract_declarator 
      411      | declaration_specifier identifier_declarator 
      412      | declaration_specifier parameter_typedef_declarator 
      413      | declaration_qualifier_list 
      414      | declaration_qualifier_list abstract_declarator 
      415      | declaration_qualifier_list identifier_declarator 
      416      | type_specifier identifier_declarator 
      417      | type_specifier parameter_typedef_declarator 
      418      | basic_type_name identifier_declarator 
      419      | basic_type_name parameter_typedef_declarator 
      420      | 'TYPEDEFname' identifier_declarator 
      421      | 'TYPEDEFname' parameter_typedef_declarator 
      422      | global_or_scoped_typedefname identifier_declarator 
      423      | global_or_scoped_typedefname parameter_typedef_declarator 
      424      | type_qualifier_list identifier_declarator 
               ;

   98       type_name
      425      : type_specifier 
      426      | basic_type_name 
      427      | 'TYPEDEFname' 
      428      | global_or_scoped_typedefname 
      429      | type_qualifier_list 
      430      | type_specifier abstract_declarator 
      431      | basic_type_name abstract_declarator 
      432      | 'TYPEDEFname' abstract_declarator 
      433      | global_or_scoped_typedefname abstract_declarator 
      434      | type_qualifier_list abstract_declarator 
               ;

   99       initializer_opt
      435      : 
      436      | initializer 
               ;

  100       initializer
      437      : '=' initializer_group 
               ;

  101       initializer_group
      438      : '{' initializer_list '}' 
      439      | '{' initializer_list ',' '}' 
      440      | assignment_expression 
               ;

  102       initializer_list
      441      : initializer_group 
      442      | initializer_list ',' initializer_group 
               ;

  103       statement
      443      : labeled_statement 
      444      | compound_statement 
      445      | expression_statement 
      446      | selection_statement 
      447      | iteration_statement 
      448      | jump_statement 
      449      | declaration 
               ;

  104       labeled_statement
      450      : label ':' statement 
      451      | 'CASE' constant_expression ':' statement 
      452      | 'DEFAULT' ':' statement 
               ;

  105       compound_statement
      453      : '{' statement_list_opt '}' 
               ;

  106       declaration_list
      454      : declaration 
      455      | declaration_list declaration 
               ;

  107       statement_list_opt
      456      : 
      457      | statement_list_opt statement 
               ;

  108       expression_statement
      458      : comma_expression_opt ';' 
               ;

  109       selection_statement
      459      : 'IF' '(' comma_expression ')' statement 
      460      | 'IF' '(' comma_expression ')' statement 'ELSE' statement 
      461      | 'SWITCH' '(' comma_expression ')' statement 
               ;

  110       iteration_statement
      462      : 'WHILE' '(' comma_expression_opt ')' statement 
      463      | 'DO' statement 'WHILE' '(' comma_expression ')' ';' 
      464      | 'FOR' '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement 
      465      | 'FOR' '(' declaration comma_expression_opt ';' comma_expression_opt ')' statement 
               ;

  111       jump_statement
      466      : 'GOTO' label ';' 
      467      | 'CONTINUE' ';' 
      468      | 'BREAK' ';' 
      469      | 'RETURN' comma_expression_opt ';' 
               ;

  112       label
      470      : 'IDENTIFIER' 
      471      | 'TYPEDEFname' 
               ;

  113       translation_unit
      472      : 
      473      | translation_unit external_definition 
               ;

  114       external_definition
      474      : function_declaration 
      475      | function_definition 
      476      | declaration 
      477      | linkage_specifier function_declaration 
      478      | linkage_specifier function_definition 
      479      | linkage_specifier declaration 
      480      | linkage_specifier '{' translation_unit '}' 
               ;

  115       linkage_specifier
      481      : 'EXTERN' 'STRINGliteral' 
               ;

  116       function_declaration
      482      : identifier_declarator ';' 
      483      | constructor_function_declaration ';' 
               ;

  117       function_definition
      484      : new_function_definition 
      485      | old_function_definition 
      486      | constructor_function_definition 
               ;

  118       new_function_definition
      487      : identifier_declarator compound_statement 
      488      | declaration_specifier declarator compound_statement 
      489      | type_specifier declarator compound_statement 
      490      | basic_type_name declarator compound_statement 
      491      | 'TYPEDEFname' declarator compound_statement 
      492      | global_or_scoped_typedefname declarator compound_statement 
      493      | declaration_qualifier_list identifier_declarator compound_statement 
      494      | type_qualifier_list identifier_declarator compound_statement 
               ;

  119       old_function_definition
      495      : old_function_declarator old_function_body 
      496      | declaration_specifier old_function_declarator old_function_body 
      497      | type_specifier old_function_declarator old_function_body 
      498      | basic_type_name old_function_declarator old_function_body 
      499      | 'TYPEDEFname' old_function_declarator old_function_body 
      500      | global_or_scoped_typedefname old_function_declarator old_function_body 
      501      | declaration_qualifier_list old_function_declarator old_function_body 
      502      | type_qualifier_list old_function_declarator old_function_body 
               ;

  120       old_function_body
      503      : declaration_list compound_statement 
      504      | compound_statement 
               ;

  121       constructor_function_definition
      505      : global_or_scoped_typedefname parameter_type_list constructor_init_list_opt compound_statement 
      506      | declaration_specifier parameter_type_list constructor_init_list_opt compound_statement 
               ;

  122       constructor_function_declaration
      507      : global_or_scoped_typedefname parameter_type_list 
      508      | declaration_specifier parameter_type_list 
               ;

  123       constructor_function_in_class
      509      : declaration_specifier constructor_parameter_list_and_body 
      510      | 'TYPEDEFname' constructor_parameter_list_and_body 
               ;

  124       constructor_parameter_list_and_body
      511      : '(' ')' type_qualifier_list_opt ';' 
      512      | '(' type_name initializer ')' type_qualifier_list_opt ';' 
      513      | '(' named_parameter_type_list ')' type_qualifier_list_opt ';' 
      514      | '(' ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      515      | '(' type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      516      | '(' named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      517      | constructor_conflicting_parameter_list_and_body 
               ;

  125       constructor_conflicting_parameter_list_and_body
      518      : '(' type_specifier ')' type_qualifier_list_opt ';' 
      519      | '(' basic_type_name ')' type_qualifier_list_opt ';' 
      520      | '(' 'TYPEDEFname' ')' type_qualifier_list_opt ';' 
      521      | '(' global_or_scoped_typedefname ')' type_qualifier_list_opt ';' 
      522      | '(' type_qualifier_list ')' type_qualifier_list_opt ';' 
      523      | '(' type_specifier abstract_declarator ')' type_qualifier_list_opt ';' 
      524      | '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt ';' 
      525      | '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt ';' 
      526      | '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt ';' 
      527      | '(' type_specifier ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      528      | '(' basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      529      | '(' 'TYPEDEFname' ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      530      | '(' global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      531      | '(' type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      532      | '(' type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      533      | '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      534      | '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      535      | '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      536      | constructor_conflicting_typedef_declarator 
               ;

  126       constructor_conflicting_typedef_declarator
      537      : '(' 'TYPEDEFname' unary_abstract_declarator ')' type_qualifier_list_opt ';' 
      538      | '(' 'TYPEDEFname' unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      539      | '(' 'TYPEDEFname' postfix_abstract_declarator ')' type_qualifier_list_opt ';' 
      540      | '(' 'TYPEDEFname' postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
      541      | '(' 'TYPEDEFname' postfixing_abstract_declarator ')' type_qualifier_list_opt ';' 
      542      | '(' 'TYPEDEFname' postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement 
               ;

  127       constructor_init_list_opt
      543      : 
      544      | constructor_init_list 
               ;

  128       constructor_init_list
      545      : ':' constructor_init 
      546      | constructor_init_list ',' constructor_init 
               ;

  129       constructor_init
      547      : 'IDENTIFIER' '(' argument_expression_list ')' 
      548      | 'IDENTIFIER' '(' ')' 
      549      | 'TYPEDEFname' '(' argument_expression_list ')' 
      550      | 'TYPEDEFname' '(' ')' 
      551      | global_or_scoped_typedefname '(' argument_expression_list ')' 
      552      | global_or_scoped_typedefname '(' ')' 
      553      | '(' argument_expression_list ')' 
      554      | '(' ')' 
               ;

  130       declarator
      555      : identifier_declarator 
      556      | typedef_declarator 
               ;

  131       typedef_declarator
      557      : paren_typedef_declarator 
      558      | simple_paren_typedef_declarator 
      559      | parameter_typedef_declarator 
               ;

  132       parameter_typedef_declarator
      560      : 'TYPEDEFname' 
      561      | 'TYPEDEFname' postfixing_abstract_declarator 
      562      | clean_typedef_declarator 
               ;

  133       clean_typedef_declarator
      563      : clean_postfix_typedef_declarator 
      564      | asterisk_or_ampersand parameter_typedef_declarator 
      565      | unary_modifier parameter_typedef_declarator 
               ;

  134       clean_postfix_typedef_declarator
      566      : '(' clean_typedef_declarator ')' 
      567      | '(' clean_typedef_declarator ')' postfixing_abstract_declarator 
               ;

  135       paren_typedef_declarator
      568      : postfix_paren_typedef_declarator 
      569      | asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' 
      570      | unary_modifier '(' simple_paren_typedef_declarator ')' 
      571      | asterisk_or_ampersand '(' 'TYPEDEFname' ')' 
      572      | unary_modifier '(' 'TYPEDEFname' ')' 
      573      | asterisk_or_ampersand paren_typedef_declarator 
      574      | unary_modifier paren_typedef_declarator 
               ;

  136       postfix_paren_typedef_declarator
      575      : '(' paren_typedef_declarator ')' 
      576      | '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' 
      577      | '(' 'TYPEDEFname' postfixing_abstract_declarator ')' 
      578      | '(' paren_typedef_declarator ')' postfixing_abstract_declarator 
               ;

  137       simple_paren_typedef_declarator
      579      : '(' 'TYPEDEFname' ')' 
      580      | '(' simple_paren_typedef_declarator ')' 
               ;

  138       identifier_declarator
      581      : unary_identifier_declarator 
      582      | paren_identifier_declarator 
               ;

  139       unary_identifier_declarator
      583      : postfix_identifier_declarator 
      584      | asterisk_or_ampersand identifier_declarator 
      585      | unary_modifier identifier_declarator 
               ;

  140       postfix_identifier_declarator
      586      : paren_identifier_declarator postfixing_abstract_declarator 
      587      | '(' unary_identifier_declarator ')' 
      588      | '(' unary_identifier_declarator ')' postfixing_abstract_declarator 
               ;

  141       old_function_declarator
      589      : postfix_old_function_declarator 
      590      | asterisk_or_ampersand old_function_declarator 
      591      | unary_modifier old_function_declarator 
               ;

  142       postfix_old_function_declarator
      592      : paren_identifier_declarator '(' argument_expression_list ')' 
      593      | '(' old_function_declarator ')' 
      594      | '(' old_function_declarator ')' old_postfixing_abstract_declarator 
               ;

  143       old_postfixing_abstract_declarator
      595      : array_abstract_declarator 
      596      | old_parameter_type_list 
               ;

  144       abstract_declarator
      597      : unary_abstract_declarator 
      598      | postfix_abstract_declarator 
      599      | postfixing_abstract_declarator 
               ;

  145       postfixing_abstract_declarator
      600      : array_abstract_declarator 
      601      | parameter_type_list 
               ;

  146       array_abstract_declarator
      602      : '[' ']' 
      603      | '[' constant_expression ']' 
      604      | array_abstract_declarator '[' constant_expression ']' 
               ;

  147       unary_abstract_declarator
      605      : asterisk_or_ampersand 
      606      | unary_modifier 
      607      | asterisk_or_ampersand abstract_declarator 
      608      | unary_modifier abstract_declarator 
               ;

  148       postfix_abstract_declarator
      609      : '(' unary_abstract_declarator ')' 
      610      | '(' postfix_abstract_declarator ')' 
      611      | '(' postfixing_abstract_declarator ')' 
      612      | '(' unary_abstract_declarator ')' postfixing_abstract_declarator 
               ;

  149       asterisk_or_ampersand
      613      : '*' 
      614      | '&' 
               ;

  150       unary_modifier
      615      : scope '*' type_qualifier_list_opt 
      616      | asterisk_or_ampersand type_qualifier_list 
               ;

  151       scoping_name
      617      : tag_name 
      618      | aggregate_key tag_name 
               ;

  152       scope
      619      : scoping_name 'CLCL' 
      620      | scope scoping_name 'CLCL' 
               ;

  153       tag_name
      621      : 'IDENTIFIER' 
      622      | 'TYPEDEFname' 
               ;

  154       global_scope
      623      : 'CLCL' 
               ;

  155       global_or_scope
      624      : global_scope 
      625      | scope 
      626      | global_scope scope 
               ;

  156       scope_opt_identifier
      627      : 'IDENTIFIER' 
      628      | scope 'IDENTIFIER' 
               ;

  157       scope_opt_complex_name
      629      : complex_name 
      630      | scope complex_name 
               ;

  158       complex_name
      631      : '~' 'TYPEDEFname' 
      632      | operator_function_name 
               ;

  159       global_opt_scope_opt_identifier
      633      : global_scope scope_opt_identifier 
      634      | scope_opt_identifier 
               ;

  160       global_opt_scope_opt_complex_name
      635      : global_scope scope_opt_complex_name 
      636      | scope_opt_complex_name 
               ;

  161       scoped_typedefname
      637      : scope 'TYPEDEFname' 
               ;

  162       global_or_scoped_typedefname
      638      : scoped_typedefname 
      639      | global_scope scoped_typedefname 
      640      | global_scope 'TYPEDEFname' 
               ;

  163       global_opt_scope_opt_typedefname
      641      : 'TYPEDEFname' 
      642      | global_or_scoped_typedefname 
               ;

/* End of CPP5 grammar 

