
/* Vba grammar */

/* Terminal Symbols */

    0  <error>
    1  <eof>
    2  <ident0>
    3  <ident>
    4  <integer>
    5  <hex>
    6  <real>
    7  <string>
    8  'OR'
    9  'AND'
   10  '='
   11  '<>'
   12  '<'
   13  '>'
   14  '<='
   15  '>='
   16  '+'
   17  '-'
   18  '&'
   19  'MOD'
   20  '*'
   21  '/'
   22  '^'
   23  <eol>
   24  ':'
   25  {LabelName}
   26  {Qualifier}
   27  'PUBLIC'
   28  'PRIVATE'
   29  'GLOBAL'
   30  'BEGIN'
   31  'DIALOG'
   32  ','
   33  'END'
   34  'OPTIONGROUP'
   35  'OKBUTTON'
   36  'CANCELBUTTON'
   37  'GROUPBOX'
   38  'PUSHBUTTON'
   39  'TEXT'
   40  'CHECKBOX'
   41  'TEXTBOX'
   42  'COMBOBOX'
   43  {ArrayName}
   44  'DROPLISTBOX'
   45  'LISTBOX'
   46  'OPTIONBUTTON'
   47  '.'
   48  'CALL'
   49  '('
   50  ')'
   51  ':='
   52  {Ident}
   53  {keyword}
   54  'CONST'
   55  {TypedConstName}
   56  'CLOSE'
   57  '#'
   58  'DECLARE'
   59  'SUB'
   60  'LIB'
   61  'APX'
   62  'ALIAS'
   63  'FUNCTION'
   64  'DIM'
   65  'DCL'
   66  'AS'
   67  'OBJECT'
   68  'INTEGER'
   69  'LONG'
   70  'SINGLE'
   71  'DOUBLE'
   72  'STRING'
   73  'BOOLEAN'
   74  'VARIANT'
   75  {TypeName}
   76  {DlgTypeName}
   77  'TO'
   78  'DO'
   79  'LOOP'
   80  'UNTIL'
   81  'WHILE'
   82  'EXIT'
   83  'FOR'
   84  'STEP'
   85  {Iterator}
   86  'EACH'
   87  'IN'
   88  'NEXT'
   89  'BYREF'
   90  'BYVAL'
   91  {CurrFuncName}
   92  'GOTO'
   93  'GOSUB'
   94  'IF'
   95  'THEN'
   96  'ELSE'
   97  'ELSEIF'
   98  'ENDIF'
   99  'LET'
  100  'LINE'
  101  'INPUT'
  102  'NAME'
  103  'ON'
  104  'ERROR'
  105  'RESUME'
  106  'OPEN'
  107  'OUTPUT'
  108  'APPEND'
  109  'OPTION'
  110  'BASE'
  111  'EXPLICIT'
  112  'PRINT'
  113  'REM'
  114  'RETURN'
  115  'SEEK'
  116  'SELECT'
  117  'CASE'
  118  'SET'
  119  'NOTHING'
  120  'STATIC'
  121  'STOP'
  122  {CurrSubName}
  123  'TYPE'
  124  'WEND'
  125  'WITH'
  126  {ObjectName}
  127  'WRITE'
  128  'NOT'
  129  <keyword>
  130  {Member}
  131  {ConstName}
  132  {SubName}
  133  ';'
  134  {AppName}
  135  {AliasName}
  136  {FuncName}
  137  {DLLSubName}
  138  {DLLFuncName}

/* Productions */

    0       ScriptFile
        0      : GlobalStmtEOL* <eof> 
               ;

    1       GlobalStmtEOL
        1      : <eol> 
        2      | GlobalStmt <eol> 
               ;

    2       StmtEOL
        3      : <eol> 
        4      | Stmt <eol> 
        5      | Label Stmt <eol> 
               ;

    3       Stmt
        6      : SimpleStmt 
        7      | ComplexStmt 
               ;

    4       Label
        8      : NewLabelName ':' 
        9      | NewLabelName ':' <eol>+ 
               ;

    5       NewLabelName
       10      : <ident> 
               ;

    6       GlobalStmt
       11      : RemStmt 
       12      | DimStmt 
       13      | OptionStmt 
       14      | G ConstStmt 
       15      | P DeclareStmt 
       16      | P VarAsTypeStmt 
       17      | P TypeStmt 
       18      | P Q SubStmt 
       19      | P Q FuncStmt 
               ;

    7       Q
       20      : {Qualifier}? 
               ;

    8       P
       21      : (PUBLIC | PRIVATE)? 
               ;

    9       G
       22      : (GLOBAL | PUBLIC | PRIVATE)? 
               ;

   10       ComplexStmt
       23      : BeginDlgStmt 
       24      | DoStmt 
       25      | ForStmt 
       26      | ForEachStmt 
       27      | IfStmtComplex 
       28      | SelectStmt 
       29      | WhileStmt 
       30      | WithStmt 
               ;

   11       SimpleStmt
       31      : CallStmt 
       32      | CloseStmt 
       33      | ConstStmt 
       34      | DialogStmt 
       35      | DimStmt 
       36      | ExitStmt 
       37      | GotoStmt 
       38      | GoSubStmt 
       39      | IfStmtSimple 
       40      | LetStmt 
       41      | LineInputStmt 
       42      | NameStmt 
       43      | OnErrorStmt 
       44      | OpenStmt 
       45      | PrintStmt 
       46      | ResumeStmt 
       47      | WriteStmt 
       48      | RemStmt 
       49      | ReturnStmt 
       50      | SeekStmt 
       51      | SetStmt 
       52      | StaticStmt 
       53      | StopStmt 
               ;

   12       BeginDlgStmt
       54      : 'BEGIN' 'DIALOG' DlgTypeName Area ',' StrConst (',' DlgIdent)? <eol>+ DialogThing* 'END' 'DIALOG' 
               ;

   13       DialogThing
       55      : 'OPTIONGROUP' DlgIdent <eol>+ OptionButton+ 
       56      | 'OKBUTTON' Area (',' DlgIdent)? <eol>+ 
       57      | 'CANCELBUTTON' Area (',' DlgIdent)? <eol>+ 
       58      | 'GROUPBOX' Area ',' StrConst (',' DlgIdent)? <eol>+ 
       59      | 'PUSHBUTTON' Area ',' StrConst (',' DlgIdent)? <eol>+ 
       60      | 'TEXT' Area ',' StrConst (',' DlgIdent)? <eol>+ 
       61      | 'CHECKBOX' Area ',' StrConst ',' DlgIdent <eol>+ 
       62      | 'TEXTBOX' Area ',' DlgIdent <eol>+ 
       63      | 'COMBOBOX' Area ',' {ArrayName} ',' DlgIdent <eol>+ 
       64      | 'DROPLISTBOX' Area ',' {ArrayName} ',' DlgIdent <eol>+ 
       65      | 'LISTBOX' Area ',' {ArrayName} ',' DlgIdent <eol>+ 
               ;

   14       Area
       66      : Constant ',' Constant ',' Constant ',' Constant 
               ;

   15       OptionButton
       67      : 'OPTIONBUTTON' Area ',' StrConst (',' DlgIdent)? <eol>+ 
               ;

   16       DlgIdent
       68      : '.' <ident> 
               ;

   17       CallStmt
       69      : 'CALL' Object ('(' MethodParamList? ')')? 
       70      | Object '(' MethodParamList? ')' 
       71      | 'CALL' SubName ('(' ParamList? ')')? 
       72      | SubName '(' ParamList? ')' 
               ;

   18       MethodParamList
       73      : ParamList 
       74      | NamedParamList 
               ;

   19       ParamList
       75      : Param 
       76      | ParamList Comma Param 
               ;

   20       NamedParamList
       77      : NamedParam 
       78      | NamedParamList Comma NamedParam 
               ;

   21       Param
       79      : Exp 
       80      | ArrayNameParam 
               ;

   22       ArrayNameParam
       81      : {ArrayName} 
               ;

   23       NamedParam
       82      : ParamName ':=' Exp 
               ;

   24       ParamName
       83      : {Ident} 
       84      | {keyword} 
               ;

   25       ConstStmt
       85      : 'CONST' ConstName AsType? '=' ConstPrimary 
       86      | 'CONST' {TypedConstName} '=' ConstPrimary 
               ;

   26       ConstPrimary
       87      : StrConst 
       88      | NumConst 
               ;

   27       CloseStmt
       89      : 'CLOSE' ('#'? Exp)/Comma* 
               ;

   28       DeclareStmt
       90      : 'DECLARE' 'SUB' DLLSubName (LIB LibName | APX AppName) (ALIAS AliasName)? ArgumentList? 
       91      | 'DECLARE' 'FUNCTION' DLLFuncName (LIB LibName | APX AppName) (ALIAS AliasName)? ArgumentList? AsType? 
               ;

   29       LibName
       92      : <string> 
               ;

   30       ArgumentList
       93      : '(' Arg/Comma* ')' 
               ;

   31       Arg
       94      : ByRefOrVal? <ident> AsArray? AsType? 
       95      | ByRefOrVal? <ident0> AsArray? 
               ;

   32       AsArray
       96      : '(' ')' 
               ;

   33       DialogStmt
       97      : 'DIALOG' Dlg 
               ;

   34       DimStmt
       98      : 'DIM' VarAsType/Comma+ 
       99      | 'DCL' VarAsType/Comma+ 
               ;

   35       VarAsTypeStmt
      100      : VarAsType 
      101      | VarAsType VarAsTypeStmt 
               ;

   36       VarAsType
      102      : TypedIdent 
      103      | <ident> AsType 
      104      | <ident> AsObject 
      105      | ArrayName Subscripts AsType? 
      106      | AnyName 
               ;

   37       AsType
      107      : PrimType 
      108      | 'AS' PrimType 
      109      | 'AS' ExtType 
               ;

   38       AsObject
      110      : 'OBJECT' 
      111      | 'AS' 'OBJECT' 
               ;

   39       PrimType
      112      : 'INTEGER' 
      113      | 'LONG' 
      114      | 'SINGLE' 
      115      | 'DOUBLE' 
      116      | 'STRING' ('*' StrSize)? 
      117      | 'BOOLEAN' 
      118      | 'VARIANT' 
               ;

   40       ExtType
      119      : {TypeName} 
      120      | {DlgTypeName} 
      121      | {Ident} 
               ;

   41       Subscripts
      122      : '(' Bounds/','* ')' 
               ;

   42       Bounds
      123      : NumConst (TO NumConst)? 
               ;

   43       StrSize
      124      : <integer> 
               ;

   44       DoStmt
      125      : 'DO' <eol> StmtEOL+ 'LOOP' 
      126      | 'DO' <eol> StmtEOL+ 'LOOP' 'UNTIL' Exp 
      127      | 'DO' <eol> StmtEOL+ 'LOOP' 'WHILE' Exp 
      128      | 'DO' 'UNTIL' Exp <eol> StmtEOL+ 'LOOP' 
      129      | 'DO' 'WHILE' Exp <eol> StmtEOL+ 'LOOP' 
               ;

   45       ExitStmt
      130      : 'EXIT' ExitType 
               ;

   46       ExitType
      131      : 'DO' 
      132      | 'FOR' 
      133      | 'FUNCTION' 
      134      | 'SUB' 
               ;

   47       ForStmt
      135      : 'FOR' Iterator '=' StartVal 'TO' EndVal (STEP StepVal)? <eol> StmtEOL+ NextStmt 
               ;

   48       StartVal
      136      : Exp 
               ;

   49       EndVal
      137      : Exp 
               ;

   50       StepVal
      138      : 
      139      | Exp 
               ;

   51       Iterator
      140      : <ident> 
      141      | {Ident} 
      142      | {Iterator} 
               ;

   52       ForEachStmt
      143      : 'FOR' 'EACH' Exp 'IN' Exp <eol> StmtEOL+ NextStmt 
               ;

   53       NextStmt
      144      : 'NEXT' 
      145      | 'NEXT' {Iterator} 
               ;

   54       FuncStmt
      146      : 'FUNCTION' CurrFuncName VList? AsType? StmtEOL+ EndFunc 
               ;

   55       CurrFuncName
      147      : <ident> 
               ;

   56       VList
      148      : '(' FuncVarList? ')' 
               ;

   57       FuncVarList
      149      : (ByRefOrVal? FuncVarAsType)/Comma+ 
               ;

   58       ByRefOrVal
      150      : 'BYREF' 
      151      | 'BYVAL' 
               ;

   59       FuncVarAsType
      152      : FuncVar AsType? 
               ;

   60       FuncVar
      153      : <ident> 
      154      | AnyName 
      155      | {ArrayName} '(' ')' 
               ;

   61       EndFunc
      156      : 'END' 'FUNCTION' 
      157      | 'END' {CurrFuncName} 
               ;

   62       GotoStmt
      158      : 'GOTO' LabelName 
               ;

   63       LabelName
      159      : <ident> 
      160      | {LabelName} 
               ;

   64       GoSubStmt
      161      : 'GOSUB' SubName 
               ;

   65       IfStmtSimple
      162      : 'IF' Exp 'THEN' SimpleStmt 
      163      | 'IF' Exp 'THEN' SimpleStmt 'ELSE' SimpleStmt 
               ;

   66       IfStmtComplex
      164      : 'IF' Exp Then EndIf 
      165      | 'IF' Exp Then Else EndIf 
      166      | 'IF' Exp Then ElseIfExp+ Else EndIf 
               ;

   67       Then
      167      : <eol> StmtEOL+ 
      168      | 'THEN' <eol> StmtEOL+ 
      169      | <eol> 'THEN' <eol> StmtEOL+ 
               ;

   68       ElseIfExp
      170      : ElseIf Exp Then 
               ;

   69       Else
      171      : 'ELSE' <eol> StmtEOL+ 
               ;

   70       ElseIf
      172      : 'ELSEIF' 
      173      | 'ELSE' 'IF' 
               ;

   71       EndIf
      174      : 'END' 'IF' 
      175      | 'ENDIF' 
               ;

   72       LetStmt
      176      : 'LET' LValue '=' Exp 
      177      | LValue '=' Exp 
      178      | FuncName '=' Exp 
               ;

   73       LineInputStmt
      179      : 'LINE' 'INPUT' '#' Exp Comma Exp 
               ;

   74       NameStmt
      180      : 'NAME' Exp 'AS' Exp 
               ;

   75       OnErrorStmt
      181      : 'ON' 'ERROR' 'GOTO' LabelName 
      182      | 'ON' 'ERROR' 'RESUME' 'NEXT' 
               ;

   76       OpenStmt
      183      : 'OPEN' Exp (FOR InOutApp)? 'AS' '#'? Exp 
               ;

   77       InOutApp
      184      : 'INPUT' 
      185      | 'OUTPUT' 
      186      | 'APPEND' 
               ;

   78       OptionStmt
      187      : 'OPTION' 'BASE' <integer> 
      188      | 'OPTION' 'EXPLICIT' 
               ;

   79       PrintStmt
      189      : 'PRINT' Exp/cs+ 
      190      | 'PRINT' '#' Exp Comma Exp/cs+ 
               ;

   80       RemStmt
      191      : 'REM' 
      192      | 'REM' <error>+ 
               ;

   81       ResumeStmt
      193      : 'RESUME' 'NEXT' 
      194      | 'RESUME' LabelName 
               ;

   82       ReturnStmt
      195      : 'RETURN' 
               ;

   83       SeekStmt
      196      : 'SEEK' '#'? Exp Comma Exp 
               ;

   84       SelectStmt
      197      : 'SELECT' CaseExp EndSelect 
      198      | 'SELECT' CaseExp CaseElse EndSelect 
      199      | 'SELECT' CaseExp CaseStmt+ EndSelect 
      200      | 'SELECT' CaseExp CaseStmt+ CaseElse EndSelect 
               ;

   85       CaseExp
      201      : 'CASE' Exp <eol>+ 
               ;

   86       CaseStmt
      202      : 'CASE' Exp <eol> StmtEOL* 
               ;

   87       CaseElse
      203      : 'CASE' 'ELSE' <eol> StmtEOL* 
               ;

   88       EndSelect
      204      : 'END' 'SELECT' 
               ;

   89       SetStmt
      205      : 'SET' Object '=' RValue 
      206      | 'SET' Object '=' 'NOTHING' 
      207      | Object '=' RValue 
               ;

   90       StaticStmt
      208      : 'STATIC' VarAsType/Comma+ 
               ;

   91       StopStmt
      209      : 'STOP' 
               ;

   92       SubStmt
      210      : 'SUB' CurrSubName VList? StmtEOL+ EndSub 
               ;

   93       CurrSubName
      211      : <ident> 
               ;

   94       EndSub
      212      : 'END' 'SUB' 
      213      | 'END' {CurrSubName} 
               ;

   95       TypeStmt
      214      : 'TYPE' TypeName TypeElemList EndType 
               ;

   96       TypeElemList
      215      : (MemberAsType? <eol>)+ 
               ;

   97       MemberAsType
      216      : Member AsType 
               ;

   98       EndType
      217      : 'END' 'TYPE' 
               ;

   99       WhileStmt
      218      : 'WHILE' Exp <eol> StmtEOL+ EndWhile 
               ;

  100       EndWhile
      219      : 'WEND' 
      220      | 'END' 'WHILE' 
               ;

  101       WithStmt
      221      : 'WITH' WithObject <eol> StmtEOL+ EndWith 
               ;

  102       WithObject
      222      : {ObjectName} 
      223      | Object 
      224      | {TypeName} 
               ;

  103       EndWith
      225      : 'END' 'WITH' 
               ;

  104       WriteStmt
      226      : 'WRITE' '#' Exp/Comma+ 
               ;

  105       Exp
      227      : RValue 
      228      | Exp '+' Exp 
      229      | Exp '-' Exp 
      230      | Exp '*' Exp 
      231      | Exp '/' Exp 
      232      | Exp '^' Exp 
      233      | Exp 'MOD' Exp 
      234      | Exp '&' Exp 
      235      | Exp '=' Exp 
      236      | Exp '<>' Exp 
      237      | Exp '<' Exp 
      238      | Exp '>' Exp 
      239      | Exp '<=' Exp 
      240      | Exp '>=' Exp 
      241      | Exp 'AND' Exp 
      242      | Exp 'OR' Exp 
               ;

  106       RValue
      243      : LValue 
      244      | 'NOT' RValue 
      245      | '-' RValue 
      246      | '+' RValue 
      247      | <string> 
      248      | Constant 
      249      | Object 
      250      | GetProp 
      251      | {TypeName} 
      252      | 'SEEK' '(' Exp ')' 
      253      | 'DIALOG' '(' Dlg ')' 
      254      | FuncName '(' ParamList? ')' 
      255      | StrFunc '(' ParamList? ')' 
      256      | 'INPUT' '(' Exp Comma '#'? Exp ')' 
      257      | '(' Exp ')' 
               ;

  107       LValue
      258      : {Ident} 
      259      | {Iterator} 
      260      | ArrayRef 
      261      | DlgMember 
      262      | UserType 
               ;

  108       ArrayRef
      263      : {ArrayName} '(' SubList ')' 
               ;

  109       SubList
      264      : Exp/','+ 
               ;

  110       DlgMember
      265      : Dlg '.' Member 
               ;

  111       Dlg
      266      : {DlgTypeName} 
               ;

  112       UserType
      267      : UserTypeDot Member 
               ;

  113       UserTypeDot
      268      : {TypeName} '.' 
      269      | UserTypeDot Member '.' 
               ;

  114       GetProp
      270      : Object '(' MethodParamList? ')' 
               ;

  115       Object
      271      : ObjectDotMember 
               ;

  116       ObjectDotMember
      272      : '.' Member 
      273      | ObjectDot Member 
      274      | GetProp '.' Member 
      275      | ObjectDotMember '.' Member 
               ;

  117       ObjectDot
      276      : {ObjectName} '.' 
               ;

  118       Member
      277      : (<ident> | <keyword> | {Member}) 
               ;

  119       NumConst
      278      : Constant 
      279      | NumConst '+' NumConst 
      280      | NumConst '-' NumConst 
      281      | NumConst '*' NumConst 
      282      | NumConst '/' NumConst 
               ;

  120       Constant
      283      : <hex> 
      284      | <real> 
      285      | <integer> 
      286      | {ConstName} 
               ;

  121       StrConst
      287      : <string> 
               ;

  122       StrFunc
      288      : 'STRING' 
               ;

  123       AnyName
      289      : {SubName} 
      290      | FuncName 
      291      | {ConstName} 
      292      | {ArrayName} 
      293      | {TypeName} 
      294      | {ObjectName} 
               ;

  124       TypedIdent
      295      : <ident0> 
               ;

  125       ArrayName
      296      : <ident> 
               ;

  126       SubName
      297      : <ident> 
      298      | {SubName} 
               ;

  127       TypeName
      299      : <ident> 
               ;

  128       AppName
      300      : <ident> 
               ;

  129       AliasName
      301      : <string> 
               ;

  130       FuncName
      302      : <ident> 
               ;

  131       DlgTypeName
      303      : <ident> 
               ;

  132       ConstName
      304      : <ident> 
               ;

  133       DLLSubName
      305      : <ident> 
               ;

  134       DLLFuncName
      306      : <ident> 
               ;

  135       cs
      307      : ',' 
      308      | ';' 
      309      | ',' <eol> 
      310      | ';' <eol> 
               ;

  136       Comma
      311      : ',' 
      312      | ',' <eol> 
               ;

  137       GlobalStmtEOL*
      313      : 
      314      | GlobalStmtEOL* GlobalStmtEOL 
               ;

  138       <eol>+
      315      : <eol> 
      316      | <eol>+ <eol> 
               ;

  139       {Qualifier}?
      317      : 
      318      | {Qualifier} 
               ;

  140       (PUBLIC | PRIVATE)?
      319      : 
      320      | 'PUBLIC' 
      321      | 'PRIVATE' 
               ;

  141       (GLOBAL | PUBLIC | PRIVATE)?
      322      : 
      323      | 'GLOBAL' 
      324      | 'PUBLIC' 
      325      | 'PRIVATE' 
               ;

  142       (',' DlgIdent)?
      326      : 
      327      | ',' DlgIdent 
               ;

  143       DialogThing*
      328      : 
      329      | DialogThing* DialogThing 
               ;

  144       OptionButton+
      330      : OptionButton 
      331      | OptionButton+ OptionButton 
               ;

  145       MethodParamList?
      332      : 
      333      | MethodParamList 
               ;

  146       ('(' MethodParamList? ')')?
      334      : 
      335      | '(' MethodParamList? ')' 
               ;

  147       ParamList?
      336      : 
      337      | ParamList 
               ;

  148       ('(' ParamList? ')')?
      338      : 
      339      | '(' ParamList? ')' 
               ;

  149       AsType?
      340      : 
      341      | AsType 
               ;

  150       '#'?
      342      : 
      343      | '#' 
               ;

  151       ('#'? Exp)
      344      : '#'? Exp 
               ;

  152       ('#'? Exp)/Comma*
      345      : 
      346      | ('#'? Exp) 
      347      | ('#'? Exp)/Comma* Comma ('#'? Exp) 
               ;

  153       (LIB LibName | APX AppName)
      348      : 'LIB' LibName 
      349      | 'APX' AppName 
               ;

  154       (ALIAS AliasName)?
      350      : 
      351      | 'ALIAS' AliasName 
               ;

  155       ArgumentList?
      352      : 
      353      | ArgumentList 
               ;

  156       Arg/Comma*
      354      : 
      355      | Arg 
      356      | Arg/Comma* Comma Arg 
               ;

  157       ByRefOrVal?
      357      : 
      358      | ByRefOrVal 
               ;

  158       AsArray?
      359      : 
      360      | AsArray 
               ;

  159       VarAsType/Comma+
      361      : VarAsType 
      362      | VarAsType/Comma+ Comma VarAsType 
               ;

  160       ('*' StrSize)?
      363      : 
      364      | '*' StrSize 
               ;

  161       Bounds/','*
      365      : 
      366      | Bounds 
      367      | Bounds/','* ',' Bounds 
               ;

  162       (TO NumConst)?
      368      : 
      369      | 'TO' NumConst 
               ;

  163       StmtEOL+
      370      : StmtEOL 
      371      | StmtEOL+ StmtEOL 
               ;

  164       (STEP StepVal)?
      372      : 
      373      | 'STEP' StepVal 
               ;

  165       VList?
      374      : 
      375      | VList 
               ;

  166       FuncVarList?
      376      : 
      377      | FuncVarList 
               ;

  167       (ByRefOrVal? FuncVarAsType)
      378      : ByRefOrVal? FuncVarAsType 
               ;

  168       (ByRefOrVal? FuncVarAsType)/Comma+
      379      : (ByRefOrVal? FuncVarAsType) 
      380      | (ByRefOrVal? FuncVarAsType)/Comma+ Comma (ByRefOrVal? FuncVarAsType) 
               ;

  169       ElseIfExp+
      381      : ElseIfExp 
      382      | ElseIfExp+ ElseIfExp 
               ;

  170       (FOR InOutApp)?
      383      : 
      384      | 'FOR' InOutApp 
               ;

  171       Exp/cs+
      385      : Exp 
      386      | Exp/cs+ cs Exp 
               ;

  172       <error>+
      387      : <error> 
      388      | <error>+ <error> 
               ;

  173       CaseStmt+
      389      : CaseStmt 
      390      | CaseStmt+ CaseStmt 
               ;

  174       StmtEOL*
      391      : 
      392      | StmtEOL* StmtEOL 
               ;

  175       MemberAsType?
      393      : 
      394      | MemberAsType 
               ;

  176       (MemberAsType? <eol>)
      395      : MemberAsType? <eol> 
               ;

  177       (MemberAsType? <eol>)+
      396      : (MemberAsType? <eol>) 
      397      | (MemberAsType? <eol>)+ (MemberAsType? <eol>) 
               ;

  178       Exp/Comma+
      398      : Exp 
      399      | Exp/Comma+ Comma Exp 
               ;

  179       Exp/','+
      400      : Exp 
      401      | Exp/','+ ',' Exp 
               ;

  180       (<ident> | <keyword> | {Member})
      402      : <ident> 
      403      | <keyword> 
      404      | {Member} 
               ;

/* End of Vba grammar 

