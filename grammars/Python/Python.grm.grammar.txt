
/* Python grammar */

/* Terminal Symbols */

    0  <error>
    1  <eof>
    2  <newline>
    3  '@'
    4  '('
    5  ')'
    6  'DEF'
    7  'NAME'
    8  '->'
    9  ':'
   10  '='
   11  ','
   12  '*'
   13  '**'
   14  ';'
   15  '+='
   16  '-='
   17  '*='
   18  '@='
   19  '/='
   20  '%='
   21  '&='
   22  '|='
   23  '^='
   24  '<<='
   25  '>>='
   26  '**='
   27  '//='
   28  'DEL'
   29  'PASS'
   30  'BREAK'
   31  'CONTINUE'
   32  'RETURN'
   33  'RAISE'
   34  'FROM'
   35  'IMPORT'
   36  '.'
   37  '...'
   38  'AS'
   39  'GLOBAL'
   40  'NONLOCAL'
   41  'ASSERT'
   42  'IF'
   43  'ELIF'
   44  'ELSE'
   45  'WHILE'
   46  'FOR'
   47  'IN'
   48  'TRY'
   49  'FINALLY'
   50  'WITH'
   51  'EXCEPT'
   52  'INDENT'
   53  'DEDENT'
   54  'LAMBDA'
   55  'OR'
   56  'AND'
   57  'NOT'
   58  '<'
   59  '>'
   60  '=='
   61  '>='
   62  '<='
   63  '<>'
   64  '!='
   65  'IS'
   66  '|'
   67  '^'
   68  '&'
   69  '<<'
   70  '>>'
   71  '+'
   72  '-'
   73  '/'
   74  '%'
   75  '//'
   76  '~'
   77  '['
   78  ']'
   79  '{'
   80  '}'
   81  'NONE'
   82  'TRUE'
   83  'FALSE'
   84  'CLASS'
   85  'YIELD'
   86  <string_literal>
   87  <bytes_literal>
   88  <float_number>
   89  <imag_number>
   90  <decimal_integer>
   91  <octal_integer>
   92  <hex_integer>
   93  <binary_integer>

/* Productions */

    0       Goal
        0      : (single_input | file_input | eval_input) <eof> 
               ;

    1       single_input
        1      : <newline> 
        2      | simple_stmt 
        3      | compound_stmt <newline> 
               ;

    2       file_input
        4      : (<newline> | stmt)* 
               ;

    3       eval_input
        5      : testlist <newline>* 
               ;

    4       decorator
        6      : '@' dotted_name ('(' arglist? ')')? <newline> 
               ;

    5       decorators
        7      : decorator+ 
               ;

    6       decorated
        8      : decorators (classdef | funcdef) 
               ;

    7       funcdef
        9      : 'DEF' 'NAME' parameters ('->' test)? ':' suite 
               ;

    8       parameters
       10      : '(' typedargslist? ')' 
               ;

    9       typedargslist
       11      : tfpdef ('=' test)? (',' tfpdef ('=' test)?)* (',' ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?)? 
       12      | '*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? 
       13      | '**' tfpdef 
               ;

   10       tfpdef
       14      : 'NAME' (':' test)? 
               ;

   11       varargslist
       15      : vfpdef ('=' test)? (',' vfpdef ('=' test)?)* (',' ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?)? 
       16      | '*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? 
       17      | '**' vfpdef 
               ;

   12       vfpdef
       18      : 'NAME' 
               ;

   13       stmt
       19      : simple_stmt 
       20      | compound_stmt 
               ;

   14       simple_stmt
       21      : small_stmt (';' small_stmt)* ';'? <newline> 
               ;

   15       small_stmt
       22      : expr_stmt 
       23      | del_stmt 
       24      | pass_stmt 
       25      | flow_stmt 
       26      | import_stmt 
       27      | global_stmt 
       28      | nonlocal_stmt 
       29      | assert_stmt 
               ;

   16       expr_stmt
       30      : testlist_star_expr (augassign (yield_expr | testlist) | ('=' (yield_expr | testlist_star_expr))*) 
               ;

   17       testlist_star_expr
       31      : (test | star_expr) (',' (test | star_expr))* ','? 
               ;

   18       augassign
       32      : '+=' 
       33      | '-=' 
       34      | '*=' 
       35      | '@=' 
       36      | '/=' 
       37      | '%=' 
       38      | '&=' 
       39      | '|=' 
       40      | '^=' 
       41      | '<<=' 
       42      | '>>=' 
       43      | '**=' 
       44      | '//=' 
               ;

   19       del_stmt
       45      : 'DEL' exprlist 
               ;

   20       pass_stmt
       46      : 'PASS' 
               ;

   21       flow_stmt
       47      : break_stmt 
       48      | continue_stmt 
       49      | return_stmt 
       50      | raise_stmt 
       51      | yield_stmt 
               ;

   22       break_stmt
       52      : 'BREAK' 
               ;

   23       continue_stmt
       53      : 'CONTINUE' 
               ;

   24       return_stmt
       54      : 'RETURN' testlist? 
               ;

   25       yield_stmt
       55      : yield_expr 
               ;

   26       raise_stmt
       56      : 'RAISE' (test (FROM test)?)? 
               ;

   27       import_stmt
       57      : import_name 
       58      | import_from 
               ;

   28       import_name
       59      : 'IMPORT' dotted_as_names 
               ;

   29       import_from
       60      : 'FROM' (('.' | '...')* dotted_name | ('.' | '...')+) 'IMPORT' ('*' | '(' import_as_names ')' | import_as_names) 
               ;

   30       import_as_name
       61      : 'NAME' (AS NAME)? 
               ;

   31       dotted_as_name
       62      : dotted_name (AS NAME)? 
               ;

   32       import_as_names
       63      : import_as_name (',' import_as_name)* ','? 
               ;

   33       dotted_as_names
       64      : dotted_as_name (',' dotted_as_name)* 
               ;

   34       dotted_name
       65      : 'NAME' ('.' NAME)* 
               ;

   35       global_stmt
       66      : 'GLOBAL' 'NAME' (',' NAME)* 
               ;

   36       nonlocal_stmt
       67      : 'NONLOCAL' 'NAME' (',' NAME)* 
               ;

   37       assert_stmt
       68      : 'ASSERT' test (',' test)? 
               ;

   38       compound_stmt
       69      : if_stmt 
       70      | while_stmt 
       71      | for_stmt 
       72      | try_stmt 
       73      | with_stmt 
       74      | funcdef 
       75      | classdef 
       76      | decorated 
               ;

   39       if_stmt
       77      : 'IF' test ':' suite (ELIF test ':' suite)* (ELSE ':' suite)? 
               ;

   40       while_stmt
       78      : 'WHILE' test ':' suite (ELSE ':' suite)? 
               ;

   41       for_stmt
       79      : 'FOR' exprlist 'IN' testlist ':' suite (ELSE ':' suite)? 
               ;

   42       try_stmt
       80      : 'TRY' ':' suite ((except_clause ':' suite)+ (ELSE ':' suite)? (FINALLY ':' suite)? | FINALLY ':' suite) 
               ;

   43       with_stmt
       81      : 'WITH' with_item (',' with_item)* ':' suite 
               ;

   44       with_item
       82      : test (AS expr)? 
               ;

   45       except_clause
       83      : 'EXCEPT' (test (AS NAME)?)? 
               ;

   46       suite
       84      : simple_stmt 
       85      | <newline> 'INDENT' stmt+ 'DEDENT' 
               ;

   47       test
       86      : or_test (IF or_test ELSE test)? 
       87      | lambdef 
               ;

   48       test_nocond
       88      : or_test 
       89      | lambdef_nocond 
               ;

   49       lambdef
       90      : 'LAMBDA' varargslist? ':' test 
               ;

   50       lambdef_nocond
       91      : 'LAMBDA' varargslist? ':' test_nocond 
               ;

   51       or_test
       92      : and_test (OR and_test)* 
               ;

   52       and_test
       93      : not_test (AND not_test)* 
               ;

   53       not_test
       94      : 'NOT' not_test 
       95      | comparison 
               ;

   54       comparison
       96      : star_expr (comp_op star_expr)* 
               ;

   55       comp_op
       97      : '<' 
       98      | '>' 
       99      | '==' 
      100      | '>=' 
      101      | '<=' 
      102      | '<>' 
      103      | '!=' 
      104      | 'IN' 
      105      | 'NOT' 'IN' 
      106      | 'IS' 
      107      | 'IS' 'NOT' 
               ;

   56       star_expr
      108      : '*'? expr 
               ;

   57       expr
      109      : xor_expr ('|' xor_expr)* 
               ;

   58       xor_expr
      110      : and_expr ('^' and_expr)* 
               ;

   59       and_expr
      111      : shift_expr ('&' shift_expr)* 
               ;

   60       shift_expr
      112      : arith_expr ('<<' arith_expr | '>>' arith_expr)* 
               ;

   61       arith_expr
      113      : term ('+' term | '-' term)* 
               ;

   62       term
      114      : factor ('*' factor | '/' factor | '%' factor | '//' factor | '@' factor)* 
               ;

   63       factor
      115      : '+' factor 
      116      | '-' factor 
      117      | '~' factor 
      118      | power 
               ;

   64       power
      119      : atom trailer* ('**' factor)? 
               ;

   65       atom
      120      : '(' (yield_expr | testlist_comp)? ')' 
      121      | '[' testlist_comp? ']' 
      122      | '{' dictorsetmaker? '}' 
      123      | 'NAME' 
      124      | number 
      125      | str+ 
      126      | '...' 
      127      | 'NONE' 
      128      | 'TRUE' 
      129      | 'FALSE' 
               ;

   66       testlist_comp
      130      : test (comp_for | (',' test)* ','?) 
               ;

   67       trailer
      131      : '(' arglist? ')' 
      132      | '[' subscriptlist ']' 
      133      | '.' 'NAME' 
               ;

   68       subscriptlist
      134      : subscript (',' subscript)* ','? 
               ;

   69       subscript
      135      : test 
      136      | test? ':' test? sliceop? 
               ;

   70       sliceop
      137      : ':' test? 
               ;

   71       exprlist
      138      : star_expr (',' star_expr)* ','? 
               ;

   72       testlist
      139      : test (',' test)* ','? 
               ;

   73       dictorsetmaker
      140      : test ':' test (comp_for | (',' test ':' test)* ','?) 
      141      | test (comp_for | (',' test)* ','?) 
               ;

   74       classdef
      142      : 'CLASS' 'NAME' ('(' arglist? ')')? ':' suite 
               ;

   75       arglist
      143      : (argument ',')* (argument ','? | '*' test (',' argument)* (',' '**' test)? | '**' test) 
               ;

   76       argument
      144      : test comp_for? 
      145      | test '=' test 
               ;

   77       comp_iter
      146      : comp_for 
      147      | comp_if 
               ;

   78       comp_for
      148      : 'FOR' exprlist 'IN' or_test comp_iter? 
               ;

   79       comp_if
      149      : 'IF' test_nocond comp_iter? 
               ;

   80       yield_expr
      150      : 'YIELD' yield_arg? 
               ;

   81       yield_arg
      151      : 'FROM' test 
      152      | testlist 
               ;

   82       str
      153      : <string_literal> 
      154      | <bytes_literal> 
               ;

   83       number
      155      : integer 
      156      | <float_number> 
      157      | <imag_number> 
               ;

   84       integer
      158      : <decimal_integer> 
      159      | <octal_integer> 
      160      | <hex_integer> 
      161      | <binary_integer> 
               ;

   85       (single_input | file_input | eval_input)
      162      : single_input 
      163      | file_input 
      164      | eval_input 
               ;

   86       (<newline> | stmt)
      165      : <newline> 
      166      | stmt 
               ;

   87       (<newline> | stmt)*
      167      : 
      168      | (<newline> | stmt)* (<newline> | stmt) 
               ;

   88       <newline>*
      169      : 
      170      | <newline>* <newline> 
               ;

   89       arglist?
      171      : 
      172      | arglist 
               ;

   90       ('(' arglist? ')')
      173      : '(' arglist? ')' 
               ;

   91       ('(' arglist? ')')?
      174      : 
      175      | ('(' arglist? ')') 
               ;

   92       decorator+
      176      : decorator 
      177      | decorator+ decorator 
               ;

   93       (classdef | funcdef)
      178      : classdef 
      179      | funcdef 
               ;

   94       ('->' test)
      180      : '->' test 
               ;

   95       ('->' test)?
      181      : 
      182      | ('->' test) 
               ;

   96       typedargslist?
      183      : 
      184      | typedargslist 
               ;

   97       ('=' test)
      185      : '=' test 
               ;

   98       ('=' test)?
      186      : 
      187      | ('=' test) 
               ;

   99       (',' tfpdef ('=' test)?)
      188      : ',' tfpdef ('=' test)? 
               ;

  100       (',' tfpdef ('=' test)?)*
      189      : 
      190      | (',' tfpdef ('=' test)?)* (',' tfpdef ('=' test)?) 
               ;

  101       tfpdef?
      191      : 
      192      | tfpdef 
               ;

  102       (',' '**' tfpdef)
      193      : ',' '**' tfpdef 
               ;

  103       (',' '**' tfpdef)?
      194      : 
      195      | (',' '**' tfpdef) 
               ;

  104       ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)
      196      : '*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? 
      197      | '**' tfpdef 
               ;

  105       ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?
      198      : 
      199      | ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef) 
               ;

  106       (',' ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?)
      200      : ',' ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)? 
               ;

  107       (',' ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?)?
      201      : 
      202      | (',' ('*' tfpdef? (',' tfpdef ('=' test)?)* (',' '**' tfpdef)? | '**' tfpdef)?) 
               ;

  108       (':' test)
      203      : ':' test 
               ;

  109       (':' test)?
      204      : 
      205      | (':' test) 
               ;

  110       (',' vfpdef ('=' test)?)
      206      : ',' vfpdef ('=' test)? 
               ;

  111       (',' vfpdef ('=' test)?)*
      207      : 
      208      | (',' vfpdef ('=' test)?)* (',' vfpdef ('=' test)?) 
               ;

  112       vfpdef?
      209      : 
      210      | vfpdef 
               ;

  113       (',' '**' vfpdef)
      211      : ',' '**' vfpdef 
               ;

  114       (',' '**' vfpdef)?
      212      : 
      213      | (',' '**' vfpdef) 
               ;

  115       ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)
      214      : '*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? 
      215      | '**' vfpdef 
               ;

  116       ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?
      216      : 
      217      | ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef) 
               ;

  117       (',' ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?)
      218      : ',' ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)? 
               ;

  118       (',' ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?)?
      219      : 
      220      | (',' ('*' vfpdef? (',' vfpdef ('=' test)?)* (',' '**' vfpdef)? | '**' vfpdef)?) 
               ;

  119       (';' small_stmt)
      221      : ';' small_stmt 
               ;

  120       (';' small_stmt)*
      222      : 
      223      | (';' small_stmt)* (';' small_stmt) 
               ;

  121       ';'?
      224      : 
      225      | ';' 
               ;

  122       (yield_expr | testlist)
      226      : yield_expr 
      227      | testlist 
               ;

  123       (yield_expr | testlist_star_expr)
      228      : yield_expr 
      229      | testlist_star_expr 
               ;

  124       ('=' (yield_expr | testlist_star_expr))
      230      : '=' (yield_expr | testlist_star_expr) 
               ;

  125       ('=' (yield_expr | testlist_star_expr))*
      231      : 
      232      | ('=' (yield_expr | testlist_star_expr))* ('=' (yield_expr | testlist_star_expr)) 
               ;

  126       (augassign (yield_expr | testlist) | ('=' (yield_expr | testlist_star_expr))*)
      233      : augassign (yield_expr | testlist) 
      234      | ('=' (yield_expr | testlist_star_expr))* 
               ;

  127       (test | star_expr)
      235      : test 
      236      | star_expr 
               ;

  128       (',' (test | star_expr))
      237      : ',' (test | star_expr) 
               ;

  129       (',' (test | star_expr))*
      238      : 
      239      | (',' (test | star_expr))* (',' (test | star_expr)) 
               ;

  130       ','?
      240      : 
      241      | ',' 
               ;

  131       testlist?
      242      : 
      243      | testlist 
               ;

  132       (FROM test)
      244      : 'FROM' test 
               ;

  133       (FROM test)?
      245      : 
      246      | (FROM test) 
               ;

  134       (test (FROM test)?)
      247      : test (FROM test)? 
               ;

  135       (test (FROM test)?)?
      248      : 
      249      | (test (FROM test)?) 
               ;

  136       ('.' | '...')
      250      : '.' 
      251      | '...' 
               ;

  137       ('.' | '...')*
      252      : 
      253      | ('.' | '...')* ('.' | '...') 
               ;

  138       ('.' | '...')+
      254      : ('.' | '...') 
      255      | ('.' | '...')+ ('.' | '...') 
               ;

  139       (('.' | '...')* dotted_name | ('.' | '...')+)
      256      : ('.' | '...')* dotted_name 
      257      | ('.' | '...')+ 
               ;

  140       ('*' | '(' import_as_names ')' | import_as_names)
      258      : '*' 
      259      | '(' import_as_names ')' 
      260      | import_as_names 
               ;

  141       (AS NAME)
      261      : 'AS' 'NAME' 
               ;

  142       (AS NAME)?
      262      : 
      263      | (AS NAME) 
               ;

  143       (',' import_as_name)
      264      : ',' import_as_name 
               ;

  144       (',' import_as_name)*
      265      : 
      266      | (',' import_as_name)* (',' import_as_name) 
               ;

  145       (',' dotted_as_name)
      267      : ',' dotted_as_name 
               ;

  146       (',' dotted_as_name)*
      268      : 
      269      | (',' dotted_as_name)* (',' dotted_as_name) 
               ;

  147       ('.' NAME)
      270      : '.' 'NAME' 
               ;

  148       ('.' NAME)*
      271      : 
      272      | ('.' NAME)* ('.' NAME) 
               ;

  149       (',' NAME)
      273      : ',' 'NAME' 
               ;

  150       (',' NAME)*
      274      : 
      275      | (',' NAME)* (',' NAME) 
               ;

  151       (',' test)
      276      : ',' test 
               ;

  152       (',' test)?
      277      : 
      278      | (',' test) 
               ;

  153       (ELIF test ':' suite)
      279      : 'ELIF' test ':' suite 
               ;

  154       (ELIF test ':' suite)*
      280      : 
      281      | (ELIF test ':' suite)* (ELIF test ':' suite) 
               ;

  155       (ELSE ':' suite)
      282      : 'ELSE' ':' suite 
               ;

  156       (ELSE ':' suite)?
      283      : 
      284      | (ELSE ':' suite) 
               ;

  157       (except_clause ':' suite)
      285      : except_clause ':' suite 
               ;

  158       (except_clause ':' suite)+
      286      : (except_clause ':' suite) 
      287      | (except_clause ':' suite)+ (except_clause ':' suite) 
               ;

  159       (FINALLY ':' suite)
      288      : 'FINALLY' ':' suite 
               ;

  160       (FINALLY ':' suite)?
      289      : 
      290      | (FINALLY ':' suite) 
               ;

  161       ((except_clause ':' suite)+ (ELSE ':' suite)? (FINALLY ':' suite)? | FINALLY ':' suite)
      291      : (except_clause ':' suite)+ (ELSE ':' suite)? (FINALLY ':' suite)? 
      292      | 'FINALLY' ':' suite 
               ;

  162       (',' with_item)
      293      : ',' with_item 
               ;

  163       (',' with_item)*
      294      : 
      295      | (',' with_item)* (',' with_item) 
               ;

  164       (AS expr)
      296      : 'AS' expr 
               ;

  165       (AS expr)?
      297      : 
      298      | (AS expr) 
               ;

  166       (test (AS NAME)?)
      299      : test (AS NAME)? 
               ;

  167       (test (AS NAME)?)?
      300      : 
      301      | (test (AS NAME)?) 
               ;

  168       stmt+
      302      : stmt 
      303      | stmt+ stmt 
               ;

  169       (IF or_test ELSE test)
      304      : 'IF' or_test 'ELSE' test 
               ;

  170       (IF or_test ELSE test)?
      305      : 
      306      | (IF or_test ELSE test) 
               ;

  171       varargslist?
      307      : 
      308      | varargslist 
               ;

  172       (OR and_test)
      309      : 'OR' and_test 
               ;

  173       (OR and_test)*
      310      : 
      311      | (OR and_test)* (OR and_test) 
               ;

  174       (AND not_test)
      312      : 'AND' not_test 
               ;

  175       (AND not_test)*
      313      : 
      314      | (AND not_test)* (AND not_test) 
               ;

  176       (comp_op star_expr)
      315      : comp_op star_expr 
               ;

  177       (comp_op star_expr)*
      316      : 
      317      | (comp_op star_expr)* (comp_op star_expr) 
               ;

  178       '*'?
      318      : 
      319      | '*' 
               ;

  179       ('|' xor_expr)
      320      : '|' xor_expr 
               ;

  180       ('|' xor_expr)*
      321      : 
      322      | ('|' xor_expr)* ('|' xor_expr) 
               ;

  181       ('^' and_expr)
      323      : '^' and_expr 
               ;

  182       ('^' and_expr)*
      324      : 
      325      | ('^' and_expr)* ('^' and_expr) 
               ;

  183       ('&' shift_expr)
      326      : '&' shift_expr 
               ;

  184       ('&' shift_expr)*
      327      : 
      328      | ('&' shift_expr)* ('&' shift_expr) 
               ;

  185       ('<<' arith_expr | '>>' arith_expr)
      329      : '<<' arith_expr 
      330      | '>>' arith_expr 
               ;

  186       ('<<' arith_expr | '>>' arith_expr)*
      331      : 
      332      | ('<<' arith_expr | '>>' arith_expr)* ('<<' arith_expr | '>>' arith_expr) 
               ;

  187       ('+' term | '-' term)
      333      : '+' term 
      334      | '-' term 
               ;

  188       ('+' term | '-' term)*
      335      : 
      336      | ('+' term | '-' term)* ('+' term | '-' term) 
               ;

  189       ('*' factor | '/' factor | '%' factor | '//' factor | '@' factor)
      337      : '*' factor 
      338      | '/' factor 
      339      | '%' factor 
      340      | '//' factor 
      341      | '@' factor 
               ;

  190       ('*' factor | '/' factor | '%' factor | '//' factor | '@' factor)*
      342      : 
      343      | ('*' factor | '/' factor | '%' factor | '//' factor | '@' factor)* ('*' factor | '/' factor | '%' factor | '//' factor | '@' factor) 
               ;

  191       trailer*
      344      : 
      345      | trailer* trailer 
               ;

  192       ('**' factor)
      346      : '**' factor 
               ;

  193       ('**' factor)?
      347      : 
      348      | ('**' factor) 
               ;

  194       (yield_expr | testlist_comp)
      349      : yield_expr 
      350      | testlist_comp 
               ;

  195       (yield_expr | testlist_comp)?
      351      : 
      352      | (yield_expr | testlist_comp) 
               ;

  196       testlist_comp?
      353      : 
      354      | testlist_comp 
               ;

  197       dictorsetmaker?
      355      : 
      356      | dictorsetmaker 
               ;

  198       str+
      357      : str 
      358      | str+ str 
               ;

  199       (',' test)*
      359      : 
      360      | (',' test)* (',' test) 
               ;

  200       (comp_for | (',' test)* ','?)
      361      : comp_for 
      362      | (',' test)* ','? 
               ;

  201       (',' subscript)
      363      : ',' subscript 
               ;

  202       (',' subscript)*
      364      : 
      365      | (',' subscript)* (',' subscript) 
               ;

  203       test?
      366      : 
      367      | test 
               ;

  204       sliceop?
      368      : 
      369      | sliceop 
               ;

  205       (',' star_expr)
      370      : ',' star_expr 
               ;

  206       (',' star_expr)*
      371      : 
      372      | (',' star_expr)* (',' star_expr) 
               ;

  207       (',' test ':' test)
      373      : ',' test ':' test 
               ;

  208       (',' test ':' test)*
      374      : 
      375      | (',' test ':' test)* (',' test ':' test) 
               ;

  209       (comp_for | (',' test ':' test)* ','?)
      376      : comp_for 
      377      | (',' test ':' test)* ','? 
               ;

  210       (argument ',')
      378      : argument ',' 
               ;

  211       (argument ',')*
      379      : 
      380      | (argument ',')* (argument ',') 
               ;

  212       (',' argument)
      381      : ',' argument 
               ;

  213       (',' argument)*
      382      : 
      383      | (',' argument)* (',' argument) 
               ;

  214       (',' '**' test)
      384      : ',' '**' test 
               ;

  215       (',' '**' test)?
      385      : 
      386      | (',' '**' test) 
               ;

  216       (argument ','? | '*' test (',' argument)* (',' '**' test)? | '**' test)
      387      : argument ','? 
      388      | '*' test (',' argument)* (',' '**' test)? 
      389      | '**' test 
               ;

  217       comp_for?
      390      : 
      391      | comp_for 
               ;

  218       comp_iter?
      392      : 
      393      | comp_iter 
               ;

  219       yield_arg?
      394      : 
      395      | yield_arg 
               ;

/* End of Python grammar 

