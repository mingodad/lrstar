#include "lrstar_basic_defs.h"
#include "lrstar_parser_tables.h"
#include "Java1_LexerTables_typedef.h"
#include "Java1_ParserTables_typedef.h"
#include "Java1_Parser.h"

template<>
const int Java1_parser_tables_t::n_term_symb = 99;

template<>
const int Java1_parser_tables_t::n_head_symb = 99;

template<>
const int Java1_parser_tables_t::n_tact_name = 2;

template<>
const int Java1_parser_tables_t::n_node_name = 0;

template<>
const int Java1_parser_tables_t::n_head_numb = 270;

template<>
const int Java1_parser_tables_t::n_f_tail = 271;

template<>
const int Java1_parser_tables_t::n_tail = 568;

template<>
const int Java1_parser_tables_t::n_arga = 99;

template<>
const int Java1_parser_tables_t::n_argx = 0;

template<>
const int Java1_parser_tables_t::n_argy = 0;

template<>
const int Java1_parser_tables_t::n_Bm = 266;

template<>
const int Java1_parser_tables_t::n_Br = 236;

template<>
const int Java1_parser_tables_t::n_Bc = 99;

template<>
const int Java1_parser_tables_t::n_Bf = 99;

template<>
const int Java1_parser_tables_t::n_Tm = 608;

template<>
const int Java1_parser_tables_t::n_Tr = 236;

template<>
const int Java1_parser_tables_t::n_Tc = 99;

template<>
const int Java1_parser_tables_t::n_Nm = 3135;

template<>
const int Java1_parser_tables_t::n_Nr = 236;

template<>
const int Java1_parser_tables_t::n_Nc = 270;

template<>
const int Java1_parser_tables_t::n_Rm = 49;

template<>
const int Java1_parser_tables_t::n_Rr = 236;

template<>
const int Java1_parser_tables_t::n_Rc = 99;

template<>
const int Java1_parser_tables_t::n_PL = 270;

template<>
const int Java1_parser_tables_t::n_nd_fterm = 0;

template<>
const int Java1_parser_tables_t::n_nd_term = 0;

template<>
const int Java1_parser_tables_t::n_nd_faction = 0;

template<>
const int Java1_parser_tables_t::n_nd_action = 0;

template<>
const int Java1_parser_tables_t::n_tact_numb = 99;

template<>
const int Java1_parser_tables_t::n_node_numb = 0;

template<>
const int Java1_parser_tables_t::n_nact_numb = 0;

template<>
const int Java1_parser_tables_t::n_reverse = 0;

template<>
const int Java1_parser_tables_t::n_terms = 99; // Number of terminals.

template<>
const int Java1_parser_tables_t::n_heads = 99; // Number of nonterminals.

template<>
const int Java1_parser_tables_t::n_prods = 270; // Number of productions.

template<>
const int Java1_parser_tables_t::n_states = 236; // Number of states.

template<>
const int Java1_parser_tables_t::accept_state = 235; // Accept state.

template<>
const int Java1_parser_tables_t::n_termactns = 2; // Number of terminal actions.

template<>
const int Java1_parser_tables_t::n_nodenames = 0; // Number of node names.

template<>
const int Java1_parser_tables_t::n_nodeactns = 0; // Number of node actions.

template<>
const int Java1_parser_tables_t::eof_symb = 1; // <eof> symbol number.

template<>
const int Java1_parser_tables_t::err_used = 0; // <error> used in grammar?


// Terminal symbols of the grammar.
static const char *term_symb_[99] = {
   "<error>",
   "<eof>",
   "<identifier>",
   "<literal>",
   "\'boolean\'",
   "\'char\'",
   "\'byte\'",
   "\'short\'",
   "\'int\'",
   "\'long\'",
   "\'float\'",
   "\'double\'",
   "\'void\'",
   "\'enum\'",
   "\'package\'",
   "\'import\'",
   "\'abstract\'",
   "\'final\'",
   "\'public\'",
   "\'protected\'",
   "\'private\'",
   "\'static\'",
   "\'transient\'",
   "\'volatile\'",
   "\'native\'",
   "\'synchronized\'",
   "\'class\'",
   "\'interface\'",
   "\'implements\'",
   "\'op_dim\'",
   "\'throws\'",
   "\'extends\'",
   "\'case\'",
   "\'default\'",
   "\'if\'",
   "\'else\'",
   "\'switch\'",
   "\'while\'",
   "\'do\'",
   "\'for\'",
   "\'break\'",
   "\'continue\'",
   "\'return\'",
   "\'throw\'",
   "\'try\'",
   "\'catch\'",
   "\'finally\'",
   "\'this\'",
   "\'super\'",
   "\'jnull\'",
   "\'new\'",
   "\'instanceof\'",
   "\',\'",
   "\';\'",
   "\'STATUC\'",
   "\'.\'",
   "\'*\'",
   "\'{\'",
   "\'}\'",
   "\'=\'",
   "\'(\'",
   "\')\'",
   "\':\'",
   "\'[\'",
   "\']\'",
   "\'++\'",
   "\'--\'",
   "\'~\'",
   "\'!\'",
   "\'+\'",
   "\'-\'",
   "\'/\'",
   "\'%\'",
   "\'<<\'",
   "\'>>\'",
   "\'>>>\'",
   "\'<\'",
   "\'>\'",
   "\'<=\'",
   "\'>=\'",
   "\'==\'",
   "\'!=\'",
   "\'&\'",
   "\'^\'",
   "\'|\'",
   "\'&&\'",
   "\'||\'",
   "\'?\'",
   "\'*=\'",
   "\'/=\'",
   "\'%=\'",
   "\'+=\'",
   "\'-=\'",
   "\'<<=\'",
   "\'>>=\'",
   "\'>>>=\'",
   "\'&=\'",
   "\'^=\'",
   "\'|=\'",
};

template<>
const char * const *Java1_parser_tables_t::term_symb = &term_symb_[0];

// Nonterminal symbols of the grammar.
static const char *head_symb_[99] = {
   "Goal",
   "TypeSpecifier",
   "TypeName",
   "ClassNameList",
   "PrimitiveType",
   "CompilationUnit",
   "ProgramFile",
   "PackageStatement",
   "TypeDeclarations",
   "ImportStatements",
   "ImportStatement",
   "QualifiedName",
   "TypeDeclaration",
   "ClassHeader",
   "Modifiers",
   "Modifier",
   "ClassWord",
   "Interfaces",
   "FieldDeclarations",
   "FieldDeclaration",
   "FieldVariableDeclaration",
   "VariableDeclarators",
   "VariableDeclarator",
   "VariableInitializer",
   "ArrayInitializers",
   "MethodDeclaration",
   "MethodDeclarator",
   "ParameterList",
   "Parameter",
   "DeclaratorName",
   "Throws",
   "MethodBody",
   "ConstructorDeclaration",
   "ConstructorDeclarator",
   "StaticInitializer",
   "NonStaticInitializer",
   "Extends",
   "Block",
   "LocalVariableDeclarationsAndStatements",
   "LocalVariableDeclarationOrStatement",
   "LocalVariableDeclarationStatement",
   "Statement",
   "EmptyStatement",
   "LabeledStatement",
   "ExpressionStatement",
   "SelectionStatement",
   "IterationStatement",
   "ForInit",
   "ForExpr",
   "ForIncr",
   "ExpressionStatements",
   "JumpStatement",
   "GuardingStatement",
   "Catches",
   "Catch",
   "CatchHeader",
   "Finally",
   "PrimaryExpression",
   "NotJustName",
   "ComplexPrimary",
   "ComplexPrimaryNoParenthesis",
   "ArrayAccess",
   "FieldAccess",
   "MethodCall",
   "MethodAccess",
   "SpecialName",
   "ArgumentList",
   "NewAllocationExpression",
   "ClassAllocationExpression",
   "ArrayAllocationExpression",
   "DimExprs",
   "DimExpr",
   "Dims",
   "PostfixExpression",
   "RealPostfixExpression",
   "UnaryExpression",
   "LogicalUnaryExpression",
   "LogicalUnaryOperator",
   "ArithmeticUnaryOperator",
   "CastExpression",
   "PrimitiveTypeExpression",
   "ClassTypeExpression",
   "MultiplicativeExpression",
   "AdditiveExpression",
   "ShiftExpression",
   "RelationalExpression",
   "EqualityExpression",
   "AndExpression",
   "ExclusiveOrExpression",
   "InclusiveOrExpression",
   "ConditionalAndExpression",
   "ConditionalOrExpression",
   "ConditionalExpression",
   "AssignmentExpression",
   "AssignmentOperator",
   "Expression",
   "ConstantExpression",
   "'static'?",
   "STATUC?",
};

template<>
const char * const *Java1_parser_tables_t::head_symb = &head_symb_[0];

// Terninal action names found in the grammar ...
static const char *tact_name_[2] = {
   "error",
   "lookup",
};

template<>
const char * const *Java1_parser_tables_t::tact_name = &tact_name_[0];

template<>
const char * const *Java1_parser_tables_t::node_name = 0;

// Head symbol numbers for the productions.
static const uint8 head_numb_[270] = {
       0,     1,     1,     2,     2,     3,     3,     4,     4,     4, 
       4,     4,     4,     4,     4,     4,     5,     6,     6,     6, 
       6,     6,     6,     6,     7,     8,     8,     9,     9,    10, 
      10,    11,    11,    11,    12,    12,    13,    13,    13,    13, 
      13,    13,    13,    13,    14,    14,    15,    15,    15,    15, 
      15,    15,    15,    15,    15,    15,    15,    16,    16,    17, 
      18,    18,    19,    19,    19,    19,    19,    19,    20,    20, 
      21,    21,    22,    22,    23,    23,    23,    24,    24,    24, 
      25,    25,    25,    25,    26,    26,    26,    27,    27,    28, 
      29,    29,    30,    31,    31,    32,    32,    32,    32,    33, 
      33,    34,    35,    36,    36,    37,    37,    38,    38,    39, 
      39,    40,    41,    41,    41,    41,    41,    41,    41,    41, 
      42,    43,    43,    43,    44,    45,    45,    45,    46,    46, 
      46,    46,    47,    47,    47,    48,    48,    49,    50,    50, 
      51,    51,    51,    51,    51,    51,    51,    52,    52,    52, 
      52,    53,    53,    54,    55,    55,    56,    57,    57,    58, 
      58,    58,    59,    59,    60,    60,    60,    60,    61,    61, 
      62,    62,    63,    63,    64,    64,    64,    65,    65,    65, 
      66,    66,    67,    67,    67,    67,    67,    67,    68,    68, 
      69,    69,    70,    70,    71,    72,    72,    73,    73,    74, 
      74,    75,    75,    75,    75,    76,    76,    77,    77,    78, 
      78,    79,    79,    79,    79,    80,    80,    81,    82,    82, 
      82,    82,    83,    83,    83,    84,    84,    84,    84,    85, 
      85,    85,    85,    85,    85,    86,    86,    86,    87,    87, 
      88,    88,    89,    89,    90,    90,    91,    91,    92,    92, 
      93,    93,    94,    94,    94,    94,    94,    94,    94,    94, 
      94,    94,    94,    94,    95,    96,    97,    97,    98,    98, 
};

template<>
const uint8 *Java1_parser_tables_t::head_numb = &head_numb_[0];

// First tail symbol index into the tail list ...
static const uint16 f_tail_[271] = {
       0,     2,     3,     5,     6,     7,     8,    11,    12,    13, 
      14,    15,    16,    17,    18,    19,    20,    21,    24,    26, 
      28,    30,    31,    32,    33,    36,    37,    39,    40,    42, 
      46,    52,    53,    56,    59,    63,    66,    71,    75,    79, 
      83,    86,    89,    92,    94,    95,    97,    98,    99,   100, 
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110, 
     112,   113,   115,   117,   118,   119,   120,   121,   122,   125, 
     127,   128,   131,   132,   135,   136,   138,   141,   142,   145, 
     147,   152,   156,   160,   163,   167,   170,   172,   173,   176, 
     178,   179,   181,   183,   184,   185,   189,   192,   195,   197, 
     201,   204,   206,   207,   209,   212,   215,   217,   218,   220, 
     221,   222,   225,   226,   227,   229,   230,   231,   232,   233, 
     234,   235,   238,   242,   245,   246,   251,   258,   263,   268, 
     275,   282,   288,   290,   291,   292,   294,   295,   296,   297, 
     300,   303,   305,   308,   310,   313,   315,   318,   323,   326, 
     329,   333,   334,   336,   338,   343,   347,   349,   350,   351, 
     352,   353,   354,   357,   358,   359,   360,   361,   362,   366, 
     370,   373,   376,   380,   383,   384,   385,   386,   387,   388, 
     389,   390,   393,   394,   395,   398,   401,   405,   409,   414, 
     418,   422,   425,   426,   428,   431,   432,   434,   435,   436, 
     438,   440,   442,   444,   446,   447,   448,   450,   451,   452, 
     453,   454,   455,   459,   463,   467,   468,   470,   472,   473, 
     476,   479,   482,   483,   486,   489,   490,   493,   496,   499, 
     500,   503,   506,   509,   512,   515,   516,   519,   522,   523, 
     526,   527,   530,   531,   534,   535,   538,   539,   542,   543, 
     548,   549,   552,   553,   554,   555,   556,   557,   558,   559, 
     560,   561,   562,   563,   564,   565,   566,   566,   567,   567, 
     568, 
};

template<>
const uint16 *Java1_parser_tables_t::f_tail = &f_tail_[0];

// Tail symbol numbers ...
static const int8 tail_[568] = {
      -5,     1,    -2,    -2,   -72,    -4,   -11,   -11,    -3,    52, 
     -11,     4,     5,     6,     7,     8,     9,    10,    11,    12, 
      -6,    -7,    -9,    -8,    -7,    -9,    -7,    -8,    -9,    -8, 
      -7,    -9,    -8,    14,   -11,    53,   -12,    -8,   -12,   -10, 
      -9,   -10,    15,   -97,   -11,    53,    15,   -98,   -11,    55, 
      56,    53,     2,   -11,    55,     2,   -11,    55,    56,   -13, 
      57,   -18,    58,   -13,    57,    58,   -14,   -16,     2,   -36, 
     -17,   -14,   -16,     2,   -36,   -14,   -16,     2,   -17,   -16, 
       2,   -36,   -17,   -14,   -16,     2,   -16,     2,   -36,   -16, 
       2,   -17,   -16,     2,   -15,   -14,   -15,    16,    17,    18, 
      19,    20,    21,    22,    23,    24,    25,    13,    26,    27, 
      28,    -3,   -19,   -18,   -19,   -20,    53,   -25,   -32,   -34, 
     -35,   -12,   -14,    -1,   -21,    -1,   -21,   -22,   -21,    52, 
     -22,   -29,   -29,    59,   -23,   -95,    57,    58,    57,   -24, 
      58,   -23,   -24,    52,   -23,   -24,    52,   -14,    -1,   -26, 
     -30,   -31,   -14,    -1,   -26,   -31,    -1,   -26,   -30,   -31, 
      -1,   -26,   -31,   -29,    60,   -27,    61,   -29,    60,    61, 
     -26,    29,   -28,   -27,    52,   -28,    -1,   -29,     2,   -29, 
      29,    30,    -3,   -37,    53,   -14,   -33,   -30,   -37,   -14, 
     -33,   -37,   -33,   -30,   -37,   -33,   -37,     2,    60,   -27, 
      61,     2,    60,    61,    21,   -37,   -37,    31,    -2,   -36, 
      52,    -2,    57,   -38,    58,    57,    58,   -39,   -38,   -39, 
     -40,   -41,    -1,   -21,    53,   -42,   -43,   -44,    53,   -45, 
     -46,   -51,   -52,   -37,    53,     2,    62,   -39,    32,   -96, 
      62,   -39,    33,    62,   -39,   -95,    34,    60,   -95,    61, 
     -41,    34,    60,   -95,    61,   -41,    35,   -41,    36,    60, 
     -95,    61,   -37,    37,    60,   -95,    61,   -41,    38,   -41, 
      37,    60,   -95,    61,    53,    39,    60,   -47,   -48,   -49, 
      61,   -41,    39,    60,   -47,   -48,    61,   -41,   -50,    53, 
     -40,    53,   -95,    53,    53,   -50,   -44,   -50,    52,   -44, 
      40,     2,    53,    40,    53,    41,     2,    53,    41,    53, 
      42,   -95,    53,    42,    53,    43,   -95,    53,    25,    60, 
     -95,    61,   -41,    44,   -37,   -56,    44,   -37,   -53,    44, 
     -37,   -53,   -56,   -54,   -53,   -54,   -55,   -37,    45,    60, 
      -1,     2,    61,    45,    60,    -1,    61,    46,   -37,   -11, 
     -58,   -65,   -67,   -59,    60,   -95,    61,   -60,     3,   -61, 
     -62,   -63,   -11,    63,   -95,    64,   -59,    63,   -95,    64, 
     -58,    55,     2,   -74,    55,     2,   -64,    60,   -66,    61, 
     -64,    60,    61,   -60,   -65,   -11,    47,    48,    49,   -95, 
     -66,    52,   -95,   -69,   -68,   -69,    57,    58,   -68,    57, 
      58,   -69,    57,   -24,    58,   -68,    57,   -18,    58,    50, 
      -2,    60,   -66,    61,    50,    -2,    60,    61,    50,    -2, 
     -70,   -72,    50,    -2,   -70,   -71,   -70,   -71,    63,   -95, 
      64,    29,   -72,    29,   -57,   -74,   -73,    65,   -73,    66, 
      65,   -75,    66,   -75,   -78,   -79,   -76,   -73,   -77,   -75, 
      67,    68,    69,    70,   -75,    60,   -80,    61,   -79,    60, 
     -81,    61,   -79,    60,   -95,    61,   -76,    -4,    -4,   -72, 
     -11,   -72,   -79,   -82,    56,   -79,   -82,    71,   -79,   -82, 
      72,   -79,   -82,   -83,    69,   -82,   -83,    70,   -82,   -83, 
     -84,    73,   -83,   -84,    74,   -83,   -84,    75,   -83,   -84, 
     -85,    76,   -84,   -85,    77,   -84,   -85,    78,   -84,   -85, 
      79,   -84,   -85,    51,    -1,   -85,   -86,    80,   -85,   -86, 
      81,   -85,   -86,   -87,    82,   -86,   -87,   -88,    83,   -87, 
     -88,   -89,    84,   -88,   -89,   -90,    85,   -89,   -90,   -91, 
      86,   -90,   -91,   -91,    87,   -95,    62,   -92,   -92,   -75, 
     -94,   -93,    59,    88,    89,    90,    91,    92,    93,    94, 
      95,    96,    97,    98,   -93,   -92,    21,    54, 
};

template<>
const int8 *Java1_parser_tables_t::tail = &tail_[0];

// Arguments for token actions ...
static const int8 arga_[99] = {
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *Java1_parser_tables_t::arga = &arga_[0];

template<>
const uint32 *Java1_parser_tables_t::argx = 0;

template<>
const uint32 *Java1_parser_tables_t::argy = 0;

// Boolean matrix ...
static const uint8 Bm_[266] = {
       0,     0,     0,     0,     0,   224,     3,     0,     0,     0, 
       0,     2,     0,     0,     0,     0,   160,     3,     0,     0, 
       0,    32,     3,     0,     0,     0,     0,     1,     0,     0, 
       4,     0,     0,     0,     0,     0,     1,    32,     0,     0, 
       0,    52,     3,     0,     3,     0,     0,    36,     0,     0, 
       0,    80,     0,     0,    16,     0,     0,     0,    52,     3, 
       0,     0,     0,     8,     0,     0,     0,    64,     0,     0, 
      16,     0,     1,     0,     0,    28,    66,    17,    11,     3, 
       0,     4,     8,     0,     0,     0,    20,     0,     0,     0, 
       0,     0,     4,     0,   128,     0,     0,     8,     0,    12, 
       0,    24,    16,     1,     0,     0,    20,     0,     0,    16, 
       0,     0,    64,    64,     0,     0,     0,     0,     0,     2, 
       0,     0,     0,     0,   128,     0,     0,     0,     0,    64, 
       0,     0,     0,     0,    32,     0,     0,     0,     0,    16, 
       0,     0,     0,     0,     8,     0,     0,   128,     0,     4, 
       0,     0,     0,     4,     0,    12,     0,     0,     8,     3, 
       0,    28,     0,     0,     8,     3,     0,    12,    66,    17, 
       9,     3,     0,     4,     0,    16,     0,     0,     0,    12, 
       0,    16,     8,     3,     0,    12,     0,     0,     9,     3, 
       0,     0,    16,     1,     0,     0,     8,    16,     0,     0, 
      24,     0,     0,     8,     0,     4,     0,     0,    12,     0, 
       0,    11,     3,     0,    12,     0,     0,    24,     3,     0, 
      28,    66,    17,     9,     3,     0,     0,     0,    72,     0, 
       8,    64,    64,     0,     0,     1,     0,     0,     0,    28, 
       0,    16,     8,     3,     0,     0,     8,     2,     0,     8, 
       0,    64,     0,     0,    12,     0,     0,     8,     0,     0, 
       4,     0,     0,    16,     0,     0, 
};

template<>
const uint8 *Java1_parser_tables_t::Bm = &Bm_[0];

// Boolean matrix row (for state)...
static const uint16 Br_[236] = {
       5,    11,    16,    16,    21,    24,    21,    30,    30,    35, 
      16,    21,    21,    41,    30,    46,    49,    30,    30,    21, 
      41,    52,    58,    30,    62,    65,    69,    24,    60,    75, 
      46,    80,    86,    30,    92,    49,    65,    30,    69,    61, 
      96,   100,    62,    24,    30,   106,    75,    30,   110,    52, 
     114,    31,   120,   125,   130,   135,    28,   140,     7,   145, 
     150,   155,    23,    65,     0,    24,    24,    64,     0,    65, 
      60,   155,   131,   155,   131,   155,   155,    86,   161,    60, 
      60,    60,   167,    60,   173,   173,   179,   155,    60,    24, 
      80,    86,    61,    65,    92,    61,   100,    24,    30,   185, 
     106,   190,    61,   194,    30,   198,   202,   155,   155,   155, 
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155, 
      86,   155,   155,   155,   155,   155,   155,   155,   155,   155, 
     110,    30,   208,    41,   155,    30,   214,   155,   220,   131, 
     220,   225,   136,   229,   136,    62,   136,   155,   155,   155, 
     233,   239,    52,    52,    52,    52,   155,     9,    30,    52, 
     190,   208,   194,    86,    62,   121,    31,   131,   120,   125, 
     130,   135,    28,    28,   140,   140,   140,   140,     7,     7, 
       7,   145,   145,   244,    41,   121,   194,   136,   220,   248, 
     214,   155,   254,    62,   155,    62,   155,   136,   136,   136, 
      60,   179,   198,   136,     9,    24,    24,    60,    65,   244, 
     155,   185,   155,    62,   194,   121,   167,    24,   167,   155, 
     214,    52,   155,   167,    86,   123,   136,   136,    61,   167, 
     260,   167,    52,   167,   136,     0, 
      };

template<>
const uint16 *Java1_parser_tables_t::Br = &Br_[0];

// Boolean matrix column (displacement) ...
static const uint8 Bc_[99] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     1,     0,     0,     0,     1,     0,     0,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1, 
       1,     1,     1,     1,     1,     2,     2,     0,     0,     0, 
       0,     2,     2,     2,     2,     2,     2,     3,     3,     3, 
       3,     3,     3,     3,     3,     4,     4,     0,     0,     4, 
       4,     4,     4,     4,     4,     4,     2,     2,     2,     2, 
       4,     4,     4,     4,     4,     5,     5,     5,     5,     5, 
       5,     5,     5,     5,     5,     5,     5,     5,     5, 
      };

template<>
const uint8 *Java1_parser_tables_t::Bc = &Bc_[0];

// Boolean matrix filter/mask value ...
static const uint8 Bf_[99] = {
       1,     2,     4,     8,    16,    16,    16,    16,    16,    16, 
      16,    16,    16,    32,    64,   128,    32,    32,    32,    32, 
      32,     1,    32,    32,    32,     2,    32,    32,     4,     8, 
      16,    32,    64,    64,    64,   128,    64,     1,    64,    64, 
      64,    64,    64,    64,    64,     2,     2,     8,     8,     8, 
       8,     4,     8,    16,    32,    64,   128,     1,     2,     4, 
       8,    16,    32,    64,   128,     1,     1,     8,     8,     2, 
       2,     4,     4,     8,     8,     8,     4,     4,     4,     4, 
      16,    16,    32,    64,   128,     1,     2,     2,     4,     4, 
       4,     4,     4,     4,     4,     4,     4,     4,     4, 
};

template<>
const uint8 *Java1_parser_tables_t::Bf = &Bf_[0];

// Terminal transition matrix ...
static const int16 Tm_[608] = {
    -171,   234,  -170,     0,   152,     0,   153,     0,     0,     0, 
       0,     0,     0,     0,   -32,     0,     0,     0,     0,   -90, 
       0,     0,     0,     0,     0,  -135,     0,   -30,   -32,  -141, 
     212,  -143,     0,  -155,   233,   190,   223,   219,  -188,  -146, 
       0,   191,   159,   163,  -140,   224,   232,     0,   133,     0, 
     151,   -84,   211,  -142,    30,     0,   -33,     0,    44,   156, 
     216,     0,     0,     0,     0,     0,   -31,     0,  -186,     0, 
    -164,     0,     0,     0,     0,     0,   -86,     0,   163,   -94, 
       0,   131,     0,    29,     0,   147,   -99,  -177,  -178,     0, 
     210,   -31,     0,  -179,     0,  -164,    77,    78,   229,     0, 
      75,    76,  -207,  -208,  -209,  -210,     0,     0,     0,     0, 
     -31,     0,  -177,  -178,  -164,     0,  -136,     0,  -179,     0, 
       0,    77,    78,  -189,     0,    75,    76,  -207,  -208,  -209, 
    -210,  -177,  -178,     0,   211,  -144,     0,  -179,     0,     0, 
      77,   137,   218,     0,    75,    76,  -207,  -208,  -209,  -210, 
     -76,   -31,    -7,    -8,    -9,    44,   -10,     0,     0,     0, 
     -11,     0,     0,     0,     0,  -267,     0,     0,     0,     0, 
     -12,   -13,     0,   -91,   -14,    98,   -62,  -269,    94,   -15, 
      29,    99,   100,  -100,  -169,     0,     0,   140,   134,   -31, 
      -7,    -8,    -9,  -164,   -10,     0,     0,     0,   -11,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,   -12,   -13, 
    -177,  -178,   -14,     0,  -145,     0,  -179,   -15,   161,    77, 
      78,   -85,     0,    75,    76,  -207,  -208,  -209,  -210,  -184, 
     -31,    -7,    -8,    -9,  -164,   -10,     0,     0,     0,   -11, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -12, 
     -13,  -177,  -178,   -14,     0,  -134,     0,  -179,   -15,   161, 
      77,    78,  -173,     0,    75,    76,  -207,  -208,  -209,  -210, 
     -75,    28,    -7,    -8,    -9,     0,   -10,   -56,   -46,   -47, 
     -11,   -48,     0,   -49,   -50,    27,   -52,   -53,   -54,   -57, 
     -12,   -13,   -58,     0,   -14,     0,  -129,   -55,     0,   -15, 
      29,     0,     0,     0,     0,     0,     0,    28,    -7,    -8, 
      -9,  -187,   -10,   -56,   -46,   -47,   -11,   -48,     0,   -49, 
     -50,   -51,   -52,   -53,   -54,   -57,   -12,   -13,   -58,     0, 
     -14,    98,  -111,   -55,     0,   -15,   132,     0,   149,  -162, 
      28,    -7,    -8,    -9,     0,   -10,   -56,   -46,   -47,   -11, 
     -48,     0,   -49,   -50,    27,   -52,   -53,   -54,   -57,   -12, 
     -13,   -58,     0,   -14,   222,  -132,   -55,     0,   -15,    29, 
       0,     0,  -154,     0,     0,     0,    28,    -7,    -8,    -9, 
    -185,   -10,   -56,   -46,   -47,   -11,   -48,     0,   -49,   -50, 
      27,   -52,   -53,   -54,   -57,   -12,   -13,   -58,  -195,   -14, 
     222,  -114,   -55,   135,   -15,    29,     0,   148,   196,     0, 
       0,     0,     0,   191,     0,     0,   -34,    28,    -7,    -8, 
      -9,     0,   -10,   -56,   -46,   -47,   -11,   -48,     0,   -49, 
     -50,    27,   -52,   -53,   -54,   -57,   -12,   -13,   -58,  -196, 
     -14,   158,   -29,   -55,    34,   -15,    29,     0,   136,   194, 
    -194,     0,     0,   188,     0,     0,     0,   -35,    72,    -7, 
      -8,    -9,  -164,   -10,    73,    74,    79,   -11,    80,    81, 
      82,    83,    84,    85,    86,    87,    89,   -12,   -13,  -177, 
    -178,   -14,     0,  -120,    88,  -179,   -15,    29,    77,    78, 
     217,     0,    75,    76,  -207,  -208,  -209,  -210,  -105,    72, 
      -7,    -8,    -9,  -164,   -10,    73,    74,    79,   -11,    80, 
      81,    82,    83,    84,    85,    86,    87,    89,   -12,   -13, 
    -177,  -178,   -14,   212,  -120,    88,  -179,   -15,    29,    77, 
      78,  -172,     0,    75,    76,  -207,  -208,  -209,  -210,  -106, 
      15,     8,     9,    33,   235,    32,   -56,   -46,   -47,   231, 
     -48,   200,   -49,   -50,   -51,   -52,   -53,   -54,   -57,   207, 
     206,   -58,  -195,   120,    91,   -24,   -55,    34,   126,    13, 
    -252,    45,   192,  -168,  -199,  -200,   138,   107,   124,   125, 
     127,   128,   121,   122,   123,   116,   117,   118,   119,   114, 
     115,   113,   112,   111,   110,   108,   109,  -253,  -254,  -255, 
    -256,  -257,  -258,  -259,  -260,  -261,  -262,  -263, 
};

template<>
const int16 *Java1_parser_tables_t::Tm = &Tm_[0];

// Terminal transition matrix row ...
static const uint16 Tr_[236] = {
     540,   540,   540,   540,   540,   540,   540,   540,   151,   151, 
     540,   540,   540,   417,    54,   540,   540,   151,   151,   540, 
     376,   151,   307,    19,   540,   540,   151,   151,   540,   499, 
     540,   540,   151,   151,    28,   417,   151,    19,   151,   151, 
     151,    54,   417,   151,   151,   151,   458,    19,   540,   376, 
     540,   540,   540,   540,   540,   540,   540,   540,   540,   540, 
     540,   189,   540,    54,   540,   307,    19,   151,   540,   376, 
     417,   110,   540,   189,   151,   110,   110,   151,   189,    54, 
     376,   307,   499,    19,     4,     6,   189,   189,    28,   151, 
     540,   151,   417,   540,    14,   151,    54,   151,    19,   189, 
     189,    54,   417,    54,    19,   307,   151,   189,   189,   189, 
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189, 
     151,   189,   189,   189,   189,   189,   189,   189,   189,   189, 
     540,     2,   189,   340,   189,     0,   230,   189,   499,   417, 
     499,     4,   540,   540,   417,   540,   376,   189,   189,   189, 
     540,   230,    19,    28,   110,    14,   189,   540,   151,     2, 
      54,   230,    19,   151,   151,   540,   540,    54,   540,   540, 
     540,   540,   540,   540,   540,   540,   540,   540,   540,   540, 
     540,   540,   540,    28,   271,   151,   499,   307,   499,   376, 
      91,   189,   110,   417,   189,   417,   189,    28,   458,   110, 
       6,    91,   340,     4,   540,   151,   151,    14,   540,   110, 
     189,   189,   189,   417,     6,   417,   499,   151,   499,   189, 
      66,     0,   189,   499,   151,   540,    14,     2,   376,   499, 
       1,   499,   271,   499,   340,   540, 
};

template<>
const uint16 *Java1_parser_tables_t::Tr = &Tr_[0];

// Terminal transition matrix column ...
static const uint8 Tc_[99] = {
       4,     4,     0,     4,     1,     2,     3,     5,     9,    19, 
      20,    23,    28,     6,     1,     2,     7,     8,    10,    12, 
      13,    14,    15,    16,    17,    26,    18,    21,     3,    22, 
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13, 
      14,    15,    16,    17,    18,    19,    20,    21,    22,    27, 
      30,    23,    24,    25,    26,    27,    28,    29,    40,    30, 
      31,    32,    36,    37,    33,    34,    35,    36,    37,    38, 
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48, 
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58, 
      59,    60,    61,    62,    63,    64,    65,    66,    67, 
};

template<>
const uint8 *Java1_parser_tables_t::Tc = &Tc_[0];

// Nonterminal transition matrix ...
static const int16 Nm_[3135] = {
     208,    93,    25,    25,    25,   157,    25,    25,    25,     0, 
      93,   -81,     0,     0,   -93,    -3,    -3,    -3,   160,    -3, 
      -3,    -3,     0,     0,     0,     0,    25,   141,  -104,    24, 
     -95,    24,    24,    24,     0,     0,     0,     0,     0,    -3, 
      92,     0,     0,  -234,     0,   230,   104,   104,   162,   102, 
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   -88,   -87,     0,   104,   103,     0,     0,     0, 
      25,   -83,    38,   164,   -93,     0,     0,     0,   101,     0, 
       0,   -87,   -45,    -3,    14,    25,     6,     0,     0,   -97, 
      19,     0,   -28,     0,     0,    24,     0,   -44,    -3,     7, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37, 
    -103,     0,    36,     6,   -70,   106,   -96,    12,     0,   -28, 
      97,   105,     0,     0,   -44,   -25,     7,   -39,     0,     0, 
       0,     0,    25,    22,    26,   -66,  -102,     0,   -61,    21, 
       5,   -64,   -65,   195,   -44,    -3,     7,   -63,     0,     0, 
       0,     0,   -25,   130,     0,     0,     0,    24,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     5,     0,     0, 
       0,    23,   -67,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,     5,  -214,    71, 
      25,    22,    26,   -66,  -102,    20,   -60,    21,     0,   -64, 
     -65,     0,   -44,    -3,     7,   -63,    63,     0,     0,    67, 
      68,     0,     0,     0,     0,    24,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23, 
     -67,     0,     0,     0,    25,    22,    26,   -66,  -102,   184, 
     -60,    21,     0,   -64,   -65,     5,   -44,    -3,     7,   -63, 
       0,    35,     6,   -70,    40,  -101,    11,    10,   -27,    24, 
      95,    96,    90,   -44,     0,     7,   -38,     0,  -152,   205, 
    -150,     0,     0,    23,   -67,   130,     0,     0,     0,  -156, 
       0,     0,   193,     0,     0,     0,     0,     0,     0,     5, 
       0,   -25,     0,     0,     0,  -165,  -166,  -167,    70,    64, 
       0,  -160,    66,    65,  -197,     0,     5,    62,    69,  -201, 
    -204,    71,    61,   130,     0,     0,     0,  -127,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,    63,     0, 
       0,    67,    68,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,  -202,  -204,    71, 
      61,   130,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,    63,     0,     0,    67, 
      68,  -165,  -166,  -167,    70,    64,     0,  -160,    66,    65, 
    -197,     0,     0,    62,    69,  -211,  -204,    71,    61,  -219, 
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,    63,     0,     0,    67,    68,     0, 
    -165,  -166,  -167,    70,    64,     0,  -160,    66,    65,  -197, 
       0,     0,    62,    69,  -211,  -204,    71,    61,  -220,   130, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,    63,     0,     0,    67,    68,     0,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,  -211,  -204,    71,    61,  -221,   130,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    63,     0,     0,    67,    68,     0,  -165,  -166, 
    -167,    70,    64,     0,  -160,    66,    65,  -197,     0,     0, 
      62,    69,  -211,  -204,    71,    61,  -212,   130,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,    63,     0,     0,    67,    68,     0,  -165,  -166,  -167, 
      70,    64,     0,  -160,    66,    65,  -197,     0,     0,    62, 
      69,  -211,  -204,    71,    61,  -213,   130,   -80,     0,     0, 
     -93,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      63,     0,     0,    67,    68,     0,  -165,  -166,  -167,    70, 
      64,     0,  -160,    66,    65,  -197,     0,     0,    62,    69, 
    -206,  -204,    71,    61,   130,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,    63, 
       0,     0,    67,    68,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,  -211,  -204, 
      71,    61,  -218,   130,     0,   181,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,    63,     0,     0, 
      67,    68,     0,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,  -211,  -204,    71, 
      61,  -218,   130,   -82,   182,     0,   -93,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,    63,     0,     0,    67, 
      68,     0,  -165,  -166,  -167,    70,    64,     0,  -160,    66, 
      65,  -197,     0,     0,    62,    69,  -211,  -204,    71,    61, 
    -203,   130,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,    63,     0,     0,    67,    68, 
       0,  -165,  -166,  -167,    70,    64,     0,  -160,    66,    65, 
    -197,     0,     0,    62,    69,  -211,  -204,    71,    61,  -218, 
     130,     0,    59,   178,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,    63,     0,     0,    67,    68,     0, 
    -165,  -166,  -167,    70,    64,     0,  -160,    66,    65,  -197, 
       0,     0,    62,    69,  -211,  -204,    71,    61,  -218,   130, 
       0,    59,   179,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,    63,     0,     0,    67,    68,     0,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,  -211,  -204,    71,    61,  -218,   130,     0, 
      59,   180,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,    63,     0,     0,    67,    68,     0,  -165,  -166, 
    -167,    70,    64,     0,  -160,    66,    65,  -197,     0,     0, 
      62,    69,  -211,  -204,    71,    61,  -218,   130,     0,    59, 
      58,   174,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,    63,     0,     0,    67,    68,     0,  -165,  -166,  -167, 
      70,    64,     0,  -160,    66,    65,  -197,     0,     0,    62, 
      69,  -211,  -204,    71,    61,  -218,   130,     0,    59,    58, 
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      63,     0,     0,    67,    68,     0,  -165,  -166,  -167,    70, 
      64,     0,  -160,    66,    65,  -197,     0,     0,    62,    69, 
    -211,  -204,    71,    61,  -218,   130,     0,    59,    58,   176, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,    63, 
       0,     0,    67,    68,     0,  -165,  -166,  -167,    70,    64, 
       0,  -160,    66,    65,  -197,     0,     0,    62,    69,  -211, 
    -204,    71,    61,  -218,   130,     0,    59,    58,   177,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,    63,     0, 
       0,    67,    68,     0,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,  -211,  -204, 
      71,    61,  -218,   130,     0,    59,    58,    57,   172,     0, 
       0,     0,     0,     0,     0,     0,     0,    63,     0,     0, 
      67,    68,     0,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,  -211,  -204,    71, 
      61,  -218,   130,     0,    59,    58,    57,   173,     0,     0, 
       0,     0,     0,     0,     0,     0,    63,     0,     0,    67, 
      68,     0,  -165,  -166,  -167,    70,    64,     0,  -160,    66, 
      65,  -197,     0,     0,    62,    69,  -211,  -204,    71,    61, 
    -218,   130,     0,    59,    58,    57,    56,   171,     0,     0, 
       0,     0,     0,     0,     0,    63,     0,     0,    67,    68, 
       0,  -165,  -166,  -167,    70,    64,     0,  -160,    66,    65, 
    -197,     0,     0,    62,    69,  -211,  -204,    71,    61,  -218, 
     130,     0,    59,    58,    57,    56,    55,   170,     0,     0, 
       0,     0,     0,     0,    63,     0,     0,    67,    68,     0, 
    -165,  -166,  -167,    70,    64,     0,  -160,    66,    65,  -197, 
       0,     0,    62,    69,  -211,  -204,    71,    61,  -218,   130, 
       0,    59,    58,    57,    56,    55,    54,   169,     0,     0, 
       0,     0,     0,    63,     0,     0,    67,    68,     0,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,  -211,  -204,    71,    61,  -218,   130,     0, 
      59,    58,    57,    56,    55,    54,    53,   168,     0,     0, 
       0,     0,    63,     0,     0,    67,    68,     0,  -165,  -166, 
    -167,    70,    64,     0,  -160,    66,    65,  -197,     0,     0, 
      62,    69,  -211,  -204,    71,    61,  -218,     0,     0,    59, 
      58,    57,    56,    55,    54,    53,    52,   166,     0,     0, 
       0,    63,     0,     0,    67,    68,    16,     6,   -70,    40, 
     -98,     4,     3,   -27,    43,    39,    41,    31,   -44,     2, 
       7,   -42,   204,  -151,   205,  -148,     0,     0,     0,     0, 
       0,     1,     0,     0,     0,   189,  -192,    42,     0,     0, 
       0,     0,     0,     0,   130,   -16,   -25,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
       0,     5,    17,    18,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,  -211,  -204, 
      71,    61,  -218,   130,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -249,     0,    63,     0,     0, 
      67,    68,     0,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,    60,  -204,    71, 
      61,  -218,     0,     0,    59,    58,    57,    56,    55,    54, 
      53,    52,    51,    50,  -250,  -251,    63,   130,     0,    67, 
      68,  -153,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,  -165,  -166,  -167, 
      70,    64,     0,  -160,    66,    65,  -197,     0,     0,    62, 
      69,  -211,  -204,    71,    61,  -218,   130,     0,    59,    58, 
      57,    56,    55,    54,    53,    52,    51,    50,  -265,     0, 
      63,     0,   139,    67,    68,     0,  -165,  -166,  -167,    70, 
      64,     0,  -160,    66,    65,  -197,     0,     0,    62,    69, 
      60,  -204,    71,    61,  -218,   130,     0,    59,    58,    57, 
      56,    55,    54,    53,    52,    51,    50,  -250,  -264,    63, 
     154,     0,    67,    68,     0,  -165,  -166,  -167,    70,    64, 
       0,  -160,    66,    65,  -197,     0,     0,    62,    69,    60, 
    -204,    71,    61,  -218,   130,     0,    59,    58,    57,    56, 
      55,    54,    53,    52,    51,    50,  -250,  -264,    63,   155, 
       0,    67,    68,     0,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,   130,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,   165,     0, 
      67,    68,     0,  -165,  -166,  -167,    70,    64,     0,  -160, 
      66,    65,  -197,     0,     0,    62,    69,    60,  -204,    71, 
      61,  -218,   130,     0,    59,    58,    57,    56,    55,    54, 
      53,    52,    51,    50,  -250,  -264,    63,   167,     0,    67, 
      68,     0,  -165,  -166,  -167,    70,    64,     0,  -160,    66, 
      65,  -197,     0,     0,    62,    69,    60,  -204,    71,    61, 
    -218,   130,     0,    59,    58,    57,    56,    55,    54,    53, 
      52,    51,    50,  -250,  -264,    63,   185,     0,    67,    68, 
       0,  -165,  -166,  -167,    70,    64,     0,  -160,    66,    65, 
    -197,     0,     0,    62,    69,    60,  -204,    71,    61,  -218, 
     130,     0,    59,    58,    57,    56,    55,    54,    53,    52, 
      51,    50,  -250,  -264,    63,   187,     0,    67,    68,     0, 
    -165,  -166,  -167,    70,    64,     0,  -160,    66,    65,  -197, 
       0,     0,    62,    69,    60,  -204,    71,    61,  -218,   130, 
       0,    59,    58,    57,    56,    55,    54,    53,    52,    51, 
      50,  -250,  -264,    63,   197,     0,    67,    68,     0,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,   130,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,   198,     0,    67,    68,     0,  -165,  -166, 
    -167,    70,    64,     0,  -160,    66,    65,  -197,     0,     0, 
      62,    69,    60,  -204,    71,    61,  -218,   130,     0,    59, 
      58,    57,    56,    55,    54,    53,    52,    51,    50,  -250, 
    -264,    63,   199,     0,    67,    68,     0,  -165,  -166,  -167, 
      70,    64,     0,  -160,    66,    65,  -197,     0,     0,    62, 
      69,    60,  -204,    71,    61,  -218,   130,     0,    59,    58, 
      57,    56,    55,    54,    53,    52,    51,    50,  -250,  -264, 
      63,   203,     0,    67,    68,     0,  -165,  -166,  -167,    70, 
      64,     0,  -160,    66,    65,  -197,     0,     0,    62,    69, 
      60,  -204,    71,    61,  -218,   130,     0,    59,    58,    57, 
      56,    55,    54,    53,    52,    51,    50,  -250,  -264,    63, 
     215,     0,    67,    68,     0,  -165,  -166,  -167,    70,    64, 
       0,  -160,    66,    65,  -197,     0,     0,    62,    69,    60, 
    -204,    71,    61,  -218,   130,     0,    59,    58,    57,    56, 
      55,    54,    53,    52,    51,    50,  -250,  -264,    63,  -181, 
       0,    67,    68,     0,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,   130,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,   226,     0, 
      67,    68,     0,  -165,  -166,  -167,    70,    64,   -73,  -160, 
      66,    65,  -197,     0,     0,    62,    69,    60,  -204,    71, 
      61,  -218,   130,     0,    59,    58,    57,    56,    55,    54, 
      53,    52,    51,    50,  -250,  -264,    63,   -74,     0,    67, 
      68,     0,  -165,  -166,  -167,    70,    64,   186,  -160,    66, 
      65,  -197,     0,     0,    62,    69,    60,  -204,    71,    61, 
    -218,   130,     0,    59,    58,    57,    56,    55,    54,    53, 
      52,    51,    50,  -250,  -264,    63,  -180,     0,    67,    68, 
       0,  -165,  -166,  -167,    70,    64,   214,  -160,    66,    65, 
    -197,     0,     0,    62,    69,    60,  -204,    71,    61,  -218, 
       0,     0,    59,    58,    57,    56,    55,    54,    53,    52, 
      51,    50,  -250,  -264,    63,  -180,   130,    67,    68,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220, 
       0,     0,     0,     0,     0,     0,  -165,  -166,  -167,    70, 
      64,     0,  -160,    66,    65,  -197,     0,     0,    62,    69, 
      60,  -204,    71,    61,  -218,   130,     0,    59,    58,    57, 
      56,    55,    54,    53,    52,    51,    50,  -250,  -264,    63, 
     221,     0,    67,    68,     0,  -165,  -166,  -167,    70,    64, 
     -78,  -160,    66,    65,  -197,     0,     0,    62,    69,    60, 
    -204,    71,    61,  -218,     0,     0,    59,    58,    57,    56, 
      55,    54,    53,    52,    51,    50,  -250,  -264,    63,   -74, 
     130,    67,    68,     0,     0,     0,     0,     0,     0,     0, 
       0,  -139,     0,     0,     0,     0,     0,     0,     0,     0, 
    -165,  -166,  -167,    70,    64,     0,  -160,    66,    65,  -197, 
       0,     0,    62,    69,    60,  -204,    71,    61,  -218,   130, 
       0,    59,    58,    57,    56,    55,    54,    53,    52,    51, 
      50,  -250,  -264,    63,  -124,     0,    67,    68,     0,  -165, 
    -166,  -167,    70,    64,   -77,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,   183,   130, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,   -74,     0,    67,    68,     0,     0,  -165, 
    -166,  -167,    70,    64,   -77,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,   209,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,   -74,   143,    67,    68,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,   145,     0,     0, 
       0,     0,     0,     0,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,   144,   146,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,   142,   130, 
      67,    68,     0,     0,     0,     0,     0,     0,     0,     0, 
    -138,     0,     0,   227,   228,     0,     0,     0,     0,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,     0,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,    48,    67,    68,     0,     0,     0, 
       0,  -133,     0,     0,     0,  -138,   201,    -3,     0,   202, 
       0,     0,     0,     0,  -165,  -166,  -167,    70,    64,    24, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,    47,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,   130, 
      67,    68,     0,  -119,     0,     0,     0,   150,  -112,  -113, 
      49,     0,     0,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,     0,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,   130,    67,    68,     0,  -119,     0, 
       0,     0,   225,  -112,  -113,    49,     0,     0,     0,     0, 
    -115,  -116,  -117,  -118,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,     0,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,   130, 
      67,    68,     0,  -119,     0,     0,     0,  -128,  -112,  -113, 
      49,     0,     0,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,     0,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,   130,    67,    68,     0,  -119,     0, 
       0,     0,  -147,  -112,  -113,    49,     0,     0,     0,     0, 
    -115,  -116,  -117,  -118,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,     0,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,   130, 
      67,    68,     0,  -119,     0,     0,     0,  -131,  -112,  -113, 
      49,     0,     0,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,     0,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,   130,    67,    68,     0,  -119,     0, 
       0,     0,  -126,  -112,  -113,    49,     0,     0,     0,     0, 
    -115,  -116,  -117,  -118,  -165,  -166,  -167,    70,    64,     0, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,     0,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,   130, 
      67,    68,     0,  -119,     0,     0,     0,  -130,  -112,  -113, 
      49,     0,     0,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,     0,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,     0,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,    48,    67,    68,     0,  -119,     0, 
    -108,  -109,  -110,  -112,  -113,    49,     0,    -3,     0,     0, 
    -115,  -116,  -117,  -118,  -165,  -166,  -167,    70,    64,    24, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,    47,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,    48, 
      67,    68,     0,  -119,     0,  -121,  -109,  -110,  -112,  -113, 
      49,     0,    -3,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,    24,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,    47,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,    48,    67,    68,     0,  -119,     0, 
    -123,  -109,  -110,  -112,  -113,    49,     0,    -3,     0,     0, 
    -115,  -116,  -117,  -118,  -165,  -166,  -167,    70,    64,    24, 
    -160,    66,    65,  -197,     0,     0,    62,    69,    60,  -204, 
      71,    61,  -218,    47,     0,    59,    58,    57,    56,    55, 
      54,    53,    52,    51,    50,  -250,  -264,    63,  -124,    48, 
      67,    68,     0,  -119,     0,  -122,  -109,  -110,  -112,  -113, 
      49,     0,    -3,     0,     0,  -115,  -116,  -117,  -118,  -165, 
    -166,  -167,    70,    64,    24,  -160,    66,    65,  -197,     0, 
       0,    62,    69,    60,  -204,    71,    61,  -218,    47,     0, 
      59,    58,    57,    56,    55,    54,    53,    52,    51,    50, 
    -250,  -264,    63,  -124,     0,    67,    68,    48,     6,   -71, 
     106,  -119,    46,  -107,  -109,  -110,  -112,  -113,    49,   -44, 
      -3,     7,   -36,  -115,  -116,  -117,  -118,  -165,  -166,  -167, 
      70,    64,    24,  -160,    66,    65,  -197,  -193,   213,    62, 
      69,    60,  -204,    71,    61,  -218,    47,   -26,    59,    58, 
      57,    56,    55,    54,    53,    52,    51,    50,  -250,  -264, 
      63,  -124,     5,    67,    68, 
};

template<>
const int16 *Java1_parser_tables_t::Nm = &Nm_[0];

// Nonterminal transition matrix row ...
static const uint16 Nr_[236] = {
 1266,  1266,   251,   112,  3077,  1266,    70,  1266,  1266,  1266, 
   85,  3077,  3077,   190,  1266,  1266,  1266,   251,   112,  3077, 
  132,  1266,    70,  1266,  1266,  1266,  1266,   251,  1266,  3077, 
  251,   112,    85,     1,  1266,  1266,  1266,   251,   112,  1266, 
 1266,    70,  1266,    85,    10,    26,  2854,   112,  1266,  1266, 
 1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266, 
 1266,   662,  1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266, 
 1266,   546,  1266,  1397,  1266,   275,   313,     2,  2304,  1266, 
 1266,  1266,  2469,  1266,  1266,  1266,  1436,  1475,  1266,     1, 
 3077,     3,  1266,  1266,  1266,  1266,    10,    26,  3077,  1943, 
    8,   662,  1266,  1266,    70,  1266,  1266,  1514,  1208,  1553, 
 1169,  1130,  1091,  1052,   974,  1013,   818,   857,   896,   935, 
    4,   701,   740,   779,   584,   623,   351,   390,   429,  1343, 
 1266,  1266,  2209,   234,  1592,  1266,  1982,  1631,  2909,  1266, 
 2964,  1266,  1266,   251,  1266,   112,  1266,  1670,  1709,  1748, 
 1266,  2414,  1266,  1266,  1266,  1266,  1787,  1266,     0,  1266, 
  546,  2249,  1266,     7,  1266,  1266,  1266,  1266,  1266,  1266, 
 1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266,  1266, 
 1266,  1266,  1266,  1266,   132,  1266,  1266,  1266,  3019,  3077, 
 2021,  1826,   153,  1266,   468,  1266,   507,  1266,  1266,  1266, 
 1266,  2076,  1266,  1266,   251,  1397,   275,  1266,  1266,  1266, 
 1304,  2115,  1865,  1266,  1266,  1266,  2524,   313,  2579,  1904, 
 2359,  1266,  2170,  2634,     6,  1266,  1266,  1266,  1266,  2689, 
 1266,  2744,  1266,  2799,  1266,  1266, 
};

template<>
const uint16 *Java1_parser_tables_t::Nr = &Nr_[0];

// Nonterminal transition matrix column ...
static const uint8 Nc_[270] = {
   39,    39,    39,    25,    25,    39,    39,    13,    13,    13, 
   13,    13,    13,    13,    13,    13,    25,    39,    39,    39, 
   39,    39,    39,    39,    13,     5,     5,     6,     6,     7, 
    7,     0,     0,     0,    40,    40,    55,    55,    55,    55, 
   55,    55,    55,    55,     1,     1,    12,    12,    12,    12, 
   12,    12,    12,    12,    12,    12,    12,    14,    14,    15, 
    5,     5,     6,     6,     6,     6,     6,     6,     7,     7, 
    9,     9,     2,     2,    25,    25,    25,    39,    39,    39, 
   15,    15,    15,    15,    10,    10,    10,    40,    40,    55, 
    3,     3,     8,     1,     1,     9,     9,     9,     9,     2, 
    2,    10,     3,    11,    11,     4,     4,     5,     5,     6, 
    6,     7,     8,     8,     8,     8,     8,     8,     8,     8, 
    9,    10,    10,    10,    11,    16,    16,    16,    17,    17, 
   17,    17,    12,    12,    12,    13,    13,    14,    15,    15, 
   18,    18,    18,    18,    18,    18,    18,    19,    19,    19, 
   19,    16,    16,    17,    18,    18,    19,    29,    29,    53, 
   53,    53,    56,    56,    57,    57,    57,    57,    20,    20, 
   21,    21,    22,    22,    23,    23,    23,    24,    24,    24, 
   25,    25,    26,    26,    26,    26,    26,    26,    27,    27, 
   28,    28,    29,    29,    30,    31,    31,    32,    32,    33, 
   33,    34,    34,    34,    34,    35,    35,    36,    36,    37, 
   37,    38,    38,    38,    38,    39,    39,    40,    41,    41, 
   41,    41,    42,    42,    42,    43,    43,    43,    43,    44, 
   44,    44,    44,    44,    44,    45,    45,    45,    46,    46, 
   47,    47,    48,    48,    49,    49,    50,    50,    51,    51, 
   52,    52,    53,    53,    53,    53,    53,    53,    53,    53, 
   53,    53,    53,    53,    54,    55,    56,    56,    57,    57, 
};

template<>
const uint8 *Java1_parser_tables_t::Nc = &Nc_[0];

// Reduction matrix ...
static const uint8 Rm_[49] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4, 
     157,   157,     0,     0,   176,     0,     0,   159,   159,   159, 
     159,   175,   159,     0,     0,   163,   163,   163,   163,   174, 
     163,   163,     0,     0,   157,   157,     0,   157,   176,   157, 
       0,     0,   157,     0,     0,     0,   176,   157,     0, 
};

template<>
const uint8 *Java1_parser_tables_t::Rm = &Rm_[0];

// Reduction matrix row ...
static const int16 Rr_[236] = {
       0,     0,    21,    22,    23,     0,     0,     0,     0,   266, 
      18,    19,    20,     0,     0,    43,     0,     0,     0,    17, 
       0,     0,     0,     0,     1,     4,     0,    51,    31,     0, 
      40,    41,     0,     0,     0,     0,     0,     0,     0,    69, 
      72,     0,     2,     0,     0,     0,     0,     0,    -8,     0, 
     248,   246,   244,   242,   240,   238,   235,   229,   225,   222, 
     211,     0,   205,   158,   -15,   182,   183,   161,   -23,   198, 
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      37,     0,    59,     5,     0,    68,     0,     0,     0,     0, 
       0,     0,    92,     0,     0,     0,    72,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
     -32,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,   -40,     0,   215,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,    33, 
       0,     0,     0,     0,    89,     0,   247,     0,   245,   243, 
     241,   239,   236,   237,   230,   231,   232,   233,   226,   227, 
     228,   223,   224,     0,     0,     0,     0,     0,     0,   191, 
       0,     0,   162,   217,     0,   216,     0,     0,     0,     0, 
       0,     0,     0,     0,   149,     0,     0,     0,     6,     0, 
       0,    79,     0,   190,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,   125,     0,     0,   137,     0, 
       0,     0,     0,     0,     0,     0, 
};

template<>
const int16 *Java1_parser_tables_t::Rr = &Rr_[0];

// Reduction matrix column ...
static const uint8 Rc_[99] = {
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     2,     3,     3,     0,     4,     2,     0,     5,     2, 
       6,     7,     5,     8,     5,     2,     2,     0,     0,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     2,     2, 
};

template<>
const uint8 *Java1_parser_tables_t::Rc = &Rc_[0];

// Production lengths (minus one) ...
static const int8 PL_[270] = {
       1,     0,     1,     0,     0,     0,     2,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     2,     1,     1, 
       1,     0,     0,     0,     2,     0,     1,     0,     1,     3, 
       5,     0,     2,     2,     3,     2,     4,     3,     3,     3, 
       2,     2,     2,     1,     0,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1, 
       0,     1,     1,     0,     0,     0,     0,     0,     2,     1, 
       0,     2,     0,     2,     0,     1,     2,     0,     2,     1, 
       4,     3,     3,     2,     3,     2,     1,     0,     2,     1, 
       0,     1,     1,     0,     0,     3,     2,     2,     1,     3, 
       2,     1,     0,     1,     2,     2,     1,     0,     1,     0, 
       0,     2,     0,     0,     1,     0,     0,     0,     0,     0, 
       0,     2,     3,     2,     0,     4,     6,     4,     4,     6, 
       6,     5,     1,     0,     0,     1,     0,     0,     0,     2, 
       2,     1,     2,     1,     2,     1,     2,     4,     2,     2, 
       3,     0,     1,     1,     4,     3,     1,     0,     0,     0, 
       0,     0,     2,     0,     0,     0,     0,     0,     3,     3, 
       2,     2,     3,     2,     0,     0,     0,     0,     0,     0, 
       0,     2,     0,     0,     2,     2,     3,     3,     4,     3, 
       3,     2,     0,     1,     2,     0,     1,     0,     0,     1, 
       1,     1,     1,     1,     0,     0,     1,     0,     0,     0, 
       0,     0,     3,     3,     3,     0,     1,     1,     0,     2, 
       2,     2,     0,     2,     2,     0,     2,     2,     2,     0, 
       2,     2,     2,     2,     2,     0,     2,     2,     0,     2, 
       0,     2,     0,     2,     0,     2,     0,     2,     0,     4, 
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,    -1,     0,    -1,     0, 
};

template<>
const int8 *Java1_parser_tables_t::PL = &PL_[0];

template<>
const uint32 *Java1_parser_tables_t::nd_fterm = 0;

template<>
const uint32 *Java1_parser_tables_t::nd_term = 0;

template<>
const uint32 *Java1_parser_tables_t::nd_faction = 0;

template<>
const uint32 *Java1_parser_tables_t::nd_action = 0;

// Terminal action number ...
static const int8 tact_numb_[99] = {
       0,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *Java1_parser_tables_t::tact_numb = &tact_numb_[0];

template<>
const uint32 *Java1_parser_tables_t::node_numb = 0;

template<>
const uint32 *Java1_parser_tables_t::nact_numb = 0;

template<>
const uint32 *Java1_parser_tables_t::reverse = 0;

