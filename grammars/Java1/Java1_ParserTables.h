
////////////////////////////////////////////////////////////////////////////////
//
//    Java1_ParserTables.h (generated by LRSTAR 24.0.017)

      #pragma once

      #include "lrstar_library_defs.h"

      enum termcon
      {
         BOOLEAN = 4,
         CHAR = 5,
         BYTE = 6,
         SHORT = 7,
         INT = 8,
         LONG = 9,
         FLOAT = 10,
         DOUBLE = 11,
         VOID = 12,
         ENUM = 13,
         PACKAGE = 14,
         IMPORT = 15,
         ABSTRACT = 16,
         FINAL = 17,
         PUBLIC = 18,
         PROTECTED = 19,
         PRIVATE = 20,
         STATIC = 21,
         TRANSIENT = 22,
         VOLATILE = 23,
         NATIVE = 24,
         SYNCHRONIZED = 25,
         CLASS = 26,
         INTERFACE = 27,
         IMPLEMENTS = 28,
         OP_DIM = 29,
         THROWS = 30,
         EXTENDS = 31,
         CASE = 32,
         DEFAULT = 33,
         IF = 34,
         ELSE = 35,
         SWITCH = 36,
         WHILE = 37,
         DO = 38,
         FOR = 39,
         BREAK = 40,
         CONTINUE = 41,
         RETURN = 42,
         THROW = 43,
         TRY = 44,
         CATCH = 45,
         FINALLY = 46,
         THIS = 47,
         SUPER = 48,
         JNULL = 49,
         NEW = 50,
         INSTANCEOF = 51
      };


class lrstar_parser;

      class lrstar_parser_tables
      {
         friend class lrstar_parser;
         public:
         static const char *term_symb[    99]; // Terminal symbols of the grammar.
         static const char *head_symb[    99]; // Nonterminal symbols of the grammar.
         static const char *tact_name[     2]; // Terminal action names found in the grammar.
         static const uint8  head_numb[   270]; // Head symbol number for a production.
         static const uint16 f_tail   [   271]; // First tail in a production.
         static const int8   tail     [   568]; // Tail symbol number.
         static const int8   arga     [    99]; // Arguments for terminal actions.

         private:
         static const uint8  Bm[   266]       ; // Boolean matrix.
         static const uint16 Br[   236]       ; // Boolean matrix row.
         static const uint8  Bc[    99]       ; // Boolean matrix column.
         static const uint8 Bf[    99]       ; // Boolean matrix filter/mask.
         static const int16  Tm[   608]       ; // Terminal transition matrix.
         static const uint16 Tr[   236]       ; // Terminal transition matrix row.
         static const uint8  Tc[    99]       ; // Terminal transition matrix column.
         static const int16  Nm[  3135]       ; // Nonterminal transition matrix.
         static const uint16 Nr[   236]       ; // Nonterminal transition matrix row.
         static const uint8  Nc[   270]       ; // Nonterminal transition matrix column.
         static const uint8  Rm[    49]       ; // Reduction matrix.
         static const int16  Rr[   236]       ; // Reduction matrix row.
         static const uint8  Rc[    99]       ; // Reduction matrix column.
         static const int8   PL[   270]       ; // Production length minus one.

         static const int8   tact_numb[    99]; // Terminal action numbers.
      };

//
////////////////////////////////////////////////////////////////////////////////

