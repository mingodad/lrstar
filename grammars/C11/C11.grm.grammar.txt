
/* C11 grammar */

/* Terminal Symbols */

       ERROR                     <error>;
       F_CONSTANT                <f_constant>;
       IDENTIFIER                <identifier>;
       I_CONSTANT                <t_constant>;
       STRING_LITERAL            <string_literal>;
       ADD_ASSIGN                '+=';
       ALIGNAS                   'alignas';
       ALIGNOF                   'alignof';
       AND_ASSIGN                '&=';
       AND_OP                    '&&';
       ATOMIC                    'atomic';
       AUTO                      'auto';
       BOOL                      'bool';
       BREAK                     'break';
       CASE                      'case';
       CHAR                      'char';
       COMPLEX                   'complex';
       CONST                     'const';
       CONTINUE                  'continue';
       DEC_OP                    '--';
       DEFAULT                   'default';
       DIV_ASSIGN                '/=';
       DO                        'do';
       DOUBLE                    'double';
       ELLIPSIS                  '...';
       ELSE                      'else';
       ENUM                      'enum';
       ENUM_CONSTANT             {enum_constant};
       EQ_OP                     '==';
       EXTERN                    'extern';
       FLOAT                     'float';
       FOR                       'for';
       FUNC_NAME                 {func_name};
       GENERIC                   'generic';
       GE_OP                     '>=';
       GOTO                      'goto';
       IF                        'if';
       IMAGINARY                 'imaginary';
       INC_OP                    '++';
       INLINE                    'inline';
       INT                       'int';
       LEFT_ASSIGN               '<<=';
       LEFT_OP                   '<<';
       LE_OP                     '<=';
       LONG                      'long';
       MOD_ASSIGN                '%=';
       MUL_ASSIGN                '*=';
       NE_OP                     '!=';
       NORETURN                  'noreturn';
       OR_ASSIGN                 '|=';
       OR_OP                     '||';
       PTR_OP                    '->';
       REGISTER                  'register';
       RESTRICT                  'restrict';
       RETURN                    'return';
       RIGHT_ASSIGN              '>>=';
       RIGHT_OP                  '>>';
       SHORT                     'short';
       SIGNED                    'signed';
       SIZEOF                    'sizeof';
       STATIC                    'static';
       STATIC_ASSERT             'staticassert';
       STRUCT                    'struct';
       SUB_ASSIGN                '-=';
       SWITCH                    'switch';
       THREAD_LOCAL              'threadlocal';
       TYPEDEF                   'typedef';
       TYPEDEF_NAME              {typedef_name};
       UNION                     'union';
       UNSIGNED                  'unsigned';
       VOID                      'void';
       VOLATILE                  'volatile';
       WHILE                     'while';
       XOR_ASSIGN                '^=';

    0  <error>
    1  <eof>
    2  <f_constant>
    3  <identifier>
    4  <t_constant>
    5  <string_literal>
    6  '+='
    7  'alignas'
    8  'alignof'
    9  '&='
   10  '&&'
   11  'atomic'
   12  'auto'
   13  'bool'
   14  'break'
   15  'case'
   16  'char'
   17  'complex'
   18  'const'
   19  'continue'
   20  '--'
   21  'default'
   22  '/='
   23  'do'
   24  'double'
   25  '...'
   26  'else'
   27  'enum'
   28  {enum_constant}
   29  '=='
   30  'extern'
   31  'float'
   32  'for'
   33  {func_name}
   34  'generic'
   35  '>='
   36  'goto'
   37  'if'
   38  'imaginary'
   39  '++'
   40  'inline'
   41  'int'
   42  '<<='
   43  '<<'
   44  '<='
   45  'long'
   46  '%='
   47  '*='
   48  '!='
   49  'noreturn'
   50  '|='
   51  '||'
   52  '->'
   53  'register'
   54  'restrict'
   55  'return'
   56  '>>='
   57  '>>'
   58  'short'
   59  'signed'
   60  'sizeof'
   61  'static'
   62  'staticassert'
   63  'struct'
   64  '-='
   65  'switch'
   66  'threadlocal'
   67  'typedef'
   68  {typedef_name}
   69  'union'
   70  'unsigned'
   71  'void'
   72  'volatile'
   73  'while'
   74  '^='
   75  '('
   76  ')'
   77  ','
   78  ':'
   79  '['
   80  ']'
   81  '.'
   82  '{'
   83  '}'
   84  '&'
   85  '*'
   86  '+'
   87  '-'
   88  '~'
   89  '!'
   90  '/'
   91  '%'
   92  '<'
   93  '>'
   94  '^'
   95  '|'
   96  '?'
   97  '='
   98  ';'

/* Productions */

    0       Goal
        0      : translation_unit <eof> 
               ;

    1       primary_expression
        1      : <identifier> 
        2      | constant 
        3      | string 
        4      | '(' expression ')' 
        5      | generic_selection 
               ;

    2       constant
        6      : <t_constant> 
        7      | <f_constant> 
        8      | {enum_constant} 
               ;

    3       enumeration_constant
        9      : <identifier> 
               ;

    4       string
       10      : <string_literal> 
       11      | {func_name} 
               ;

    5       generic_selection
       12      : 'generic' '(' assignment_expression ',' generic_assoc_list ')' 
               ;

    6       generic_assoc_list
       13      : generic_association 
       14      | generic_assoc_list ',' generic_association 
               ;

    7       generic_association
       15      : type_name ':' assignment_expression 
       16      | 'default' ':' assignment_expression 
               ;

    8       postfix_expression
       17      : primary_expression 
       18      | postfix_expression '[' expression ']' 
       19      | postfix_expression '(' ')' 
       20      | postfix_expression '(' argument_expression_list ')' 
       21      | postfix_expression '.' <identifier> 
       22      | postfix_expression '->' <identifier> 
       23      | postfix_expression '++' 
       24      | postfix_expression '--' 
       25      | '(' type_name ')' '{' initializer_list '}' 
       26      | '(' type_name ')' '{' initializer_list ',' '}' 
               ;

    9       argument_expression_list
       27      : assignment_expression 
       28      | argument_expression_list ',' assignment_expression 
               ;

   10       unary_expression
       29      : postfix_expression 
       30      | '++' unary_expression 
       31      | '--' unary_expression 
       32      | unary_operator cast_expression 
       33      | 'sizeof' unary_expression 
       34      | 'sizeof' '(' type_name ')' 
       35      | 'alignof' '(' type_name ')' 
               ;

   11       unary_operator
       36      : '&' 
       37      | '*' 
       38      | '+' 
       39      | '-' 
       40      | '~' 
       41      | '!' 
               ;

   12       cast_expression
       42      : unary_expression 
       43      | '(' type_name ')' cast_expression 
               ;

   13       multiplicative_expression
       44      : cast_expression 
       45      | multiplicative_expression '*' cast_expression 
       46      | multiplicative_expression '/' cast_expression 
       47      | multiplicative_expression '%' cast_expression 
               ;

   14       additive_expression
       48      : multiplicative_expression 
       49      | additive_expression '+' multiplicative_expression 
       50      | additive_expression '-' multiplicative_expression 
               ;

   15       shift_expression
       51      : additive_expression 
       52      | shift_expression '<<' additive_expression 
       53      | shift_expression '>>' additive_expression 
               ;

   16       relational_expression
       54      : shift_expression 
       55      | relational_expression '<' shift_expression 
       56      | relational_expression '>' shift_expression 
       57      | relational_expression '<=' shift_expression 
       58      | relational_expression '>=' shift_expression 
               ;

   17       equality_expression
       59      : relational_expression 
       60      | equality_expression '==' relational_expression 
       61      | equality_expression '!=' relational_expression 
               ;

   18       and_expression
       62      : equality_expression 
       63      | and_expression '&' equality_expression 
               ;

   19       exclusive_or_expression
       64      : and_expression 
       65      | exclusive_or_expression '^' and_expression 
               ;

   20       inclusive_or_expression
       66      : exclusive_or_expression 
       67      | inclusive_or_expression '|' exclusive_or_expression 
               ;

   21       logical_and_expression
       68      : inclusive_or_expression 
       69      | logical_and_expression '&&' inclusive_or_expression 
               ;

   22       logical_or_expression
       70      : logical_and_expression 
       71      | logical_or_expression '||' logical_and_expression 
               ;

   23       conditional_expression
       72      : logical_or_expression 
       73      | logical_or_expression '?' expression ':' conditional_expression 
               ;

   24       assignment_expression
       74      : conditional_expression 
       75      | unary_expression assignment_operator assignment_expression 
               ;

   25       assignment_operator
       76      : '=' 
       77      | '*=' 
       78      | '/=' 
       79      | '%=' 
       80      | '+=' 
       81      | '-=' 
       82      | '<<=' 
       83      | '>>=' 
       84      | '&=' 
       85      | '^=' 
       86      | '|=' 
               ;

   26       expression
       87      : assignment_expression 
       88      | expression ',' assignment_expression 
               ;

   27       constant_expression
       89      : conditional_expression 
               ;

   28       declaration
       90      : declaration_specifiers ';' 
       91      | declaration_specifiers init_declarator_list ';' 
       92      | static_assert_declaration 
               ;

   29       declaration_specifiers
       93      : storage_class_specifier declaration_specifiers 
       94      | storage_class_specifier 
       95      | type_specifier declaration_specifiers 
       96      | type_specifier 
       97      | type_qualifier declaration_specifiers 
       98      | type_qualifier 
       99      | function_specifier declaration_specifiers 
      100      | function_specifier 
      101      | alignment_specifier declaration_specifiers 
      102      | alignment_specifier 
               ;

   30       init_declarator_list
      103      : init_declarator 
      104      | init_declarator_list ',' init_declarator 
               ;

   31       init_declarator
      105      : declarator '=' initializer 
      106      | declarator 
               ;

   32       storage_class_specifier
      107      : 'typedef' 
      108      | 'extern' 
      109      | 'static' 
      110      | 'threadlocal' 
      111      | 'auto' 
      112      | 'register' 
               ;

   33       type_specifier
      113      : 'void' 
      114      | 'char' 
      115      | 'short' 
      116      | 'int' 
      117      | 'long' 
      118      | 'float' 
      119      | 'double' 
      120      | 'signed' 
      121      | 'unsigned' 
      122      | 'bool' 
      123      | 'complex' 
      124      | 'imaginary' 
      125      | atomic_type_specifier 
      126      | struct_or_union_specifier 
      127      | enum_specifier 
      128      | {typedef_name} 
               ;

   34       struct_or_union_specifier
      129      : struct_or_union '{' struct_declaration_list '}' 
      130      | struct_or_union <identifier> '{' struct_declaration_list '}' 
      131      | struct_or_union <identifier> 
               ;

   35       struct_or_union
      132      : 'struct' 
      133      | 'union' 
               ;

   36       struct_declaration_list
      134      : struct_declaration 
      135      | struct_declaration_list struct_declaration 
               ;

   37       struct_declaration
      136      : specifier_qualifier_list ';' 
      137      | specifier_qualifier_list struct_declarator_list ';' 
      138      | static_assert_declaration 
               ;

   38       specifier_qualifier_list
      139      : type_specifier specifier_qualifier_list 
      140      | type_specifier 
      141      | type_qualifier specifier_qualifier_list 
      142      | type_qualifier 
               ;

   39       struct_declarator_list
      143      : struct_declarator 
      144      | struct_declarator_list ',' struct_declarator 
               ;

   40       struct_declarator
      145      : ':' constant_expression 
      146      | declarator ':' constant_expression 
      147      | declarator 
               ;

   41       enum_specifier
      148      : 'enum' '{' enumerator_list '}' 
      149      | 'enum' '{' enumerator_list ',' '}' 
      150      | 'enum' <identifier> '{' enumerator_list '}' 
      151      | 'enum' <identifier> '{' enumerator_list ',' '}' 
      152      | 'enum' <identifier> 
               ;

   42       enumerator_list
      153      : enumerator 
      154      | enumerator_list ',' enumerator 
               ;

   43       enumerator
      155      : enumeration_constant '=' constant_expression 
      156      | enumeration_constant 
               ;

   44       atomic_type_specifier
      157      : 'atomic' '(' type_name ')' 
               ;

   45       type_qualifier
      158      : 'const' 
      159      | 'restrict' 
      160      | 'volatile' 
      161      | 'atomic' 
               ;

   46       function_specifier
      162      : 'inline' 
      163      | 'noreturn' 
               ;

   47       alignment_specifier
      164      : 'alignas' '(' type_name ')' 
      165      | 'alignas' '(' constant_expression ')' 
               ;

   48       declarator
      166      : pointer direct_declarator 
      167      | direct_declarator 
               ;

   49       direct_declarator
      168      : <identifier> 
      169      | '(' declarator ')' 
      170      | direct_declarator '[' ']' 
      171      | direct_declarator '[' '*' ']' 
      172      | direct_declarator '[' 'static' type_qualifier_list assignment_expression ']' 
      173      | direct_declarator '[' 'static' assignment_expression ']' 
      174      | direct_declarator '[' type_qualifier_list '*' ']' 
      175      | direct_declarator '[' type_qualifier_list 'static' assignment_expression ']' 
      176      | direct_declarator '[' type_qualifier_list assignment_expression ']' 
      177      | direct_declarator '[' type_qualifier_list ']' 
      178      | direct_declarator '[' assignment_expression ']' 
      179      | direct_declarator '(' parameter_type_list ')' 
      180      | direct_declarator '(' ')' 
      181      | direct_declarator '(' identifier_list ')' 
               ;

   50       pointer
      182      : '*' type_qualifier_list pointer 
      183      | '*' type_qualifier_list 
      184      | '*' pointer 
      185      | '*' 
               ;

   51       type_qualifier_list
      186      : type_qualifier 
      187      | type_qualifier_list type_qualifier 
               ;

   52       parameter_type_list
      188      : parameter_list ',' '...' 
      189      | parameter_list 
               ;

   53       parameter_list
      190      : parameter_declaration 
      191      | parameter_list ',' parameter_declaration 
               ;

   54       parameter_declaration
      192      : declaration_specifiers declarator 
      193      | declaration_specifiers abstract_declarator 
      194      | declaration_specifiers 
               ;

   55       identifier_list
      195      : <identifier> 
      196      | identifier_list ',' <identifier> 
               ;

   56       type_name
      197      : specifier_qualifier_list abstract_declarator 
      198      | specifier_qualifier_list 
               ;

   57       abstract_declarator
      199      : pointer direct_abstract_declarator 
      200      | pointer 
      201      | direct_abstract_declarator 
               ;

   58       direct_abstract_declarator
      202      : '(' abstract_declarator ')' 
      203      | '[' ']' 
      204      | '[' '*' ']' 
      205      | '[' 'static' type_qualifier_list assignment_expression ']' 
      206      | '[' 'static' assignment_expression ']' 
      207      | '[' type_qualifier_list 'static' assignment_expression ']' 
      208      | '[' type_qualifier_list assignment_expression ']' 
      209      | '[' type_qualifier_list ']' 
      210      | '[' assignment_expression ']' 
      211      | direct_abstract_declarator '[' ']' 
      212      | direct_abstract_declarator '[' '*' ']' 
      213      | direct_abstract_declarator '[' 'static' type_qualifier_list assignment_expression ']' 
      214      | direct_abstract_declarator '[' 'static' assignment_expression ']' 
      215      | direct_abstract_declarator '[' type_qualifier_list assignment_expression ']' 
      216      | direct_abstract_declarator '[' type_qualifier_list 'static' assignment_expression ']' 
      217      | direct_abstract_declarator '[' type_qualifier_list ']' 
      218      | direct_abstract_declarator '[' assignment_expression ']' 
      219      | '(' ')' 
      220      | '(' parameter_type_list ')' 
      221      | direct_abstract_declarator '(' ')' 
      222      | direct_abstract_declarator '(' parameter_type_list ')' 
               ;

   59       initializer
      223      : '{' initializer_list '}' 
      224      | '{' initializer_list ',' '}' 
      225      | assignment_expression 
               ;

   60       initializer_list
      226      : designation initializer 
      227      | initializer 
      228      | initializer_list ',' designation initializer 
      229      | initializer_list ',' initializer 
               ;

   61       designation
      230      : designator_list '=' 
               ;

   62       designator_list
      231      : designator 
      232      | designator_list designator 
               ;

   63       designator
      233      : '[' constant_expression ']' 
      234      | '.' <identifier> 
               ;

   64       static_assert_declaration
      235      : 'staticassert' '(' constant_expression ',' <string_literal> ')' ';' 
               ;

   65       statement
      236      : labeled_statement 
      237      | compound_statement 
      238      | expression_statement 
      239      | selection_statement 
      240      | iteration_statement 
      241      | jump_statement 
               ;

   66       labeled_statement
      242      : <identifier> ':' statement 
      243      | 'case' constant_expression ':' statement 
      244      | 'default' ':' statement 
               ;

   67       compound_statement
      245      : '{' '}' 
      246      | '{' block_item_list '}' 
               ;

   68       block_item_list
      247      : block_item 
      248      | block_item_list block_item 
               ;

   69       block_item
      249      : declaration 
      250      | statement 
               ;

   70       expression_statement
      251      : ';' 
      252      | expression ';' 
               ;

   71       selection_statement
      253      : 'if' '(' expression ')' statement 
      254      | 'if' '(' expression ')' statement 'else' statement 
      255      | 'switch' '(' expression ')' statement 
               ;

   72       iteration_statement
      256      : 'while' '(' expression ')' statement 
      257      | 'do' statement 'while' '(' expression ')' ';' 
      258      | 'for' '(' expression_statement expression_statement ')' statement 
      259      | 'for' '(' expression_statement expression_statement expression ')' statement 
      260      | 'for' '(' declaration expression_statement ')' statement 
      261      | 'for' '(' declaration expression_statement expression ')' statement 
               ;

   73       jump_statement
      262      : 'goto' <identifier> ';' 
      263      | 'continue' ';' 
      264      | 'break' ';' 
      265      | 'return' ';' 
      266      | 'return' expression ';' 
               ;

   74       translation_unit
      267      : external_declaration 
      268      | translation_unit external_declaration 
               ;

   75       external_declaration
      269      : function_definition 
      270      | declaration 
               ;

   76       function_definition
      271      : declaration_specifiers declarator declaration_list compound_statement 
      272      | declaration_specifiers declarator compound_statement 
               ;

   77       declaration_list
      273      : declaration 
      274      | declaration_list declaration 
               ;

/* End of C11 grammar 

