#include "lrstar_basic_defs.h"
#include "lrstar_parser_tables.h"
#include "C11_LexerTables_typedef.h"
#include "C11_ParserTables_typedef.h"
#include "C11_Parser.h"

template<>
const int C11_parser_tables_t::n_term_symb = 99;

template<>
const int C11_parser_tables_t::n_head_symb = 78;

template<>
const int C11_parser_tables_t::n_tact_name = 2;

template<>
const int C11_parser_tables_t::n_node_name = 0;

template<>
const int C11_parser_tables_t::n_head_numb = 275;

template<>
const int C11_parser_tables_t::n_f_tail = 276;

template<>
const int C11_parser_tables_t::n_tail = 647;

template<>
const int C11_parser_tables_t::n_arga = 99;

template<>
const int C11_parser_tables_t::n_argx = 0;

template<>
const int C11_parser_tables_t::n_argy = 0;

template<>
const int C11_parser_tables_t::n_Bm = 283;

template<>
const int C11_parser_tables_t::n_Br = 256;

template<>
const int C11_parser_tables_t::n_Bc = 99;

template<>
const int C11_parser_tables_t::n_Bf = 99;

template<>
const int C11_parser_tables_t::n_Tm = 1380;

template<>
const int C11_parser_tables_t::n_Tr = 256;

template<>
const int C11_parser_tables_t::n_Tc = 99;

template<>
const int C11_parser_tables_t::n_Nm = 2125;

template<>
const int C11_parser_tables_t::n_Nr = 256;

template<>
const int C11_parser_tables_t::n_Nc = 275;

template<>
const int C11_parser_tables_t::n_Rm = 1;

template<>
const int C11_parser_tables_t::n_Rr = 256;

template<>
const int C11_parser_tables_t::n_Rc = 99;

template<>
const int C11_parser_tables_t::n_PL = 275;

template<>
const int C11_parser_tables_t::n_nd_fterm = 0;

template<>
const int C11_parser_tables_t::n_nd_term = 0;

template<>
const int C11_parser_tables_t::n_nd_faction = 0;

template<>
const int C11_parser_tables_t::n_nd_action = 0;

template<>
const int C11_parser_tables_t::n_tact_numb = 99;

template<>
const int C11_parser_tables_t::n_node_numb = 0;

template<>
const int C11_parser_tables_t::n_nact_numb = 0;

template<>
const int C11_parser_tables_t::n_reverse = 0;

template<>
const int C11_parser_tables_t::n_terms = 99; // Number of terminals.

template<>
const int C11_parser_tables_t::n_heads = 78; // Number of nonterminals.

template<>
const int C11_parser_tables_t::n_prods = 275; // Number of productions.

template<>
const int C11_parser_tables_t::n_states = 256; // Number of states.

template<>
const int C11_parser_tables_t::accept_state = 255; // Accept state.

template<>
const int C11_parser_tables_t::n_termactns = 2; // Number of terminal actions.

template<>
const int C11_parser_tables_t::n_nodenames = 0; // Number of node names.

template<>
const int C11_parser_tables_t::n_nodeactns = 0; // Number of node actions.

template<>
const int C11_parser_tables_t::eof_symb = 1; // <eof> symbol number.

template<>
const int C11_parser_tables_t::err_used = 0; // <error> used in grammar?


// Terminal symbols of the grammar.
static const char *term_symb_[99] = {
   "<error>",
   "<eof>",
   "<f_constant>",
   "<identifier>",
   "<t_constant>",
   "<string_literal>",
   "\'+=\'",
   "\'alignas\'",
   "\'alignof\'",
   "\'&=\'",
   "\'&&\'",
   "\'atomic\'",
   "\'auto\'",
   "\'bool\'",
   "\'break\'",
   "\'case\'",
   "\'char\'",
   "\'complex\'",
   "\'const\'",
   "\'continue\'",
   "\'--\'",
   "\'default\'",
   "\'/=\'",
   "\'do\'",
   "\'double\'",
   "\'...\'",
   "\'else\'",
   "\'enum\'",
   "{enum_constant}",
   "\'==\'",
   "\'extern\'",
   "\'float\'",
   "\'for\'",
   "{func_name}",
   "\'generic\'",
   "\'>=\'",
   "\'goto\'",
   "\'if\'",
   "\'imaginary\'",
   "\'++\'",
   "\'inline\'",
   "\'int\'",
   "\'<<=\'",
   "\'<<\'",
   "\'<=\'",
   "\'long\'",
   "\'%=\'",
   "\'*=\'",
   "\'!=\'",
   "\'noreturn\'",
   "\'|=\'",
   "\'||\'",
   "\'->\'",
   "\'register\'",
   "\'restrict\'",
   "\'return\'",
   "\'>>=\'",
   "\'>>\'",
   "\'short\'",
   "\'signed\'",
   "\'sizeof\'",
   "\'static\'",
   "\'staticassert\'",
   "\'struct\'",
   "\'-=\'",
   "\'switch\'",
   "\'threadlocal\'",
   "\'typedef\'",
   "{typedef_name}",
   "\'union\'",
   "\'unsigned\'",
   "\'void\'",
   "\'volatile\'",
   "\'while\'",
   "\'^=\'",
   "\'(\'",
   "\')\'",
   "\',\'",
   "\':\'",
   "\'[\'",
   "\']\'",
   "\'.\'",
   "\'{\'",
   "\'}\'",
   "\'&\'",
   "\'*\'",
   "\'+\'",
   "\'-\'",
   "\'~\'",
   "\'!\'",
   "\'/\'",
   "\'%\'",
   "\'<\'",
   "\'>\'",
   "\'^\'",
   "\'|\'",
   "\'?\'",
   "\'=\'",
   "\';\'",
};

template<>
const char * const *C11_parser_tables_t::term_symb = &term_symb_[0];

// Nonterminal symbols of the grammar.
static const char *head_symb_[78] = {
   "Goal",
   "primary_expression",
   "constant",
   "enumeration_constant",
   "string",
   "generic_selection",
   "generic_assoc_list",
   "generic_association",
   "postfix_expression",
   "argument_expression_list",
   "unary_expression",
   "unary_operator",
   "cast_expression",
   "multiplicative_expression",
   "additive_expression",
   "shift_expression",
   "relational_expression",
   "equality_expression",
   "and_expression",
   "exclusive_or_expression",
   "inclusive_or_expression",
   "logical_and_expression",
   "logical_or_expression",
   "conditional_expression",
   "assignment_expression",
   "assignment_operator",
   "expression",
   "constant_expression",
   "declaration",
   "declaration_specifiers",
   "init_declarator_list",
   "init_declarator",
   "storage_class_specifier",
   "type_specifier",
   "struct_or_union_specifier",
   "struct_or_union",
   "struct_declaration_list",
   "struct_declaration",
   "specifier_qualifier_list",
   "struct_declarator_list",
   "struct_declarator",
   "enum_specifier",
   "enumerator_list",
   "enumerator",
   "atomic_type_specifier",
   "type_qualifier",
   "function_specifier",
   "alignment_specifier",
   "declarator",
   "direct_declarator",
   "pointer",
   "type_qualifier_list",
   "parameter_type_list",
   "parameter_list",
   "parameter_declaration",
   "identifier_list",
   "type_name",
   "abstract_declarator",
   "direct_abstract_declarator",
   "initializer",
   "initializer_list",
   "designation",
   "designator_list",
   "designator",
   "static_assert_declaration",
   "statement",
   "labeled_statement",
   "compound_statement",
   "block_item_list",
   "block_item",
   "expression_statement",
   "selection_statement",
   "iteration_statement",
   "jump_statement",
   "translation_unit",
   "external_declaration",
   "function_definition",
   "declaration_list",
};

template<>
const char * const *C11_parser_tables_t::head_symb = &head_symb_[0];

// Terninal action names found in the grammar ...
static const char *tact_name_[2] = {
   "error",
   "lookup",
};

template<>
const char * const *C11_parser_tables_t::tact_name = &tact_name_[0];

template<>
const char * const *C11_parser_tables_t::node_name = 0;

// Head symbol numbers for the productions.
static const uint8 head_numb_[275] = {
       0,     1,     1,     1,     1,     1,     2,     2,     2,     3, 
       4,     4,     5,     6,     6,     7,     7,     8,     8,     8, 
       8,     8,     8,     8,     8,     8,     8,     9,     9,    10, 
      10,    10,    10,    10,    10,    10,    11,    11,    11,    11, 
      11,    11,    12,    12,    13,    13,    13,    13,    14,    14, 
      14,    15,    15,    15,    16,    16,    16,    16,    16,    17, 
      17,    17,    18,    18,    19,    19,    20,    20,    21,    21, 
      22,    22,    23,    23,    24,    24,    25,    25,    25,    25, 
      25,    25,    25,    25,    25,    25,    25,    26,    26,    27, 
      28,    28,    28,    29,    29,    29,    29,    29,    29,    29, 
      29,    29,    29,    30,    30,    31,    31,    32,    32,    32, 
      32,    32,    32,    33,    33,    33,    33,    33,    33,    33, 
      33,    33,    33,    33,    33,    33,    33,    33,    33,    34, 
      34,    34,    35,    35,    36,    36,    37,    37,    37,    38, 
      38,    38,    38,    39,    39,    40,    40,    40,    41,    41, 
      41,    41,    41,    42,    42,    43,    43,    44,    45,    45, 
      45,    45,    46,    46,    47,    47,    48,    48,    49,    49, 
      49,    49,    49,    49,    49,    49,    49,    49,    49,    49, 
      49,    49,    50,    50,    50,    50,    51,    51,    52,    52, 
      53,    53,    54,    54,    54,    55,    55,    56,    56,    57, 
      57,    57,    58,    58,    58,    58,    58,    58,    58,    58, 
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58, 
      58,    58,    58,    59,    59,    59,    60,    60,    60,    60, 
      61,    62,    62,    63,    63,    64,    65,    65,    65,    65, 
      65,    65,    66,    66,    66,    67,    67,    68,    68,    69, 
      69,    70,    70,    71,    71,    71,    72,    72,    72,    72, 
      72,    72,    73,    73,    73,    73,    73,    74,    74,    75, 
      75,    76,    76,    77,    77, 
};

template<>
const uint8 *C11_parser_tables_t::head_numb = &head_numb_[0];

// First tail symbol index into the tail list ...
static const uint16 f_tail_[276] = {
       0,     2,     3,     4,     5,     8,     9,    10,    11,    12, 
      13,    14,    15,    21,    22,    25,    28,    31,    32,    36, 
      39,    43,    46,    49,    51,    53,    59,    66,    67,    70, 
      71,    73,    75,    77,    79,    83,    87,    88,    89,    90, 
      91,    92,    93,    94,    98,    99,   102,   105,   108,   109, 
     112,   115,   116,   119,   122,   123,   126,   129,   132,   135, 
     136,   139,   142,   143,   146,   147,   150,   151,   154,   155, 
     158,   159,   162,   163,   168,   169,   172,   173,   174,   175, 
     176,   177,   178,   179,   180,   181,   182,   183,   184,   187, 
     188,   190,   193,   194,   196,   197,   199,   200,   202,   203, 
     205,   206,   208,   209,   210,   213,   216,   217,   218,   219, 
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229, 
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239, 
     243,   248,   250,   251,   252,   253,   255,   257,   260,   261, 
     263,   264,   266,   267,   268,   271,   273,   276,   277,   281, 
     286,   291,   297,   299,   300,   303,   306,   307,   311,   312, 
     313,   314,   315,   316,   317,   321,   325,   327,   328,   329, 
     332,   335,   339,   345,   350,   355,   361,   366,   370,   374, 
     378,   381,   385,   388,   390,   392,   393,   394,   396,   399, 
     400,   401,   404,   406,   408,   409,   410,   413,   415,   416, 
     418,   419,   420,   423,   425,   428,   433,   437,   442,   446, 
     449,   452,   455,   459,   465,   470,   475,   481,   485,   489, 
     491,   494,   497,   501,   504,   508,   509,   511,   512,   516, 
     519,   521,   522,   524,   527,   529,   536,   537,   538,   539, 
     540,   541,   542,   545,   549,   552,   554,   557,   558,   560, 
     561,   562,   563,   565,   570,   577,   582,   587,   594,   600, 
     607,   613,   620,   623,   625,   627,   629,   632,   633,   635, 
     636,   637,   641,   644,   645,   647, 
};

template<>
const uint16 *C11_parser_tables_t::f_tail = &f_tail_[0];

// Tail symbol numbers ...
static const int8 tail_[647] = {
     -74,     1,     3,    -2,    -4,    75,   -26,    76,    -5,     4, 
       2,    28,     3,     5,    33,    34,    75,   -24,    77,    -6, 
      76,    -7,    -6,    77,    -7,   -56,    78,   -24,    21,    78, 
     -24,    -1,    -8,    79,   -26,    80,    -8,    75,    76,    -8, 
      75,    -9,    76,    -8,    81,     3,    -8,    52,     3,    -8, 
      39,    -8,    20,    75,   -56,    76,    82,   -60,    83,    75, 
     -56,    76,    82,   -60,    77,    83,   -24,    -9,    77,   -24, 
      -8,    39,   -10,    20,   -10,   -11,   -12,    60,   -10,    60, 
      75,   -56,    76,     8,    75,   -56,    76,    84,    85,    86, 
      87,    88,    89,   -10,    75,   -56,    76,   -12,   -12,   -13, 
      85,   -12,   -13,    90,   -12,   -13,    91,   -12,   -13,   -14, 
      86,   -13,   -14,    87,   -13,   -14,   -15,    43,   -14,   -15, 
      57,   -14,   -15,   -16,    92,   -15,   -16,    93,   -15,   -16, 
      44,   -15,   -16,    35,   -15,   -16,   -17,    29,   -16,   -17, 
      48,   -16,   -17,   -18,    84,   -17,   -18,   -19,    94,   -18, 
     -19,   -20,    95,   -19,   -20,   -21,    10,   -20,   -21,   -22, 
      51,   -21,   -22,   -22,    96,   -26,    78,   -23,   -23,   -10, 
     -25,   -24,    97,    47,    22,    46,     6,    64,    42,    56, 
       9,    74,    50,   -24,   -26,    77,   -24,   -23,   -29,    98, 
     -29,   -30,    98,   -64,   -32,   -29,   -32,   -33,   -29,   -33, 
     -45,   -29,   -45,   -46,   -29,   -46,   -47,   -29,   -47,   -31, 
     -30,    77,   -31,   -48,    97,   -59,   -48,    67,    30,    61, 
      66,    12,    53,    71,    16,    58,    41,    45,    31,    24, 
      59,    70,    13,    17,    38,   -44,   -34,   -41,    68,   -35, 
      82,   -36,    83,   -35,     3,    82,   -36,    83,   -35,     3, 
      63,    69,   -37,   -36,   -37,   -38,    98,   -38,   -39,    98, 
     -64,   -33,   -38,   -33,   -45,   -38,   -45,   -40,   -39,    77, 
     -40,    78,   -27,   -48,    78,   -27,   -48,    27,    82,   -42, 
      83,    27,    82,   -42,    77,    83,    27,     3,    82,   -42, 
      83,    27,     3,    82,   -42,    77,    83,    27,     3,   -43, 
     -42,    77,   -43,    -3,    97,   -27,    -3,    11,    75,   -56, 
      76,    18,    54,    72,    11,    40,    49,     7,    75,   -56, 
      76,     7,    75,   -27,    76,   -50,   -49,   -49,     3,    75, 
     -48,    76,   -49,    79,    80,   -49,    79,    85,    80,   -49, 
      79,    61,   -51,   -24,    80,   -49,    79,    61,   -24,    80, 
     -49,    79,   -51,    85,    80,   -49,    79,   -51,    61,   -24, 
      80,   -49,    79,   -51,   -24,    80,   -49,    79,   -51,    80, 
     -49,    79,   -24,    80,   -49,    75,   -52,    76,   -49,    75, 
      76,   -49,    75,   -55,    76,    85,   -51,   -50,    85,   -51, 
      85,   -50,    85,   -45,   -51,   -45,   -53,    77,    25,   -53, 
     -54,   -53,    77,   -54,   -29,   -48,   -29,   -57,   -29,     3, 
     -55,    77,     3,   -38,   -57,   -38,   -50,   -58,   -50,   -58, 
      75,   -57,    76,    79,    80,    79,    85,    80,    79,    61, 
     -51,   -24,    80,    79,    61,   -24,    80,    79,   -51,    61, 
     -24,    80,    79,   -51,   -24,    80,    79,   -51,    80,    79, 
     -24,    80,   -58,    79,    80,   -58,    79,    85,    80,   -58, 
      79,    61,   -51,   -24,    80,   -58,    79,    61,   -24,    80, 
     -58,    79,   -51,   -24,    80,   -58,    79,   -51,    61,   -24, 
      80,   -58,    79,   -51,    80,   -58,    79,   -24,    80,    75, 
      76,    75,   -52,    76,   -58,    75,    76,   -58,    75,   -52, 
      76,    82,   -60,    83,    82,   -60,    77,    83,   -24,   -61, 
     -59,   -59,   -60,    77,   -61,   -59,   -60,    77,   -59,   -62, 
      97,   -63,   -62,   -63,    79,   -27,    80,    81,     3,    62, 
      75,   -27,    77,     5,    76,    98,   -66,   -67,   -70,   -71, 
     -72,   -73,     3,    78,   -65,    15,   -27,    78,   -65,    21, 
      78,   -65,    82,    83,    82,   -68,    83,   -69,   -68,   -69, 
     -28,   -65,    98,   -26,    98,    37,    75,   -26,    76,   -65, 
      37,    75,   -26,    76,   -65,    26,   -65,    65,    75,   -26, 
      76,   -65,    73,    75,   -26,    76,   -65,    23,   -65,    73, 
      75,   -26,    76,    98,    32,    75,   -70,   -70,    76,   -65, 
      32,    75,   -70,   -70,   -26,    76,   -65,    32,    75,   -28, 
     -70,    76,   -65,    32,    75,   -28,   -70,   -26,    76,   -65, 
      36,     3,    98,    19,    98,    14,    98,    55,    98,    55, 
     -26,    98,   -75,   -74,   -75,   -76,   -28,   -29,   -48,   -77, 
     -67,   -29,   -48,   -67,   -28,   -77,   -28, 
};

template<>
const int8 *C11_parser_tables_t::tail = &tail_[0];

// Arguments for token actions ...
static const int8 arga_[99] = {
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *C11_parser_tables_t::arga = &arga_[0];

template<>
const int32 *C11_parser_tables_t::argx = 0;

template<>
const int32 *C11_parser_tables_t::argy = 0;

// Boolean matrix ...
static const uint8 Bm_[283] = {
       0,     0,     0,     0,     0,    64,     3,    48,     0,     0, 
      66,     3,    48,     0,     0,     8,     0,   128,     0,   130, 
      64,     3,    16,     0,     0,     8,     0,     0,    64,     0, 
       0,   128,     0,     0,     0,     2,   128,    64,     3,    48, 
      64,    64,     8,     0,   128,     0,     0,   128,     8,     0, 
       1,     0,     0,     2,     8,     0,   128,     0,     2,     0, 
       3,    32,     0,     0,     0,    64,     0,     3,     0,     0, 
       0,     8,     0,     0,     0,     0,    28,    11,   128,     0, 
       7,    28,     8,   128,     0,     7,    64,     3,    48,    64, 
       0,    28,     8,   128,    64,     7,    92,    31,   240,   192, 
     135,    28,     9,   144,    16,     7,    72,     3,    16,     1, 
       0,     0,     0,     1,     0,     3,    32,   128,     0,     8, 
       0,   128,     4,   130,     0,     0,   128,     8,     2,     0, 
       0,     0,   130,     0,     0,     4,     0,     0,   128,     0, 
       0,     0,     0,    32,     0,     0,     0,     0,    16,     0, 
       0,     0,     0,     1,     0,     0,     2,     0,     0,     0, 
       0,     4,     0,     0,     0,     0,    10,     0,     8,   136, 
      40,     0,     0,     0,     2,     0,    28,     8,   128,   104, 
       7,    28,    28,   192,    64,   135,     0,     0,     0,     0, 
     128,    28,     8,   128,     0,   135,    28,     9,   128,     0, 
       7,     8,     0,   128,     8,     2,     0,     0,     0,     3, 
       0,    64,     3,   144,     9,     2,     8,     0,     0,   128, 
       0,    28,     8,   128,     1,     7,     0,     0,     0,    40, 
      64,    92,    11,   176,     0,   135,    64,    35,    16,     0, 
       0,     8,     0,   128,     8,     0,    72,     3,   144,     9, 
       2,     8,     0,   128,     4,     2,    64,     3,    16,     1, 
       0,     0,     0,     6,     0,     0,     0,    18,     0,    28, 
       8,   128,   232,     7,     0,    19,     0,     0,     0,    64, 
       0,     0,     0, 
};

template<>
const uint8 *C11_parser_tables_t::Bm = &Bm_[0];

// Boolean matrix row (for state)...
static const uint16 Br_[256] = {
       5,    10,    15,    20,    20,    25,    20,    20,    20,    29, 
      25,    29,    29,    32,    37,    42,    45,    49,    54,    59, 
      62,    66,    71,    62,    76,    81,    54,    86,    15,    91, 
      96,    45,   101,   106,    49,   110,   114,   119,    66,    66, 
      59,   110,   124,   129,     1,    71,   110,   110,   133,   138, 
     139,   144,   149,    30,   151,   154,   157,   162,   167,    81, 
      76,    29,    81,    81,    81,    29,   171,     1,    61,   176, 
      96,    32,   158,    81,   158,    29,    29,    29,   181,    29, 
      71,   186,   186,   191,   101,   145,   145,   196,   110,   171, 
     201,   206,    32,   158,    81,   114,    45,    45,   211,   101, 
     216,    81,   129,    81,    81,    81,    81,    81,    81,    81, 
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81, 
      81,    81,    81,   221,    71,    71,   206,   110,    81,    76, 
      76,    66,   148,    81,   129,    91,   226,    81,    71,    81, 
     181,   158,   181,    81,    81,    81,    26,   231,   186,    32, 
     145,   145,    81,   196,   145,   236,   241,   246,    71,   251, 
      81,    45,   101,   256,   110,   110,   101,   145,   145,   196, 
     216,   138,   260,   139,   144,   149,    30,   151,   151,   154, 
     154,   154,   154,   157,   157,   162,   162,   264,   206,    91, 
     171,   110,   110,   110,   110,   269,   145,   181,   206,   206, 
     206,    29,   191,   191,   145,   145,   101,   145,   145,   196, 
     110,   145,    81,   196,   145,    81,    81,   176,   274,    62, 
      62,   186,    91,   181,   181,   181,    81,   221,   221,   145, 
      81,   196,   145,   145,   145,   129,   206,   158,   158,   278, 
     206,   206,   181,   206,   181,   145,   145,   269,   274,    81, 
      81,   181,   186,   181,   181,     0, 
      };

template<>
const uint16 *C11_parser_tables_t::Br = &Br_[0];

// Boolean matrix column (displacement) ...
static const uint8 Bc_[99] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     1,     0,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     0,     1,     1,     1,     1,     1,     0,     1, 
       0,     1,     1,     0,     0,     2,     1,     1,     1,     1, 
       0,     1,     0,     2,     2,     1,     0,     0,     1,     0, 
       0,     2,     2,     0,     1,     1,     0,     2,     1,     1, 
       0,     2,     2,     1,     0,     1,     0,     0,     1,     1, 
       1,     1,     1,     2,     0,     2,     3,     3,     3,     3, 
       3,     3,     3,     3,     4,     4,     4,     4,     0,     0, 
       4,     4,     2,     2,     4,     4,     2,     4,     4, 
      };

template<>
const uint8 *C11_parser_tables_t::Bc = &Bc_[0];

// Boolean matrix filter/mask value ...
static const uint8 Bf_[99] = {
       1,     2,     4,     8,     4,    16,    32,    64,     4,    32, 
     128,     1,    64,     2,     4,     4,     2,     2,     1,     4, 
       8,    16,    32,     4,     2,    32,    64,     2,     4,   128, 
      64,     2,     4,     4,     4,     1,     4,     4,     2,     8, 
      64,     2,    32,     2,     1,     2,    32,    32,   128,    64, 
      32,     4,     8,    64,     1,     4,    32,     2,     2,     2, 
       4,    16,    32,     2,    32,     4,    64,    64,     2,     2, 
       2,     2,     1,    64,    32,   128,     1,     2,     4,     8, 
      16,    32,    64,   128,     1,     2,     4,     4,     4,     4, 
       8,     8,     1,     1,    16,    32,     4,    64,   128, 
};

template<>
const uint8 *C11_parser_tables_t::Bf = &Bf_[0];

// Terminal transition matrix ...
static const int16 Tm_[1380] = {
       0,     0,     0,    31,     0,     0,  -234,     0,  -196,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,   226,   147,  -222,   157,    44,  -213,   131,   220,   143, 
     221,  -206,     0,  -214,   145,   224,   139,   -22,  -205,     0, 
      99,   163,   252,   139,     0,   -21,   144,   223,   139,     0, 
    -207,     0,     0,  -151,     0,   125,     0,   162,   128,  -220, 
     247,     0,  -218,     0,     0,   -25,   123,  -202,   218,    20, 
    -172,   124,     0,     0,     0,     0,     0,  -257,   -24,    34, 
       0,     0,   122,   -23,     0,  -235,     0,    34,     0,     0, 
      21,  -157,    26,   142,  -171,     0,    19,     0,    17,     0, 
      16,    10,    11,     0,     0,     0,     0,     7,   101,   -91, 
       9,     0,     0,     0,     0,     3,     5,     4,     6,     0, 
      44,   157,  -219,     0,     0,     0,     0,     0,     0,    17, 
    -187,     0,     0,     0,     0,     0,     0,    99,  -187,     0, 
       0,    25,  -165,   139,   197,  -174,   138,    40,  -149,    17, 
       0,    31,    10,     0,     0,     0,     0,   137,     0,  -230, 
    -252,     9,     0,     0,    12,     0,     0,     5,    38,    39, 
       0,     0,    18,  -179,   155,   249,  -173,    58,    45,  -130, 
       0,    65,     0,     0,     0,     0,    61,     0,    58,     0, 
       0,  -264,     0,     0,     0,     0,     0,    58,   130,   219, 
       0,     0,  -208,     0,     0,     0,    59,    59,    59,    59, 
      63,     0,    64,    58,     0,    62,     0,    65,     0,     0, 
       0,     0,    61,   213,    58,     0,     0,     0,     0,     0, 
       0,   213,     0,    58,    60,     0,     0,     0,     0,     0, 
       0,     0,    59,    59,    59,    59,    63,     0,    64,    58, 
       0,    62,     0,    65,     0,     0,     0,     0,    61,   231, 
      58,     0,     0,     0,     0,     0,     0,   231,     0,    58, 
      60,     0,     0,     0,     0,     0,     0,     0,    59,    59, 
      59,    59,    63,     0,    64,     0,     0,    62,   148,    10, 
      11,     0,     0,     0,     0,     7,     0,     0,     9,     0, 
       0,     0,     0,     3,     5,     4,     6,     0,     0,    98, 
    -219,   139,    58,  -175,     0,     0,    65,    17,     0,     0, 
       0,    61,     0,    58,     0,    99,     0,     0,  -266,     0, 
       0,     0,    58,   129,   -20,   216,     0,  -212,     0,     0, 
       0,    59,    59,    59,    59,    63,     0,    64,     0,     0, 
      62,    91,    10,    11,     0,     0,     0,     0,     7,     0, 
       0,     9,     0,     0,     0,     0,     3,     5,     4,     6, 
       0,     0,    33,  -180,   159,   250,  -210,     0,   217,    16, 
      10,    11,     0,     0,     0,     0,     7,     0,    32,     9, 
       0,  -137,     0,     0,     3,     5,     4,     6,     0,     0, 
      18,  -221,   195,    94,  -233,    58,     0,  -223,    17,    65, 
       0,     0,     0,     0,    61,   206,    58,     0,     0,  -136, 
     209,     0,     0,   206,     0,    58,    60,     0,     0,     0, 
    -211,     0,     0,     0,   208,    59,    59,    59,    63,     0, 
      64,    58,     0,    62,     0,    65,     0,     0,     0,     0, 
      61,  -187,    58,     0,     0,     0,   230,     0,     0,  -187, 
       0,    58,    60,     0,     0,     0,  -217,     0,     0,     0, 
      59,    59,    59,    59,    63,     0,    64,    58,     0,    62, 
       0,    65,     0,     0,     0,     0,    61,   153,    58,     0, 
       0,     0,     0,     0,     0,   153,     0,    58,    60,   -19, 
       0,     0,     0,     0,   217,     0,    59,    59,    59,    59, 
      63,     0,    64,     0,    58,    62,     0,   227,    65,     0, 
       0,     0,     0,    61,  -187,    58,     0,     0,     0,   152, 
       0,     0,  -187,     0,    58,    60,   -12,   248,     0,  -177, 
       0,     0,     0,   151,    59,    59,    59,    63,     0,    64, 
      58,     0,    62,     0,    65,     0,     0,     0,     0,    61, 
     166,    58,     0,     0,     0,   169,     0,     0,   166,     0, 
      58,    60,   253,   139,     0,  -203,     0,     0,     0,   168, 
      59,    59,    59,    63,     0,    64,    58,     0,    62,     0, 
      65,     0,     0,     0,     0,    61,  -187,    58,     0,     0, 
       0,   212,     0,     0,  -187,     0,    58,    60,   244,     0, 
       0,  -209,     0,     0,     0,    59,    59,    59,    59,    63, 
       0,    64,     0,    58,    62,     0,   228,    65,     0,     0, 
       0,     0,    61,    84,    58,     0,     0,     0,    87,     0, 
       0,    84,     0,    58,    60,   189,   170,     0,  -170,     0, 
       0,  -150,    86,    59,    59,    59,    63,     0,    64,     0, 
       0,    62,     0,  -262,    58,    10,     0,     0,    65,     0, 
       0,     0,     0,    61,     9,    58,     0,     0,     0,     0, 
       5,    38,    39,     0,    58,    60,  -181,   158,     0,  -204, 
     138,    69,  -224,    59,    59,    59,    59,    63,     0,    64, 
       0,   137,    62,    72,  -265,     0,    78,    65,    82,    79, 
       0,    73,    61,     0,    58,    80,     0,    81,     0,     0, 
       0,     0,    77,    58,    60,     0,     0,     0,     0,    74, 
      30,     0,    59,    59,    59,    59,    63,    83,    64,    76, 
      75,    62,    72,  -244,     0,    78,    65,    82,    79,     0, 
      73,    61,     0,    58,    80,     0,    81,     0,     0,     0, 
       0,    77,    58,    60,     0,     0,     0,     0,    74,    30, 
       0,    59,    59,    59,    59,    63,    83,    64,    76,    75, 
      62,    72,  -243,     0,    78,    65,    82,    79,     0,    73, 
      61,     0,    58,    80,     0,    81,     0,     0,     0,     0, 
      77,    58,    60,     0,     0,     0,     0,    74,    30,     0, 
      59,    59,    59,    59,    63,    83,    64,    76,    75,    62, 
      72,   239,     0,    78,    65,    82,    79,     0,    73,    61, 
       0,    58,    80,     0,    81,     0,     0,     0,     0,    77, 
      58,    60,     0,     0,     0,     0,    74,    30,     0,    59, 
      59,    59,    59,    63,    83,    64,    76,    75,    62,    72, 
    -255,     0,    78,    65,    82,    79,     0,    73,    61,     0, 
      58,    80,     0,    81,     0,     0,     0,     0,    77,    58, 
      60,     0,     0,     0,     0,    74,    30,     0,    59,    59, 
      59,    59,    63,    83,    64,    76,    75,    62,    72,  -256, 
       0,    78,    65,    82,    79,     0,    73,    61,     0,    58, 
      80,     0,    81,     0,     0,     0,     0,    77,    58,    60, 
       0,     0,     0,     0,    74,    30,     0,    59,    59,    59, 
      59,    63,    83,    64,    76,    75,    62,    72,  -258,     0, 
      78,    65,    82,    79,     0,    73,    61,     0,    58,    80, 
       0,    81,     0,     0,     0,     0,    77,    58,    60,     0, 
       0,     0,     0,    74,    30,     0,    59,    59,    59,    59, 
      63,    83,    64,    76,    75,    62,    72,  -260,     0,    78, 
      65,    82,    79,     0,    73,    61,     0,    58,    80,     0, 
      81,     0,     0,     0,     0,    77,    58,    60,     0,     0, 
       0,     0,    74,    30,     0,    59,    59,    59,    59,    63, 
      83,    64,    76,    75,    62,    72,  -254,     0,    78,    65, 
      82,    79,     0,    73,    61,     0,    58,    80,     0,    81, 
       0,     0,     0,     0,    77,    58,    60,     0,     0,     0, 
       0,    74,    30,     0,    59,    59,    59,    59,    63,    83, 
      64,    76,    75,    62,    72,  -259,     0,    78,    65,    82, 
      79,     0,    73,    61,     0,    58,    80,     0,    81,     0, 
       0,     0,     0,    77,    58,    60,     0,     0,     0,     0, 
      74,    30,     0,    59,    59,    59,    59,    63,    83,    64, 
      76,    75,    62,     0,  -261,    23,    10,   133,     0,   133, 
     133,     0,     0,   133,     0,     9,   133,     0,    12,   133, 
       0,     5,    38,    39,     0,   133,    24,  -164,   132,   160, 
    -176,   238,    22,  -129,   119,     0,     0,     0,   120,     0, 
       0,     0,     0,   121,   133,  -263,    72,     0,     0,    78, 
      65,    82,    79,     0,    73,    61,     0,    58,    80,     0, 
      81,     0,     0,     0,     0,    77,    58,    60,   254,   139, 
       0,     0,    74,    30,     0,    59,    59,    59,    59,    63, 
      83,    64,    76,    75,    62,     0,  -242,    58,    10,    11, 
       0,    65,     0,     0,     7,     0,    61,     9,    58,     0, 
      12,     0,     3,     5,     4,     6,     0,    58,    60,   242, 
       0,     0,     0,   138,    69,   -26,    59,    59,    59,    59, 
      63,     0,    64,     0,   137,    62,    72,   202,     0,    78, 
      65,    82,    79,     0,    73,    61,     0,    58,    80,     0, 
      81,     0,     0,     0,     0,    77,    58,    60,   225,   139, 
       0,  -216,    74,    30,     0,    59,    59,    59,    59,    63, 
      83,    64,    76,    75,    62,     0,   146,    72,    10,    11, 
      78,    65,    82,    79,     7,    73,    61,     9,    58,    80, 
      12,    81,     3,     5,     4,     6,    77,    58,    60,   -35, 
       0,     0,  -215,    74,    30,  -246,    59,    59,    59,    59, 
      63,    83,    64,    76,    75,    62,     0,  -248,    72,    10, 
      11,    78,    65,    82,    79,     7,    73,    61,     9,    58, 
      80,    12,    81,     3,     5,     4,     6,    77,    58,    60, 
      -4,   139,   215,   -18,    74,    30,  -245,    59,    59,    59, 
      59,    63,    83,    64,    76,    75,    62,     0,    70,    16, 
      10,    11,   113,   105,  -188,   110,     7,   251,   103,     9, 
     194,   116,    12,   109,     3,     5,     4,     6,   201,   255, 
      18,  -169,   100,   140,  -178,   115,    30,  -148,    17,   118, 
     108,   117,   114,   111,   112,   107,   106,   104,    29,   -90, 
};

template<>
const int16 *C11_parser_tables_t::Tm = &Tm_[0];

// Terminal transition matrix row ...
static const uint16 Tr_[256] = {
    1339,  1339,  1339,  1339,  1339,    69,  1339,  1339,  1339,    69, 
    1095,  1095,   120,    69,  1339,   151,   351,    69,  1339,  1095, 
     120,  1095,   120,   151,   664,   664,  1339,  1339,  1339,   664, 
    1298,   351,   623,   351,   120,  1339,  1095,   379,  1095,  1095, 
    1095,    69,   288,  1339,    69,   120,  1095,   120,  1339,  1339, 
    1339,  1339,  1339,  1339,  1339,  1339,  1339,  1095,    45,   664, 
     664,    37,   312,   312,   177,     6,  1095,  1339,  1095,   664, 
    1257,   120,  1339,   664,    69,     8,    25,    13,  1216,     1, 
     288,  1095,   151,   664,   514,  1339,    69,   477,   151,   151, 
     100,   664,   351,  1095,   664,   151,   288,    20,   288,   550, 
     120,   664,   623,   664,   664,   664,   664,   664,   664,   664, 
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664, 
     664,   664,   664,   477,    45,    37,  1298,   623,   664,   664, 
     664,  1095,  1339,   664,   379,   664,   120,   664,     6,   664, 
    1136,   120,   703,   664,   664,   664,  1339,  1177,   623,   288, 
    1095,   120,   664,   586,   151,  1339,     3,   100,     8,   379, 
     664,    20,   405,   379,    45,    37,   586,   351,   664,   213, 
      25,  1339,  1298,  1339,  1339,  1339,  1339,  1339,  1339,  1339, 
    1339,  1339,  1339,  1339,  1339,  1095,  1095,  1298,   312,   477, 
      45,   177,     6,  1257,     8,   664,   379,   742,    25,    13, 
    1216,     0,   477,   586,   288,    45,   441,    37,   312,   249, 
       1,   177,   664,   586,     6,   664,   664,   664,  1095,   351, 
     351,    45,   664,   781,   820,   859,   664,  1177,   586,  1257, 
     664,   586,     8,    25,    13,    37,   514,   151,   351,  1339, 
      20,   550,   898,  1136,   937,  1216,     1,  1177,  1095,   664, 
     664,   976,    37,  1015,  1054,  1339, 
};

template<>
const uint16 *C11_parser_tables_t::Tr = &Tr_[0];

// Terminal transition matrix column ...
static const uint8 Tc_[99] = {
      20,    20,    20,     0,    20,    11,    20,     2,     4,    11, 
       4,    10,    15,    17,     5,     8,    17,    17,    18,    14, 
      33,    26,    20,     3,    17,     5,     8,     1,    11,    14, 
      15,    17,     6,    20,     9,    33,    12,    37,    17,    38, 
       7,    17,     2,    26,     3,    17,     4,     5,     6,     7, 
       8,     9,    10,    15,    18,    34,    11,    12,    17,    17, 
      35,    15,    13,    16,    14,    36,    15,    15,    17,    16, 
      17,    17,    18,    19,    20,    21,    22,    23,    24,    37, 
      25,    26,    27,    28,    31,    29,    32,    30,    31,    32, 
      33,    38,    34,    35,    36,    37,    38,    39,    40, 
};

template<>
const uint8 *C11_parser_tables_t::Tc = &Tc_[0];

// Nonterminal transition matrix ...
static const int16 Nm_[2125] = {
      58,   185,    59,    58,   186,    59,    58,   -45,    59,    58, 
     -46,    59,     0,   185,     0,     0,   186,     0,     0,   -45, 
       0,     0,   -46,    58,   -47,    59,    58,   -43,    59,    58, 
      57,    59,   183,     0,     0,     0,   -47,     0,     0,   -43, 
       0,    58,    57,    59,   184,    58,    57,    59,    56,    55, 
     177,     0,     0,     0,    57,     0,     5,    42,    57,    38, 
      39,     0,     0,     0,    58,    57,    59,    56,   181,    58, 
      57,    59,    56,   182,   193,     5,    42,    57,    38,    39, 
       5,    42,    57,    38,    39,     0,     0,     0,     0,    58, 
     -30,    59,     0,   237,   236,     0,     0,     0,   237,   -14, 
       5,   -95,     0,     4,     6,     7,     8,     3,     0,     0, 
      67,    16,  -104,    15,    58,   -31,    59,     0,     0,     0, 
       0,     0,     0,     0,     0,     5,   -97,     0,     4,     6, 
       7,     8,     3,     0,     0,    67,    16,    13,    15,    58, 
      57,    59,    56,    55,    54,    53,    52,   174,     0,     0, 
       5,  -141,    57,    38,    39,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
       0,     0,     0,     0,    48,   190,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     0,     0,    57, 
       0,     0,     0,     0,     0,    48,   -75,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,     0,     0,     0,     0,    48,  -226,    58,    57, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     0, 
       0,    57,     0,     0,     0,     0,     0,    48,   196,    58, 
      68,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       0,     0,    57,     0,     0,     0,     0,     0,    48,   -88, 
      58,    68,    59,    56,    55,    54,    53,    52,    51,    50, 
      49,     0,     0,    57,     0,     0,     0,     0,     0,    48, 
     204,    58,    57,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     0,     0,    57,     0,     0,     0,     0,     0, 
      48,  -146,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     0,     0,    57,     0,     0,     0,     0, 
       0,    48,   233,    58,    57,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,     0,     0, 
       0,     0,    48,   -73,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,   -28,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
       0,     0,     0,     0,    48,  -228,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     0,     0,    57, 
       0,     0,     0,     0,     0,    48,   245,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,     0,     0,     0,     0,    48,   -15,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     0, 
       0,    57,    58,   -33,    59,     0,     0,    48,   -16,     0, 
       0,     0,     0,     5,   -99,    92,     4,     6,     7,     8, 
       3,     0,     0,    93,    16,    92,    15,    58,    57,    59, 
      56,    55,    54,    53,    52,    51,   173,     0,     5,  -139, 
      57,    38,    39,    58,    57,    59,    56,    55,    54,    53, 
     175,     0,     0,     0,     5,    37,    57,    38,    39,     0, 
       0,     0,    58,    57,    59,    56,    55,   178,     0,     0, 
      95,     0,    95,     5,    90,    57,     4,     6,     7,     8, 
       3,     0,  -191,    58,    68,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,     0,     0, 
       0,     0,    48,   187,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,   187,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,   188,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,   188,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
       0,     0,     0,     0,    48,   198,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,   198,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     0,     0,    57, 
       0,     0,     0,     0,     0,    48,   199,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,   199,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,     0,     0,     0,     0,    48,   200,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,   200,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     0, 
       0,    57,     0,  -187,     0,     0,     0,    48,   205,    58, 
      68,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       0,     0,    57,     0,  -187,     0,     0,     0,    48,   211, 
      58,    68,    59,    56,    55,    54,    53,    52,    51,    50, 
      49,     0,     0,    57,     0,  -187,     0,     0,     0,    48, 
     229,    58,    68,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     0,     0,    57,     0,  -187,     0,     0,     0, 
      48,   234,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     0,     0,    57,     0,     0,     0,     0, 
       0,    48,   240,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,   240,    58,    68,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,     0,     0, 
       0,     0,    48,   241,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,   241,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,   243,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,   243,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
    -187,    58,   -32,    59,    48,   246,     0,     0,     0,     0, 
       0,     0,     5,   -93,   -32,     4,     6,     7,     8,     3, 
       0,     0,    35,    16,     0,    15,     0,  -154,     0,     0, 
       0,    44,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     0,     0,    57,     0,    84,     0,     0, 
      84,    48,    85,    58,    68,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,  -187,     0, 
       0,     0,    48,   150,     0,     0,     0,  -182,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     0, 
       0,    57,     0,   153,     0,     0,   153,    48,   154,    58, 
      68,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       0,     0,    57,     0,   166,     0,     0,   166,    48,   167, 
      58,    57,    59,    56,   180,     0,     0,     0,     0,     0, 
       0,     5,    90,    57,     4,     6,     7,     8,     3,   210, 
      89,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      89,    58,    68,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     0,     0,    57,     0,   206,     0,     0,   206, 
      48,   207,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     0,     0,    57,     0,   213,     0,     0, 
     213,    48,   214,    58,    68,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,     0,     0, 
       0,     0,    48,    71,     0,     0,     0,     0,     0,   227, 
       0,     0,     0,    71,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,    71,     0,     0,     0,     0,     0, 
     228,     0,     0,     0,    71,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
     231,     0,     0,   231,    48,   232,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     0,     0,    57, 
       0,     0,     0,     0,     0,    48,  -229,     0,     0,     0, 
       0,     0,     0,   136,   136,     0,   222,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,     0,     0,     0,     0,    48,   235,     0,     0, 
       0,     0,     0,   235,   136,   136,     0,   135,    58,    57, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     5, 
      42,    57,    38,    39,     0,     0,     0,    48,  -145,     0, 
       0,     0,     0,     0,     0,     0,     0,    41,    58,    57, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     5, 
      42,    57,    38,    39,     0,     0,     0,    48,    47,     0, 
       0,     0,     0,     0,     0,     0,     0,    46,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     5, 
      37,    57,    38,    39,     0,     0,     0,    48,   172,     0, 
       0,     0,     0,     0,     0,     0,     0,  -135,   172,    58, 
      68,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       5,    42,    57,    38,    39,     0,     0,     0,    48,   126, 
       0,     0,     0,     0,     0,     0,     0,     0,   127,   126, 
      58,    68,    59,    56,    55,    54,    53,    52,    51,    50, 
      49,     5,    42,    57,    38,    39,     0,     0,     0,    48, 
     126,     0,     0,     0,     0,     0,     0,     0,     0,   191, 
     126,    58,    68,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     5,    42,    57,    38,    39,     0,     0,     0, 
      48,   126,    58,    57,    59,    56,    55,    54,   176,     0, 
     192,   126,     0,     5,    90,    57,     4,     6,     7,     8, 
       3,   165,    89,     0,     0,   164,    96,    97,     0,     0, 
       0,     0,    89,    58,    57,    59,    56,   179,     0,     0, 
       0,     0,     0,     0,     5,    90,    57,     4,     6,     7, 
       8,     3,   165,    89,    35,    16,   164,   156,    97,     0, 
       0,     0,     0,    89,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,    71,  -242,  -242,  -242,     0,     0, 
    -242,  -242,  -242,  -242,    71,    58,    68,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     0,     0,    57,     0, 
       0,     0,     0,     0,    48,    71,  -244,  -244,  -244,     0, 
       0,  -244,  -244,  -244,  -244,    71,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     0,     0,    57, 
       0,     0,     0,     0,     0,    48,    71,  -243,  -243,  -243, 
       0,     0,  -243,  -243,  -243,  -243,    71,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,     0,     0,     0,     0,    48,    71,   239,   239, 
     239,     0,     0,   239,   239,   239,   239,    71,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     0, 
       0,    57,     0,     0,     0,     0,     0,    48,    71,  -255, 
    -255,  -255,     0,     0,  -255,  -255,  -255,  -255,    71,    58, 
      68,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       0,     0,    57,     0,     0,     0,     0,     0,    48,    71, 
    -256,  -256,  -256,     0,     0,  -256,  -256,  -256,  -256,    71, 
      58,    68,    59,    56,    55,    54,    53,    52,    51,    50, 
      49,     0,     0,    57,     0,     0,     0,     0,     0,    48, 
      71,  -258,  -258,  -258,     0,     0,  -258,  -258,  -258,  -258, 
      71,    58,    68,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     0,     0,    57,     0,     0,     0,     0,     0, 
      48,    71,  -260,  -260,  -260,     0,     0,  -260,  -260,  -260, 
    -260,    71,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     0,     0,    57,     0,     0,     0,     0, 
       0,    48,    71,  -254,  -254,  -254,     0,     0,  -254,  -254, 
    -254,  -254,    71,    58,    68,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     0,     0,    57,     0,     0,     0, 
       0,     0,    48,    71,  -259,  -259,  -259,     0,     0,  -259, 
    -259,  -259,  -259,    71,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     0,     0,    57,     0,     0, 
       0,     0,     0,    48,    71,  -261,  -261,  -261,     0,     0, 
    -261,  -261,  -261,  -261,    71,    58,    57,    59,    56,    55, 
      54,    53,    52,    51,    50,    49,     5,    28,    57,     4, 
       6,     7,     8,     3,    48,  -155,     0,     0,  -271,     0, 
       0,     0,     0,     0,  -274,    58,    57,    59,    56,    55, 
      54,    53,    52,    51,    50,   171,     5,    90,    57,     4, 
       6,     7,     8,     3,    88,    89,     0,     0,     0,     0, 
       0,     0,    91,     0,     0,    89,    58,    68,    59,    56, 
      55,    54,    53,    52,    51,    50,    49,     5,    28,    57, 
       4,     6,     7,     8,     3,    48,    71,     0,     0,     0, 
       0,     0,   202,     0,     0,   203,    71,    58,    68,    59, 
      56,    55,    54,    53,    52,    51,    50,    49,     0,     0, 
      57,     0,    34,     0,     0,    34,    48,    71,   146,   146, 
     146,  -184,     0,   146,   146,   146,   146,    71,    58,    68, 
      59,    56,    55,    54,    53,    52,    51,    50,    49,     5, 
      37,    57,    38,    39,     0,     0,     0,    48,   149,    93, 
      16,  -144,    15,     0,     0,    36,     0,    36,   149,    58, 
      57,    59,    56,    55,    54,    53,    52,    51,    50,    49, 
       5,    28,    57,     4,     6,     7,     8,     3,    48,   141, 
       0,    31,  -272,     0,   161,     0,     0,     0,    27,    27, 
      58,    68,    59,    56,    55,    54,    53,    52,    51,    50, 
      49,     5,     2,    57,     4,     6,     7,     8,     3,    48, 
    -105,     0,    31,  -197,    96,    97,   102,     0,     0,  -268, 
      44,    58,    68,    59,    56,    55,    54,    53,    52,    51, 
      50,    49,     5,  -101,    57,     4,     6,     7,     8,     3, 
      48,   134,  -192,    16,  -193,   156,    97,   134,   136,   136, 
       0,   135,    58,    68,    59,    56,    55,    54,    53,    52, 
      51,    50,    49,     5,    28,    57,     4,     6,     7,     8, 
       3,    48,    71,  -248,  -248,  -248,     0,  -248,  -248,  -248, 
    -248,  -248,    71,    58,    57,    59,    56,    55,    54,    53, 
      52,    51,    50,    49,     5,     2,    57,     4,     6,     7, 
       8,     3,    48,    66,    14,    16,    13,    15,   161,    43, 
     133,  -232,     1,    44,    58,    68,    59,    56,    55,    54, 
      53,    52,    51,    50,    49,     5,    28,    57,     4,     6, 
       7,     8,     3,    48,    71,    70,    70,    70,    70,    70, 
      70,    70,    70,    70,    71, 
};

template<>
const int16 *C11_parser_tables_t::Nm = &Nm_[0];

// Nonterminal transition matrix row ...
static const uint16 Nr_[256] = {
 2063,  1970,  2063,   871,    89,  2063,   114,   442,  2001,  2063, 
 2063,  2063,  2063,  2063,  1939,  1970,  2063,  1877,   871,  1908, 
 2063,  1208,  2063,  2063,  1238,  2063,    89,  1785,   114,  1970, 
 2094,  2063,   902,  1815,   923,  2063,  1268,   442,   467,   139, 
  483,  2063,  1970,  2063,  2063,  1970,  2063,  2063,  2063,  2063, 
 2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,   871, 
 1299,  2063,    89,   114,   442,  2063,  2063,  2063,  2063,  2001, 
 2032,  2063,  2063,  1939,  2063,  2063,  2063,  2063,  1877,  2063, 
 2063,  2063,  2063,  1908,   923,  2063,  2063,   948,  2063,  2063, 
 2001,  2063,  2063,  2063,  1208,  1268,  2063,  2063,  1382,   969, 
  871,  1785,  2063,  1815,  1268,   467,   139,   483,  1382,    45, 
  502,  1413,   990,    64,    69,    29,    41,     0,     3,     6, 
    9,    23,   523,   554,  2063,  2063,  2063,  2063,   155,  1330, 
 1361,    45,  2063,   176,  2063,   197,  2063,   218,  2063,   239, 
 1444,  2063,  1475,   585,   616,   647,  2063,  1846,  2063,  2063, 
 2063,  2063,   260,   678,  2063,   502,  1939,  1413,  2063,  1908, 
  281,  2063,  1021,   990,  2063,  2063,   699,  2063,  2063,  1042, 
  871,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063, 
 2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063,    26, 
 2063,  2063,  2063,  2063,  2063,  1146,  2063,  1506,  2063,  2063, 
 2063,  2063,  1063,  1094,  2063,  2063,   720,  2063,  2063,  1125, 
 2063,  2063,   302,   741,  2063,   323,   344,  1177,    64,  2063, 
 2063,  2063,   365,  1537,  1568,  1599,   762,   793,   824,  2063, 
  386,   855,  2063,  2063,  2063,  2063,  2063,  2063,  2063,  2063, 
 2063,  2063,  1630,  2063,  1661,  2063,  2063,  1146,    69,   407, 
  428,  1692,  2063,  1723,  1754,  2063, 
};

template<>
const uint16 *C11_parser_tables_t::Nr = &Nr_[0];

// Nonterminal transition matrix column ...
static const uint8 Nc_[275] = {
    0,     0,     0,     0,     0,     0,     0,     0,     0,    30, 
    0,     0,     0,    30,    30,    30,    30,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,    30,    30,     1, 
    1,     1,     1,     1,     1,     1,     2,     2,     2,     2, 
    2,     2,    13,    13,    13,    13,    13,    13,     3,     3, 
    3,     4,     4,     4,     5,     5,     5,     5,     5,     6, 
    6,     6,     7,     7,     8,     8,     9,     9,    10,    10, 
   19,    19,    20,    20,    20,    20,    27,    27,    27,    27, 
   27,    27,    27,    27,    27,    27,    27,    30,    30,    20, 
   29,    29,    29,    12,    12,    12,    12,    12,    12,    12, 
   12,    12,    12,    23,    23,    23,    23,    18,    18,    18, 
   18,    18,    18,    14,    14,    14,    14,    14,    14,    14, 
   14,    14,    14,    14,    14,    14,    14,    14,    14,    14, 
   14,    14,    11,    11,    27,    27,    29,    29,    29,    12, 
   12,    12,    12,    13,    13,    23,    23,    23,    14,    14, 
   14,    14,    14,    26,    26,    26,    26,    14,    15,    15, 
   15,    15,    16,    16,    17,    17,    21,    21,    22,    22, 
   22,    22,    22,    22,    22,    22,    22,    22,    22,    22, 
   22,    22,    24,    24,    24,    24,    18,    18,    19,    19, 
   30,    30,    20,    20,    20,    27,    27,    29,    29,    23, 
   23,    23,    25,    25,    25,    25,    25,    25,    25,    25, 
   25,    25,    25,    25,    25,    25,    25,    25,    25,    25, 
   25,    25,    25,    20,    20,    20,    26,    26,    26,    26, 
   30,    27,    27,    28,    28,    29,    21,    21,    21,    21, 
   21,    21,    22,    22,    22,    23,    23,    24,    24,    25, 
   25,    26,    26,    27,    27,    27,    28,    28,    28,    28, 
   28,    28,    29,    29,    29,    29,    29,    29,    29,    29, 
   29,    29,    29,    30,    30, 
};

template<>
const uint8 *C11_parser_tables_t::Nc = &Nc_[0];

// Reduction matrix ...
static const uint8 Rm_[1] = {
       0, 
};

template<>
const uint8 *C11_parser_tables_t::Rm = &Rm_[0];

// Reduction matrix row ...
static const uint8 Rr_[256] = {
       0,     0,     0,    94,    96,     0,    98,   100,   102,   161, 
       0,     0,     0,     0,   106,     0,   167,   185,     0,     0, 
     131,     0,     0,   152,     0,     0,     0,     0,     0,     0, 
       0,   166,     0,     0,   183,     0,     0,     0,   140,   142, 
       0,     0,   198,     0,   156,     0,     0,     0,    72,    70, 
      68,    66,    64,    62,    59,    54,    51,    48,    29,     0, 
       0,     0,     0,     0,     0,     0,     0,   106,    42,     0, 
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,    37,     0,     0,   189, 
     194,     0,     0,   147,     0,     0,   200,   201,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,    37,     0,     0,     0,     0,   200,     0,     0,     0, 
       0,   199,     0,     0,     0,     0,     0,     0,    37,     0, 
       0,    71,     0,    69,    67,    65,    63,    60,    61,    55, 
      56,    57,    58,    52,    53,    49,    50,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0, 
};

template<>
const uint8 *C11_parser_tables_t::Rr = &Rr_[0];

// Reduction matrix column ...
static const uint8 Rc_[99] = {
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0, 
};

template<>
const uint8 *C11_parser_tables_t::Rc = &Rc_[0];

// Production lengths (minus one) ...
static const uint8 PL_[275] = {
       1,     0,     0,     0,     2,     0,     0,     0,     0,     0, 
       0,     0,     5,     0,     2,     2,     2,     0,     3,     2, 
       3,     2,     2,     1,     1,     5,     6,     0,     2,     0, 
       1,     1,     1,     1,     3,     3,     0,     0,     0,     0, 
       0,     0,     0,     3,     0,     2,     2,     2,     0,     2, 
       2,     0,     2,     2,     0,     2,     2,     2,     2,     0, 
       2,     2,     0,     2,     0,     2,     0,     2,     0,     2, 
       0,     2,     0,     4,     0,     2,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0, 
       1,     2,     0,     1,     0,     1,     0,     1,     0,     1, 
       0,     1,     0,     0,     2,     2,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     3, 
       4,     1,     0,     0,     0,     1,     1,     2,     0,     1, 
       0,     1,     0,     0,     2,     1,     2,     0,     3,     4, 
       4,     5,     1,     0,     2,     2,     0,     3,     0,     0, 
       0,     0,     0,     0,     3,     3,     1,     0,     0,     2, 
       2,     3,     5,     4,     4,     5,     4,     3,     3,     3, 
       2,     3,     2,     1,     1,     0,     0,     1,     2,     0, 
       0,     2,     1,     1,     0,     0,     2,     1,     0,     1, 
       0,     0,     2,     1,     2,     4,     3,     4,     3,     2, 
       2,     2,     3,     5,     4,     4,     5,     3,     3,     1, 
       2,     2,     3,     2,     3,     0,     1,     0,     3,     2, 
       1,     0,     1,     2,     1,     6,     0,     0,     0,     0, 
       0,     0,     2,     3,     2,     1,     2,     0,     1,     0, 
       0,     0,     1,     4,     6,     4,     4,     6,     5,     6, 
       5,     6,     2,     1,     1,     1,     2,     0,     1,     0, 
       0,     3,     2,     0,     1, 
};

template<>
const uint8 *C11_parser_tables_t::PL = &PL_[0];

template<>
const int32 *C11_parser_tables_t::nd_fterm = 0;

template<>
const int32 *C11_parser_tables_t::nd_term = 0;

template<>
const int32 *C11_parser_tables_t::nd_faction = 0;

template<>
const int32 *C11_parser_tables_t::nd_action = 0;

// Terminal action number ...
static const int8 tact_numb_[99] = {
       0,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
};

template<>
const int8 *C11_parser_tables_t::tact_numb = &tact_numb_[0];

template<>
const int32 *C11_parser_tables_t::node_numb = 0;

template<>
const int32 *C11_parser_tables_t::nact_numb = 0;

template<>
const int32 *C11_parser_tables_t::reverse = 0;

