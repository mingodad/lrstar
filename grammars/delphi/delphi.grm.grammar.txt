
/* delphi grammar */

/* Terminal Symbols */

    0  <error>
    1  <eof>
    2  'package'
    3  'DOT'
    4  '_PROGRAM_'
    5  'SEMICOLON'
    6  'LPAREN'
    7  'RPAREN'
    8  '_USES_'
    9  'COMMA'
   10  '_IN_'
   11  'STRING_CONST'
   12  '_END_'
   13  '_UNIT_'
   14  '_INTERFACE_'
   15  '_IMPLEMENTATION_'
   16  '_INITIALIZATION_'
   17  '_FINALIZATION_'
   18  '_LIBRARY_'
   19  '_LABEL_'
   20  'UNSIGNED_INTEGER'
   21  '_CONST_'
   22  '_TYPE_'
   23  'EQUAL'
   24  '_VAR_'
   25  'COLON'
   26  '_NOT_'
   27  '_NIL_'
   28  'AT'
   29  'UNSIGNED_REAL'
   30  'PLUS'
   31  'MINUS'
   32  'LBRAC'
   33  'RBRAC'
   34  'DOTDOT'
   35  'UPARROW'
   36  '_PACKED_'
   37  '_ARRAY_'
   38  '_OF_'
   39  '_RECORD_'
   40  '_CASE_'
   41  '_SET_'
   42  '_FILE_'
   43  '_STRING_'
   44  '_CLASS_'
   45  '_PUBLISHED_'
   46  '_PUBLIC_'
   47  '_PROTECTED_'
   48  '_PRIVATE_'
   49  '_AUTOMATED_'
   50  '_PROPERTY_'
   51  'DIRECTIVE'
   52  '_PROCEDURE_'
   53  '_FUNCTION_'
   54  '_CONSTRUCTOR_'
   55  '_DESTRUCTOR_'
   56  'IDRPAREN'
   57  'property_method_list'
   58  '_OBJECT_'
   59  '_OBJECT'
   60  '_ABSOLUTE_'
   61  '_EXTERNAL_'
   62  '_FORWARD_'
   63  'ASSIGNMENT'
   64  '_INHERITED_'
   65  '_GOTO_'
   66  '_BEGIN_'
   67  '_IF_'
   68  '_THEN_'
   69  '_ELSE_'
   70  '_REPEAT_'
   71  '_UNTIL_'
   72  '_WHILE_'
   73  '_DO_'
   74  '_FOR_'
   75  '_TO_'
   76  '_DOWNTO_'
   77  '_WITH_'
   78  '_TRY_'
   79  '_FINALLY_'
   80  '_EXCEPT_'
   81  '_ON_'
   82  'NOTEQUAL'
   83  'LT'
   84  'GT'
   85  'LE'
   86  'GE'
   87  '_IS_'
   88  '_OR_'
   89  '_XOR_'
   90  'STAR'
   91  'SLASH'
   92  '_DIV_'
   93  '_MOD_'
   94  '_AND_'
   95  '_SHL_'
   96  '_SHR_'
   97  '_AS_'
   98  '@'
   99  'ID'
  100  'DIESE'

/* Productions */

    0       start
        0      : compilation_unit <eof> 
               ;

    1       compilation_unit
        1      : program 
        2      | unit 
        3      | library 
        4      | 'package' 
               ;

    2       program
        5      : program_heading program_uses_clause program_block 'DOT' 
               ;

    3       program_heading
        6      : '_PROGRAM_' identifier 'SEMICOLON' 
        7      | '_PROGRAM_' identifier 'LPAREN' id_list 'RPAREN' 'SEMICOLON' 
               ;

    4       program_uses_clause
        8      : 
        9      | '_USES_' unit_reference_list 'SEMICOLON' 
               ;

    5       unit_reference_list
       10      : unit_reference 
       11      | unit_reference_list 'COMMA' unit_reference 
               ;

    6       unit_reference
       12      : identifier 
       13      | identifier '_IN_' 'STRING_CONST' 
               ;

    7       program_block
       14      : int_decl_sect_list compound_stmt 
               ;

    8       unit
       15      : unit_heading interface_part implementation_part initialization_part finalization_part '_END_' 'DOT' 
               ;

    9       unit_heading
       16      : '_UNIT_' identifier 'SEMICOLON' 
               ;

   10       interface_part
       17      : '_INTERFACE_' uses_clause int_decl_sect_list 
               ;

   11       uses_clause
       18      : 
       19      | '_USES_' uses_list 'SEMICOLON' 
               ;

   12       uses_list
       20      : identifier 
       21      | uses_list 'COMMA' identifier 
               ;

   13       id_list
       22      : identifier 
       23      | id_list 'COMMA' identifier 
               ;

   14       implementation_part
       24      : '_IMPLEMENTATION_' uses_clause decl_sect_list 
               ;

   15       initialization_part
       25      : 
       26      | '_INITIALIZATION_' compound_stmt 
               ;

   16       finalization_part
       27      : 
       28      | '_FINALIZATION_' compound_stmt 
               ;

   17       library
       29      : library_heading uses_clause block 'DOT' 
               ;

   18       library_heading
       30      : '_LIBRARY_' identifier 'SEMICOLON' 
               ;

   19       decl_sect_list
       31      : 
       32      | decl_sect_list decl_sect 
               ;

   20       decl_sect
       33      : label_decl_sect 
       34      | const_decl_sect 
       35      | type_decl_sect 
       36      | var_decl_sect 
       37      | general_procedure_declaration 
               ;

   21       general_procedure_declaration
       38      : proc_decl 
       39      | func_decl 
       40      | constructor_decl 
       41      | destructor_decl 
               ;

   22       label_decl_sect
       42      : '_LABEL_' label_list 'SEMICOLON' 
               ;

   23       label_list
       43      : label 
       44      | label_list 'COMMA' label 
               ;

   24       label
       45      : 'UNSIGNED_INTEGER' 
       46      | identifier 
               ;

   25       const_decl_sect
       47      : '_CONST_' const_decl 
       48      | const_decl_sect const_decl 
               ;

   26       int_type_decl_sect
       49      : '_TYPE_' int_type_decl 
       50      | int_type_decl_sect int_type_decl 
               ;

   27       int_type_decl
       51      : identifier 'EQUAL' int_type 'SEMICOLON' 
               ;

   28       int_type
       52      : type 
       53      | object_type 
       54      | class_type 
       55      | interface_type 
               ;

   29       var_decl_sect
       56      : '_VAR_' var_decl 
       57      | var_decl_sect var_decl 
               ;

   30       int_decl_sect_list
       58      : 
       59      | int_decl_sect_list int_decl_sect 
               ;

   31       int_decl_sect
       60      : const_decl_sect 
       61      | int_type_decl_sect 
       62      | var_decl_sect 
       63      | proc_heading 
       64      | func_heading 
               ;

   32       const_decl
       65      : identifier 'EQUAL' const 'SEMICOLON' 
       66      | identifier 'COLON' type 'EQUAL' typed_const 'SEMICOLON' 
               ;

   33       const
       67      : simple_const 
       68      | simple_const relop simple_const 
               ;

   34       simple_const
       69      : const_term 
       70      | sign const_term 
       71      | '_NOT_' const_term 
       72      | simple_const addop const_term 
               ;

   35       const_term
       73      : const_factor 
       74      | const_term mulop const_factor 
               ;

   36       const_factor
       75      : unsigned_number 
       76      | qualified_identifier 
       77      | general_string_const 
       78      | 'LPAREN' const 'RPAREN' 
       79      | '_NIL_' 
       80      | 'AT' qualified_identifier 
               ;

   37       unsigned_number
       81      : 'UNSIGNED_INTEGER' 
       82      | 'UNSIGNED_REAL' 
               ;

   38       sign
       83      : 'PLUS' 
       84      | 'MINUS' 
               ;

   39       typed_const
       85      : const 
       86      | array_const 
       87      | record_const 
       88      | set_const 
               ;

   40       array_const
       89      : 'LPAREN' typed_const_list 'RPAREN' 
               ;

   41       typed_const_list
       90      : typed_const 
       91      | typed_const_list 'COMMA' typed_const 
               ;

   42       record_const
       92      : 'LPAREN' const_field_list 'RPAREN' 
               ;

   43       const_field_list
       93      : const_field 
       94      | const_field_list 'SEMICOLON' const_field 
               ;

   44       const_field
       95      : identifier 'COLON' typed_const 
               ;

   45       set_const
       96      : 'LBRAC' const_elem_list 'RBRAC' 
               ;

   46       const_elem_list
       97      : 
       98      | const_elem_list1 
               ;

   47       const_elem_list1
       99      : const_elem 
      100      | const_elem_list1 'COMMA' const_elem 
               ;

   48       const_elem
      101      : const 
      102      | const 'DOTDOT' const 
               ;

   49       type_decl_sect
      103      : '_TYPE_' type_decl 
      104      | type_decl_sect type_decl 
               ;

   50       type_decl
      105      : identifier 'EQUAL' type 'SEMICOLON' 
               ;

   51       type
      106      : simple_type 
      107      | pointer_type 
      108      | structured_type 
      109      | string_type 
               ;

   52       simple_type
      110      : identifier 
      111      | const 'DOTDOT' const 
      112      | 'LPAREN' id_list 'RPAREN' 
               ;

   53       pointer_type
      113      : 'UPARROW' identifier 
               ;

   54       structured_type
      114      : unpacked_structured_type 
      115      | '_PACKED_' unpacked_structured_type 
               ;

   55       unpacked_structured_type
      116      : array_type 
      117      | record_type 
      118      | set_type 
      119      | file_type 
               ;

   56       array_type
      120      : '_ARRAY_' 'LBRAC' simple_type_list 'RBRAC' '_OF_' type 
               ;

   57       simple_type_list
      121      : simple_type 
      122      | simple_type_list 'COMMA' simple_type 
               ;

   58       record_type
      123      : '_RECORD_' field_list '_END_' 
               ;

   59       field_list
      124      : fixed_part 
      125      | variant_part 
      126      | fixed_part 'SEMICOLON' variant_part 
               ;

   60       fixed_part
      127      : record_section 
      128      | fixed_part 'SEMICOLON' record_section 
               ;

   61       record_section
      129      : 
      130      | id_list 'COLON' type 
               ;

   62       variant_part
      131      : '_CASE_' tag_field '_OF_' variant_list 
               ;

   63       tag_field
      132      : identifier 
      133      | identifier 'COLON' identifier 
               ;

   64       variant_list
      134      : variant 
      135      | variant_list 'SEMICOLON' variant 
               ;

   65       variant
      136      : 
      137      | case_tag_list 'COLON' 'LPAREN' field_list 'RPAREN' 
               ;

   66       case_tag_list
      138      : const 
      139      | case_tag_list 'COMMA' const 
               ;

   67       set_type
      140      : '_SET_' '_OF_' simple_type 
               ;

   68       file_type
      141      : '_FILE_' '_OF_' type 
      142      | '_FILE_' 
               ;

   69       string_type
      143      : '_STRING_' 
      144      | '_STRING_' 'LBRAC' const 'RBRAC' 
               ;

   70       class_type
      145      : class_header class_structure_decl '_END_' 
               ;

   71       class_header
      146      : '_CLASS_' inheritance_class 
      147      | '_CLASS_' 
               ;

   72       inheritance_class
      148      : 
      149      | 'LPAREN' id_list 'RPAREN' 
               ;

   73       class_structure_decl
      150      : 
      151      | class_structure_decl class_component_struct 
               ;

   74       class_component_struct
      152      : visibility_decl class_component_list 
      153      | class_component_list 
               ;

   75       visibility_decl
      154      : '_PUBLISHED_' 
      155      | '_PUBLIC_' 
      156      | '_PROTECTED_' 
      157      | '_PRIVATE_' 
      158      | '_AUTOMATED_' 
               ;

   76       field_or_property_or_method_decl
      159      : 
      160      | class_field_decl 
      161      | property_decl 
      162      | method_definition 
               ;

   77       class_field_decl
      163      : 
      164      | id_list 'COLON' type 
               ;

   78       class_component_list
      165      : field_or_property_or_method_decl 
      166      | class_component_list 'SEMICOLON' field_or_property_or_method_decl 
               ;

   79       property_decl
      167      : '_PROPERTY_' identifier property_parameter_list 'COLON' type property_accessors 'SEMICOLON' 
               ;

   80       property_parameter_list
      168      : 
      169      | 'LBRAC' fp_sect_list 'RBRAC' 
               ;

   81       property_accessors
      170      : read_accessor write_accessor default_accessor 
               ;

   82       read_accessor
      171      : 
      172      | 'DIRECTIVE' identifier 
               ;

   83       write_accessor
      173      : 
      174      | 'DIRECTIVE' identifier 
               ;

   84       default_accessor
      175      : 
      176      | 'DIRECTIVE' 
               ;

   85       method_definition
      177      : method_heading method_directives 
               ;

   86       method_heading
      178      : simple_method_heading 
      179      | class_method_heading 
      180      | constructor_definition 
      181      | destructor_definition 
               ;

   87       class_method_heading
      182      : '_CLASS_' simple_method_heading 
               ;

   88       simple_method_heading
      183      : proc_method_heading 
      184      | func_method_heading 
               ;

   89       proc_method_heading
      185      : '_PROCEDURE_' identifier fp_list 'SEMICOLON' 
               ;

   90       func_method_heading
      186      : '_FUNCTION_' identifier fp_list 'COLON' fptype 'SEMICOLON' 
               ;

   91       constructor_definition
      187      : '_CONSTRUCTOR_' qualified_identifier fp_list 'SEMICOLON' 
               ;

   92       destructor_definition
      188      : '_DESTRUCTOR_' qualified_identifier fp_list 'SEMICOLON' 
               ;

   93       method_directives
      189      : static_dynamic_directive call_directive abstract_directive 
               ;

   94       static_dynamic_directive
      190      : 
      191      | 'DIRECTIVE' 'SEMICOLON' 
      192      | 'DIRECTIVE' 'UNSIGNED_INTEGER' 'SEMICOLON' 
               ;

   95       call_directive
      193      : 
      194      | 'DIRECTIVE' 'SEMICOLON' 
               ;

   96       abstract_directive
      195      : 
      196      | 'DIRECTIVE' 'SEMICOLON' 
               ;

   97       interface_type
      197      : interface_header interface_component_list '_END_' 
               ;

   98       interface_header
      198      : '_INTERFACE_' inheritance_interface interface_identification 
      199      | '_INTERFACE_' 
               ;

   99       inheritance_interface
      200      : 
      201      | 'LPAREN' 'IDRPAREN' 
               ;

  100       interface_identification
      202      : 
      203      | 'LBRAC' 'STRING_CONST' 'RBRAC' 
               ;

  101       interface_component_list
      204      : 'property_method_list' 
               ;

  102       object_type
      205      : object_header class_structure_decl '_END_' 
               ;

  103       object_header
      206      : '_OBJECT_' inheritance_object 
      207      | '_OBJECT' 
               ;

  104       inheritance_object
      208      : 
      209      | 'LPAREN' 'IDRPAREN' 
               ;

  105       var_decl
      210      : id_list 'COLON' type absolute_clause 'SEMICOLON' 
               ;

  106       absolute_clause
      211      : 
      212      | '_ABSOLUTE_' 'UNSIGNED_INTEGER' 'COLON' 'UNSIGNED_INTEGER' 
      213      | '_ABSOLUTE_' identifier 
               ;

  107       proc_decl
      214      : proc_heading proc_block 'SEMICOLON' 
               ;

  108       func_decl
      215      : func_heading proc_block 'SEMICOLON' 
               ;

  109       constructor_decl
      216      : constructor_heading proc_block 'SEMICOLON' 
               ;

  110       destructor_decl
      217      : destructor_heading proc_block 'SEMICOLON' 
               ;

  111       proc_heading
      218      : '_PROCEDURE_' qualified_identifier fp_list 'SEMICOLON' 
               ;

  112       func_heading
      219      : '_FUNCTION_' qualified_identifier fp_list 'COLON' fptype 'SEMICOLON' 
               ;

  113       constructor_heading
      220      : '_CONSTRUCTOR_' qualified_identifier fp_list 'SEMICOLON' 
               ;

  114       destructor_heading
      221      : '_DESTRUCTOR_' qualified_identifier fp_list 'SEMICOLON' 
               ;

  115       proc_block
      222      : block 
      223      | '_EXTERNAL_' 
      224      | '_FORWARD_' 
               ;

  116       block
      225      : decl_sect_list compound_stmt 
               ;

  117       fp_list
      226      : 
      227      | 'LPAREN' fp_sect_list 'RPAREN' 
               ;

  118       fp_sect_list
      228      : fp_sect 
      229      | fp_sect_list 'SEMICOLON' fp_sect 
               ;

  119       fp_sect
      230      : id_list 'COLON' fptype 
      231      | '_VAR_' id_list 'COLON' fptype 
      232      | '_VAR_' id_list 
               ;

  120       fptype
      233      : identifier 
      234      | '_STRING_' 
               ;

  121       stmt
      235      : unlabelled_stmt 
      236      | label 'COLON' unlabelled_stmt 
               ;

  122       unlabelled_stmt
      237      : 
      238      | general_proc_call 
      239      | assignment 
      240      | goto_stmt 
      241      | compound_stmt 
      242      | if_stmt 
      243      | case_stmt 
      244      | repeat_stmt 
      245      | while_stmt 
      246      | for_stmt 
      247      | with_stmt 
      248      | try_statement 
               ;

  123       assignment
      249      : variable 'ASSIGNMENT' expr 
               ;

  124       general_proc_call
      250      : '_INHERITED_' proc_call 
      251      | '_INHERITED_' 
      252      | proc_call 
               ;

  125       proc_call
      253      : variable 
      254      | variable 'DOT' proc_call 
               ;

  126       expr_list
      255      : expr 
      256      | expr_list 'COMMA' expr 
               ;

  127       goto_stmt
      257      : '_GOTO_' label 
               ;

  128       compound_stmt
      258      : '_BEGIN_' stmt_list '_END_' 
               ;

  129       stmt_list
      259      : stmt 
      260      | stmt_list 'SEMICOLON' stmt 
               ;

  130       if_stmt
      261      : '_IF_' expr '_THEN_' stmt 
      262      | '_IF_' expr '_THEN_' stmt '_ELSE_' stmt 
               ;

  131       case_stmt
      263      : '_CASE_' expr '_OF_' case_list else_case '_END_' 
               ;

  132       case_list
      264      : case 
      265      | case_list 'SEMICOLON' case 
               ;

  133       case
      266      : 
      267      | case_label_list 'COLON' stmt 
               ;

  134       case_label_list
      268      : case_label 
      269      | case_label_list 'COMMA' case_label 
               ;

  135       case_label
      270      : const 
      271      | const 'DOTDOT' const 
               ;

  136       else_case
      272      : 
      273      | '_ELSE_' stmt 
      274      | '_ELSE_' stmt 'SEMICOLON' 
               ;

  137       repeat_stmt
      275      : '_REPEAT_' stmt_list '_UNTIL_' expr 
               ;

  138       while_stmt
      276      : '_WHILE_' expr '_DO_' stmt 
               ;

  139       for_stmt
      277      : '_FOR_' identifier 'ASSIGNMENT' expr '_TO_' expr '_DO_' stmt 
      278      | '_FOR_' identifier 'ASSIGNMENT' expr '_DOWNTO_' expr '_DO_' stmt 
               ;

  140       with_stmt
      279      : '_WITH_' variable_list '_DO_' stmt 
               ;

  141       variable_list
      280      : variable 
      281      | variable_list 'COMMA' variable 
               ;

  142       try_statement
      282      : '_TRY_' stmt_list try_protected_code 
               ;

  143       try_protected_code
      283      : try_except_protected_code 
      284      | try_finally_protected_code 
               ;

  144       try_finally_protected_code
      285      : '_FINALLY_' stmt_list '_END_' 
               ;

  145       try_except_protected_code
      286      : '_EXCEPT_' exception_bloc '_END_' 
               ;

  146       exception_bloc
      287      : stmt_list 
      288      | general_exception_handlers_list 
               ;

  147       general_exception_handlers_list
      289      : exception_handlers_list exception_else_clause 
               ;

  148       exception_handlers_list
      290      : exception_handler 
      291      | exception_handlers_list 'SEMICOLON' exception_handler 
               ;

  149       exception_handler
      292      : 
      293      | '_ON_' exception_selector '_DO_' stmt 
               ;

  150       exception_selector
      294      : identifier 
      295      | identifier 'COLON' identifier 
               ;

  151       exception_else_clause
      296      : 
      297      | '_ELSE_' stmt_list 
               ;

  152       variable
      298      : qualified_identifier 
      299      | variable 'LBRAC' expr_list 'RBRAC' 
      300      | variable 'DOT' identifier 
      301      | variable 'UPARROW' 
      302      | qualified_identifier 'LPAREN' expr_list 'RPAREN' 'DOT' variable 
      303      | qualified_identifier 'LPAREN' expr_list 'RPAREN' 
               ;

  153       expr
      304      : simple_expr 
      305      | simple_expr relop simple_expr 
               ;

  154       relop
      306      : 'EQUAL' 
      307      | 'NOTEQUAL' 
      308      | 'LT' 
      309      | 'GT' 
      310      | 'LE' 
      311      | 'GE' 
      312      | '_IN_' 
      313      | '_IS_' 
               ;

  155       simple_expr
      314      : term 
      315      | sign term 
      316      | '_NOT_' term 
      317      | 'AT' term 
      318      | simple_expr addop term 
               ;

  156       addop
      319      : 'PLUS' 
      320      | 'MINUS' 
      321      | '_OR_' 
      322      | '_XOR_' 
               ;

  157       term
      323      : factor 
      324      | term mulop factor 
               ;

  158       mulop
      325      : 'STAR' 
      326      | 'SLASH' 
      327      | '_DIV_' 
      328      | '_MOD_' 
      329      | '_AND_' 
      330      | '_SHL_' 
      331      | '_SHR_' 
      332      | '_AS_' 
               ;

  159       factor
      333      : variable 
      334      | 'UNSIGNED_INTEGER' 
      335      | 'UNSIGNED_REAL' 
      336      | general_string_const 
      337      | 'LBRAC' elem_list 'RBRAC' 
      338      | '_NIL_' 
      339      | '@' variable 
      340      | 'LPAREN' expr 'RPAREN' 
      341      | qualified_identifier 'LPAREN' expr_list 'RPAREN' 
      342      | '_NOT_' factor 
               ;

  160       elem_list
      343      : 
      344      | elem_list1 
               ;

  161       elem_list1
      345      : elem 
      346      | elem_list1 'COMMA' elem 
               ;

  162       elem
      347      : expr 
      348      | expr 'DOTDOT' expr 
               ;

  163       identifier
      349      : 'ID' 
      350      | 'DIRECTIVE' 
               ;

  164       qualified_identifier
      351      : identifier 
      352      | qualified_identifier 'DOT' identifier 
               ;

  165       general_string_const
      353      : 'STRING_CONST' 
      354      | 'DIESE' 'UNSIGNED_INTEGER' 
               ;

/* End of delphi grammar 

