
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    SQL_ParserTables.hpp (generated by LRSTAR 24.0.017)

      #include "lrstar_basic_defs.h"
      #include "lrstar_parser_tables.h"
      #include "SQL_ParserTables.h"
      #include "SQL_Actions.h"

      static int n_terms      =  138; // Number of terminals.
      static int n_heads      =  154; // Number of nonterminals.
      static int n_prods      =  399; // Number of productions.
      static int n_states     =  532; // Number of states.
      static int accept_state =  531; // Accept state.
      static int n_termactns  =    2; // Number of terminal actions.
      static int n_nodenames  =    0; // Number of node names.
      static int n_nodeactns  =    0; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      const char* lrstar_parser_tables::term_symb[138] = 
      {
         "<error>",
         "<eof>",
         "<string>",
         "<number>",
         "<identifier>",
         "\'BEGIN\'",
         "\'DECLARE\'",
         "\'SECTION\'",
         "\';\'",
         "\'END\'",
         "\'CLOSE\'",
         "\'CURSOR\'",
         "\'FOR\'",
         "\'DELETE\'",
         "\'WHERE\'",
         "\'FROM\'",
         "\'CURRENT\'",
         "\'OF\'",
         "\'DESCRIBE\'",
         "\'INTO\'",
         "\'END_EXEC\'",
         "\'.\'",
         "\'EXEC\'",
         "\'EXECUTE\'",
         "\'USING\'",
         "\'DESCRIPTOR\'",
         "\':\'",
         "\'IMMEDIATE\'",
         "\'FETCH\'",
         "\'AVG\'",
         "\'COUNT\'",
         "\'(\'",
         "\'*\'",
         "\')\'",
         "\'DISTINCT\'",
         "\'MAX\'",
         "\'MIN\'",
         "\'SUM\'",
         "\'SELECT\'",
         "\',\'",
         "\'GROUP\'",
         "\'BY\'",
         "\'HAVING\'",
         "\'INCLUDE\'",
         "\'SQLCA\'",
         "\'SQLDA\'",
         "\'INSERT\'",
         "\'INTERSECT\'",
         "\'ORDER\'",
         "\'MINUS\'",
         "\'OPEN\'",
         "\'BETWEEN\'",
         "\'AND\'",
         "\'NOT\'",
         "\'=\'",
         "\'<>\'",
         "\'>\'",
         "\'>=\'",
         "\'<\'",
         "\'<=\'",
         "\'EXISTS\'",
         "\'IN\'",
         "\'LIKE\'",
         "\'ESCAPE\'",
         "\'IS\'",
         "\'NULL\'",
         "\'SOME\'",
         "\'ANY\'",
         "\'PREPARE\'",
         "\'UNION\'",
         "\'UPDATE\'",
         "\'SET\'",
         "\'WHENEVER\'",
         "\'ALTER\'",
         "\'TABLE\'",
         "\'ADD\'",
         "\'COLUMN\'",
         "\'WITH\'",
         "\'DEFAULT\'",
         "\'COMMENT\'",
         "\'ON\'",
         "\'CLEAR\'",
         "\'INDEX\'",
         "\'VIEW\'",
         "\'CREAT\'",
         "\'UNIQUE\'",
         "\'SYNONYM\'",
         "\'CREATE\'",
         "\'AS\'",
         "\'DROP\'",
         "\'STATISTICS\'",
         "\'LOCK\'",
         "\'SHARE\'",
         "\'MODE\'",
         "\'EXCLUSIVE\'",
         "\'REVOKE\'",
         "\'AP\'",
         "\'ROLLBACK\'",
         "\'WORK\'",
         "\'PUBLIC\'",
         "\'COMMIT\'",
         "\'GRANT\'",
         "\'TO\'",
         "\'OPTION\'",
         "\'ALL\'",
         "\'PRIVILEGES\'",
         "\'CHECK\'",
         "\'ASC\'",
         "\'DESC\'",
         "<literal>",
         "\'SYSTEM\'",
         "\'CONTINUE\'",
         "\'GOTO\'",
         "\'GO\'",
         "\'PERFORM\'",
         "\'CALL\'",
         "\'FOUND\'",
         "\'SQLERROR\'",
         "\'SQLWARNING\'",
         "\'DIST\'",
         "\'OR\'",
         "\'VALUES\'",
         "\'+\'",
         "\'-\'",
         "\'/\'",
         "\'CHAR\'",
         "\'CHARACTER\'",
         "\'VARCHAR\'",
         "\'NUMERIC\'",
         "\'DEC\'",
         "\'DECIMAL\'",
         "\'INT\'",
         "\'INTEGER\'",
         "\'SMALLINT\'",
         "\'FLOAT\'",
         "\'REAL\'",
         "\'DOUBLE\'",
         "\'PRECISION\'"
      };

   // Nonterminal symbols of the grammar ...
      const char *lrstar_parser_tables::head_symb[154] = 
      {
         "Goal",
         "SQL",
         "D",
         "DML_list",
         "DDL_list",
         "DCL_list",
         "DML_stmt",
         "DDL_stmt",
         "user_ids",
         "table_names",
         "DCL_stmt",
         "alter_list",
         "alter",
         "collist",
         "withgrant",
         "ALLP",
         "viewlist",
         "with",
         "col_stuff2_list",
         "col_stuff2",
         "col_stuff_list",
         "col_stuff",
         "unique_stuff_list",
         "unique_stuff",
         "colsortlist",
         "columnsort",
         "colislist",
         "NOT_NULL",
         "DEFAULT_literal",
         "continue",
         "notfound",
         "wherecurr",
         "tab",
         "view",
         "coleqlist",
         "coleq",
         "orderbyint",
         "intlist",
         "int",
         "select_clause",
         "where",
         "groupby",
         "column_list",
         "column_spec",
         "having",
         "intersect",
         "orderby",
         "col_list",
         "column_spec_list",
         "column_sort_spec",
         "sort_spec",
         "select_list",
         "select",
         "search",
         "predlist",
         "pred",
         "from_clause",
         "hostvar",
         "string",
         "Subselect_clause",
         "colnamelist",
         "Values",
         "vallist",
         "val",
         "FROM_stuff_list",
         "FROM_stuff",
         "args",
         "Exp",
         "Trm",
         "Prim",
         "Primary",
         "host_list",
         "sqlda_name",
         "Union",
         "ForUpdateOf",
         "column_name_list",
         "OrderBy",
         "column_order_list",
         "column",
         "order",
         "data_type",
         "search_cond",
         "length",
         "precision",
         "scale",
         "column_number",
         "column_name",
         "stmt_name",
         "table_name",
         "view_name",
         "host_variable",
         "cursor_name",
         "corr_name",
         "function",
         "host_label",
         "index_name",
         "member_name",
         "predicate",
         "synonym_name",
         "view_column_name",
         "user_id",
         "Union*",
         "ForUpdateOf?",
         "OrderBy?",
         "'.'?",
         "colnamelist?",
         "Values?",
         "(Exp | Subselect_clause)",
         "NOT?",
         "(hostvar | string)",
         "(SOME | ANY | ALLP)?",
         "(pred | search)",
         "predlist?",
         "orderbyint?",
         "(tab | view)",
         "where?",
         "wherecurr?",
         "NOT_NULL?",
         "DEFAULT_literal?",
         "CLEAR?",
         "UNIQUE?",
         "('(' viewlist ')')?",
         "with?",
         "ALLP?",
         "(ALLP | AP)",
         "WORK?",
         "user_id/','+",
         "PUBLIC/','+",
         "table_name/','+",
         "withgrant?",
         "alter/','+",
         "('(' collist ')')?",
         "column_name/','+",
         "view_column_name/','+",
         "col_stuff2/','+",
         "col_stuff/','+",
         "unique_stuff/','+",
         "columnsort/','+",
         "<string>/','+",
         "coleq/','+",
         "int/','+",
         "(ALL | DIST)?",
         "(where | groupby | having | intersect | orderby)",
         "(where | groupby | having | intersect | orderby)*",
         "column_spec/','+",
         "column_sort_spec/','+",
         "sort_spec?",
         "select/','+",
         "pred+",
         "corr_name/','*",
         "val/','+",
         "FROM_stuff+",
         "host_variable/','+",
         "order*"
      };

   // Terninal action names found in the grammar ...
      const char *lrstar_parser_tables::tact_name[2] = 
      {
         "error",
         "lookup"
      };

   // Head symbol numbers for the productions ...
      const uint8 lrstar_parser_tables::head_numb[399] = 
      {
          0,    1,    1,    2,    2,    2,    3,    3,    4,    4,    5,    5,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
          7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    8,    8,    9,   10,
         10,   11,   12,   12,   12,   12,   12,   12,   13,   14,   15,   15,   16,   17,   18,   19,   19,   20,   21,   21,
         22,   23,   24,   25,   25,   25,   26,   27,   28,   28,   29,   29,   29,   29,   29,   30,   30,   30,   31,   32,
         33,   34,   35,   35,   36,   37,   38,   38,   38,   39,   40,   41,   42,   43,   43,   44,   45,   45,   45,   45,
         46,   46,   47,   48,   49,   49,   50,   50,   51,   52,   52,   52,   52,   52,   53,   54,   55,   55,   55,   56,
         57,   58,   59,   60,   61,   61,   61,   62,   63,   63,   63,   64,   65,   65,   65,   65,   66,   66,   66,   67,
         67,   67,   68,   68,   68,   69,   69,   69,   70,   70,   70,   70,   70,   70,   71,   72,   73,   73,   74,   75,
         76,   77,   78,   78,   79,   79,   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
         80,   81,   81,   81,   81,   81,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
         95,   96,   97,   98,   99,  100,  101,  101,  102,  102,  103,  103,  104,  104,  105,  105,  106,  106,  107,  107,
        108,  108,  109,  109,  110,  110,  110,  110,  111,  111,  112,  112,  113,  113,  114,  114,  115,  115,  116,  116,
        117,  117,  118,  118,  119,  119,  120,  120,  121,  121,  122,  122,  123,  123,  124,  124,  125,  125,  126,  126,
        127,  127,  128,  128,  129,  129,  130,  130,  131,  131,  132,  132,  133,  133,  134,  134,  135,  135,  136,  136,
        137,  137,  138,  138,  139,  139,  140,  140,  141,  141,  141,  142,  142,  142,  142,  142,  143,  143,  144,  144,
        145,  145,  146,  146,  147,  147,  148,  148,  149,  149,  149,  150,  150,  151,  151,  152,  152,  153,  153
      };

   // First tail symbol index into the tail list ...
      const uint16 lrstar_parser_tables::f_tail[400] = 
      {
          0,    2,    3,    5,    6,    7,    8,    9,   11,   12,   14,   15,   17,   21,   25,   28,   37,   43,   48,   56,
         64,   69,   71,   74,   77,   82,   89,   94,   98,  103,  110,  113,  118,  124,  127,  130,  133,  144,  148,  152,
        155,  158,  161,  164,  170,  176,  180,  187,  191,  198,  201,  205,  210,  217,  221,  227,  234,  238,  242,  246,
        250,  254,  258,  261,  265,  269,  273,  278,  285,  290,  301,  306,  311,  316,  321,  326,  331,  336,  342,  345,
        347,  352,  358,  364,  370,  374,  384,  393,  406,  413,  421,  430,  440,  448,  456,  464,  469,  478,  483,  492,
        501,  508,  518,  524,  528,  532,  536,  544,  548,  552,  556,  560,  567,  574,  581,  589,  591,  592,  593,  594,
        596,  604,  605,  606,  607,  608,  609,  610,  612,  613,  616,  617,  619,  620,  623,  624,  626,  630,  631,  633,
        638,  639,  643,  644,  645,  647,  649,  652,  654,  656,  658,  659,  662,  666,  669,  672,  674,  675,  676,  680,
        681,  682,  683,  686,  689,  692,  693,  694,  696,  698,  703,  705,  708,  709,  710,  711,  713,  715,  717,  719,
        722,  725,  729,  730,  731,  733,  735,  736,  737,  738,  739,  740,  741,  742,  743,  744,  745,  746,  749,  752,
        755,  757,  758,  759,  762,  762,  763,  767,  768,  769,  771,  772,  773,  775,  777,  780,  783,  786,  790,  794,
        795,  798,  801,  802,  805,  808,  809,  811,  813,  814,  817,  818,  819,  820,  822,  824,  825,  827,  830,  834,
        835,  838,  840,  841,  842,  843,  844,  848,  852,  856,  860,  866,  870,  876,  880,  886,  887,  888,  889,  890,
        891,  893,  896,  899,  902,  905,  908,  911,  912,  913,  914,  915,  916,  917,  918,  919,  920,  921,  922,  923,
        924,  925,  926,  927,  928,  929,  930,  930,  932,  932,  933,  933,  934,  934,  935,  935,  936,  936,  937,  938,
        939,  939,  940,  941,  942,  942,  943,  944,  945,  946,  947,  947,  948,  948,  949,  950,  951,  951,  952,  952,
        953,  953,  954,  954,  955,  955,  956,  956,  957,  957,  960,  960,  961,  961,  962,  963,  964,  964,  965,  966,
        969,  970,  973,  974,  977,  977,  978,  979,  982,  982,  985,  986,  989,  990,  993,  994,  997,  998, 1001, 1002,
       1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1028, 1030, 1031,
       1034, 1035, 1038, 1038, 1039, 1040, 1043, 1044, 1046, 1046, 1047, 1050, 1051, 1054, 1055, 1057, 1058, 1061, 1061, 1063
      };

   // Tail symbol numbers ...
      const int16 lrstar_parser_tables::tail[1063] = 
      {
         -1,    1,   -2,   -1,   -2,   -3,   -4,   -5,   -6,   -3,   -6,   -7,   -4,   -7,  -10,   -5,  -10,    5,    6,    7,
          8,    9,    6,    7,    8,   10,  -91,    8,    6,  -91,   11,   12,  -87, -101, -102, -103,    8,    6,  -91,   11,
         12,  -87,    8,   13,  -56,   14,  -81,    8,   13,   15,  -88,   14,   16,   17,  -91,    8,   13,   15,  -89,   14,
         16,   17,  -91,    8,   18,  -87,   19,  -72,    8,   20, -104,   22,   -1,    8,   23,  -87,    8,   23,  -87,   24,
        -71,    8,   23,  -87,   24,   25,   26,  -90,    8,   23,   27,   26,  -90,    8,   23,   27,    2,    8,   28,  -91,
         19,  -71,    8,   28,  -91,   24,   25,   26,  -90,    8,   29,  -66,    8,   30,   31,   32,   33,    8,   30,   31,
         34,  -86,   33,    8,   35,  -66,    8,   36,  -66,    8,   37,  -66,    8,   13,  -87,   26,  -65,   38,  -87,   39,
        -39,   26,  -64,    8,   40,   41,  -86,    8,   40,   41,  -85,    8,   42,  -81,    8,   43,   44,    8,   43,   45,
          8,   43,  -96,    8,   46,   19,  -88, -105, -106,    8,   46,   19,  -89, -105, -106,    8,  -87,   47,  -87,    8,
        -87,   47,  -87,   48,   41,  -37,    8,  -87,   49,  -87,    8,  -87,   49,  -87,   48,   41,  -37,    8,   50,  -91,
          8,   50,  -91,   24,    8,   50,  -91,   24,  -71,    8,   50,  -91,   24,   25,   26,  -90,    8,   48,   41,  -13,
          8,  -67,   51,  -67,   52,  -67,    8,  -67,   53,   51,  -67,   52,  -67,    8,  -67,   54, -107,    8,  -67,   55,
       -107,    8,  -67,   56, -107,    8,  -67,   57, -107,    8,  -67,   58, -107,    8,  -67,   59, -107,    8,   60,  -59,
          8,  -67,   61,  -59,    8,  -67,   61,  -71,    8,  -67,   61,  -67,    8,  -67,   53,   61,  -59,    8,  -67,   53,
         61,   31,  -71,   33,    8,  -67,   53,   61,  -67,    8,  -86, -108,   62,   31, -109,   33,   63,   31, -109,   33,
          8,  -67,   64, -108,   65,    8,  -67,   54, -110,  -59,    8,  -67,   55, -110,  -59,    8,  -67,   56, -110,  -59,
          8,  -67,   57, -110,  -59,    8,  -67,   58, -110,  -59,    8,  -67,   59, -110,  -59,    8,   68,  -87,   15,   26,
        -90,    8, -108, -111, -112,  -39,    8,  -87,   69,  -87, -113,    8,  -87,   69,  -15,  -87, -113,    8,   70, -114,
         71,  -34, -115,    8,   70, -114,   71,  -34, -116,    8,   72,  -30,  -29,    8,   73,   74,  -88,   75,   76,  -86,
        -80, -117, -118,    8,   73,   74,  -88,   75,   31,  -86,  -80,   33,    8,   73,   74,  -88,   75,   31,  -86,  -80,
         33,   53,   65,   77,   78,    8,   73,   74,  -88,   75,  -86,  -80,    8,   73,   74,  -88,   75,  -86,  -80,   65,
          8,   73,   74,  -88,   75,  -86,  -80,   53,   65,    8,   79,   80,   76,  -86,   80, -114,   64,    2, -119,    8,
         79,   80,   82,  -95,   64,    2, -119,    8,   79,   80,   74,  -88,   64,    2, -119,    8,   79,   80,   83,  -89,
         64,    2, -119,    8,   79,   80,   74,  -88,    8,   79,   80,   76,  -86,   21,  -86,   64,    2,    8,   79,   80,
         74, -114,    8,   79,   80,   76,  -88,   21,  -86,   64,    2,    8,   79,   80,   76,  -89,   21,  -86,   64,    2,
          8,   79,   80, -114,   31,  -26,   33,    8,   84, -120,   82,  -95,   80,  -88,   31,  -24,   33,    8,   84,   86,
        -98,   12, -114,    8,   87,  -88,  -20,    8,   87,  -88,  -22,    8,   87,  -88,  -18,    8,   87,   83,  -89, -121,
         88,  -87, -122,    8,   89,   82,  -95,    8,   89,   86,  -98,    8,   89,   74,  -88,    8,   89,   83,  -89,    8,
         70, -123,   90,   12,   74,  -88,    8,   91,   74, -114,   61,   92,   93,    8,   91,   74, -114,   61,   94,   93,
          8,   95, -124,  -11,   80,   -9,   15,   -8,    8,   97, -125, -126, -127, -128,  100, -125,  101, -124,  -11,   80,
        -88,  102, -100, -129, -130,   73,   13,   82,   46,   38,   70, -131, -132,   77,  101,  103,  104,  104,  105, -133,
         77,  106,  103, -134,  -86,  -80,  -86,  -80,   53,   65, -135,  -86,  -80,  -86,  -80,   53,   65, -120, -136,   85,
         31,  -13,   33, -137,  -86,  -86,  107,  -86,  108,  -86,   64, -138,   53,   65,   78,  109,   78,  110,  111,  112,
         26,  -94,  113,  102,   26,  -94,  114,   26,  -94,  115,   26,  -94,   53,  116,  117,  118,   14,   16,   17,  -91,
        -88,  -89, -139,  -86,   54,  -67,  -86,   54,   65,   48,   41,  -37, -140,    3,    3,  107,    3,  108,   38, -141,
        -51,  -56, -143,   14,  -81,   40,   41,  -42, -144,  -86,  -85,   42,  -81,   47,  -87,   49,  -87,   69,  -87,   69,
        104,  -87,   48,   41,  -48,   12,   70,   17,  -47, -132, -145,  -86, -146,  -85, -146,  107,  108, -147,   32,  -67,
        -88,  -89,  -92,  -81, -148,  -97,   52, -108,  -97,  120, -108,  -81,   15, -114, -149,   26,  -90,    2,  -39,   31,
       -132,   33,  -87,  121,   31,  -62,   33, -150,  109,   26,  -90,   65, -151,   15,  -88,   15,  -89,   15,  -88,  -92,
         15,  -89,  -92,   31,  -67,   33,   31,  104,  -67,   33,   31,   34,  -86,   33,  -69,  -67,  122,  -68,  -67,  123,
        -68,  -69,  -68,   32,  -69,  -68,  124,  -69,  -70,  122,  -70,  123,  -70,  -93,   31,  -67,   33,  109,    3,  -86,
         26,  -90,   26, -152,    4,   69,  -87,   69,  104,  -87,   12,   70,   17,  -75, -132,   48,   41,  -77,  -78, -153,
        -86,    3,  107,  108,  125,   31,  -82,   33,  126,   31,  -82,   33,  127,   31,  -82,   33,  128,   31,  -83,   33,
        128,   31,  -83,   39,  -84,   33,  129,   31,  -83,   33,  129,   31,  -83,   39,  -84,   33,  130,   31,  -83,   33,
        130,   31,  -83,   39,  -84,   33,  131,  132,  133,  134,  135,  136,  137,    4,   54,    4,    4,   58,    4,    4,
         56,    4,    4,   59,    4,    4,   57,    4,    4,   55,    4,    3,    3,    3,    3,    4,    4,    4,    4,    4,
          4,    4,    4,    4,    4,    4,    4,    4,    4,    4, -101,  -73,  -74,  -76,   21,  -60,  -61,  -67,  -59,   53,
        -57,  -58,   66,   67,  -15,  -55,  -53,  -54,  -36,  -32,  -33,  -40,  -31,  -27,  -28,   81,   85,   31,  -16,   33,
        -17,  -15,  -15,   96,   98, -100, -126,   39, -100,   99, -127,   39,   99,  -88, -128,   39,  -88,  -14,  -12, -130,
         39,  -12,   31,  -13,   33,  -86, -132,   39,  -86,  -99, -133,   39,  -99,  -19, -134,   39,  -19,  -21, -135,   39,
        -21,  -23, -136,   39,  -23,  -25, -137,   39,  -25,    2, -138,   39,    2,  -35, -139,   39,  -35,  -38, -140,   39,
        -38,  104,  119,  -40,  -41,  -44,  -45,  -46, -143, -142,  -43, -144,   39,  -43,  -49, -145,   39,  -49,  -50,  -52,
       -147,   39,  -52,  -55, -148,  -55,  -92, -149,   39,  -92,  -63, -150,   39,  -63,  -65, -151,  -65,  -90, -152,   39,
        -90, -153,  -79
      };

   // Arguments for token actions ...
      const int8 lrstar_parser_tables::arga[138] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Boolean matrix ...
      const uint8 lrstar_parser_tables::Bm[736] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,    8,   80,   20,    9,  160,   32,    0,   24,
          8,    8,  122,    8,   80,   20,    9,  160,   32,    0,   24,    8,    8,  120,    8,   80,   20,    9,   32,    0,
          0,    0,    8,    8,    0,    0,    0,  128,    0,   16,    0,    0,    0,    0,    0,  122,    2,    0,    0,    0,
          0,    8,    0,    0,    0,    0,    0,    0,   16,    0,    0,    0,    4,    0,    0,    0,    0,    0,    2,    0,
          1,    0,    0,    0,    0,    0,    0,    0,    0,    0,  160,   32,    0,    0,    0,    0,    0,    0,    0,    0,
         24,    0,    0,   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,   16,   32,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
          0,    0,    0,    0,    0,   16,    0,   32,    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
          0,    0,    0,    0,   16,    0,    0,   64,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
          0,    0,    0,    0,   24,    0,   80,    0,    0,    0,    0,    0,    0,    8,    8,   24,    0,   80,    0,    0,
          0,    0,    0,    0,    8,    0,    0,    0,    4,    0,    0,    0,    0,    0,    0,    0,    0,  128,    0,    1,
         16,    0,    0,    0,    0,    0,    0,    0,  128,    0,    0,    0,    0,    8,    0,    0,    0,    0,  128,    0,
          0,    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,    0,    0,   12,    0,    0,    0,   16,    0,    0,
          0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    1,   11,    0,    0,    0,    0,    0,    0,    0,
          0,  129,    0,    0,    0,    0,   66,    0,    0,    0,    0,    0,    0,   24,    0,   80,    4,    0,    8,    0,
          0,  128,    8,    8,   24,    0,   80,    4,    0,    0,    0,    0,    0,    8,    8,    0,    0,    0,    0,   48,
          0,    0,    0,    0,    0,    0,    0,    0,  128,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  120,    9,   80,   20,    9,  160,   32,    0,   24,    8,    8,
          0,    1,    4,    0,    0,    0,    0,    0,    0,    0,    0,    4,    0,   16,    0,    0,    0,    0,    0,    0,
          0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,   24,    0,   80,    2,    0,    0,    0,    0,  128,
          8,    8,    0,    0,  128,    2,    0,    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    8,    0,   32,    0,    0,    0,    0,    0,    0,
          0,    0,    0,   24,    0,  208,    0,    0,    0,    0,    0,    0,    8,    8,    0,    0,    0,    0,    0,    0,
          0,    0,    0,   32,    0,    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,   16,    0,    0,    0,    0,
          0,    5,    3,    0,    0,    0,   16,    0,    0,    0,    0,    0,    0,    4,    0,    0,    0,    8,    0,    4,
          0,  160,    0,    1,    0,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    0,    4,    0,    0,
          0,    0,    0,    8,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    8,    0,    1,    0,    0,    0,
          0,    0,    0,    0,    0,    8,    0,    0,  128,    0,    0,    0,    0,    0,    0,    0,   16,    0,    1,   24,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,   16,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    4,   16,    0,   64,    0,    0,    0,    4,    0,    0,    0,    0,    2,    0,    0,    0,   64,    0,    0,
          0,    0,    1,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
          0,    0,    0,    0,    0,    4,    0,    0,    0,    9,    0,    0,    0,    0,    0,    0,    0,   20,    0,  144,
          1,   16,    0,    0,    0,    0,    0,   16,   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
         80,    0,    0,    4,    0,    0,    0,    8,    8,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          4,    0,    0,    0,   16,    0,    0,    0,    0,    0,   16,    0,    0,    4,    0,    0,    0,    8,    0,    1,
          0,    0,    8,    4,    0,    0,    0,    0,    0,    0,    8,    0,    0,    0,    0,   16,    0,    0,    0,    0,
          0,    0,    0,    4,    0,    0,    1,    0,    0,    8,    0,    0,    0,    0,    0,    0
      };

   // Boolean matrix row (for state)...
      const uint16 lrstar_parser_tables::Br[532] = 
      {
         11,   22,   33,   44,   51,   57,   68,   79,   85,   92,  103,  103,  114,  114,  125,  114,  134,   11,  145,  114,
        101,  101,  101,  101,  101,  153,  114,  164,  173,    0,  114,  153,  184,  114,  195,  195,  205,  114,  209,  220,
        229,  169,  239,  246,  257,  265,  169,  273,  128,  128,  273,  114,  114,  114,  220,  184,  282,  293,  293,  293,
        293,  293,  293,  304,   57,  184,  184,  234,   68,  315,   57,   57,  320,  328,  328,   79,  338,  113,  112,  114,
        173,  349,  360,  371,  380,   79,  391,  402,   79,   79,   79,  413,   79,  315,   79,   79,   79,  114,  360,  114,
        421,    0,   79,  432,  443,  240,  149,    0,  415,  454,  464,  114,  475,  168,  114,  486,  114,  114,  114,  114,
        114,  114,  496,  496,  506,  506,  171,  114,  513,  184,  304,   79,  524,  205,   79,  205,   79,  205,   79,  205,
         79,  205,   79,  205,   79,   79,  535,  114,  512,  546,  546,  101,   68,  114,  114,  114,  114,  114,  114,  114,
        114,   79,   79,  207,  114,  432,  113,  113,  114,  114,  411,  114,   79,  112,  521,  421,  184,  114,  172,  114,
         79,   79,  101,  101,  557,   79,  520,  112,  432,  520,  524,    0,  114,  207,   79,  112,  148,  112,  112,  130,
        101,  114,  114,  114,  114,  114,  207,   79,  520,  560,   79,  520,   79,  520,  101,  101,   79,   79,   79,   79,
        241,  239,  520,  101,  239,  153,  153,   79,  153,  171,  184,  513,   79,  535,  184,   79,   79,   79,   79,   79,
         79,    0,  520,   79,  184,  184,  371,  114,   79,  205,  114,  102,  102,  520,   79,   79,  114,  112,   79,   79,
        112,  421,  172,   79,  172,  571,  114,  571,   79,  112,  114,  114,    0,  114,  443,  113,  520,  110,  169,  114,
        112,  114,  114,  582,  114,  591,  134,  134,    0,  131,  601,   79,  131,  239,  114,  114,   57,  101,  101,  101,
        101,  101,  101,  607,  618,  114,  114,  107,  114,  610,  114,  496,  114,  114,  523,  523,  523,   79,  535,  184,
        172,  114,  172,  114,   79,  114,  114,  114,  327,  327,  114,  114,  114,   79,   79,  101,  626,   79,  114,   79,
        636,   79,   79,  647,  114,  658,  114,  114,  560,  114,  114,  172,  131,  114,  114,  114,  114,  669,  669,  669,
        114,   79,  560,  512,  523,  523,  523,  523,  523,  523,  560,  172,  114,  172,  520,  221,  221,  432,  520,  172,
        148,   79,  520,  671,   79,  535,   79,  170,  679,  520,  114,  114,   79,   79,  688,   79,  114,  153,  114,  114,
        114,  220,  153,  151,  327,  524,   79,  698,  560,  560,   79,  669,  131,  131,  131,  131,  222,  222,  222,  101,
         57,  618,  172,  172,  172,  626,  626,  626,   57,  704,  114,   79,   79,  715,  114,  114,  523,  101,  171,  151,
        220,  205,   79,   79,  172,  520,  114,  413,  114,  413,  327,  114,   79,  512,   57,  172,  520,  669,  669,  669,
        669,   79,   79,   79,  114,  512,  523,  523,  523,  512,   79,  127,   79,  520,  520,  704,  371,   79,  153,  327,
        114,  112,  688,  520,  520,  671,  671,  114,   79,  108,  512,  725,  669,  222,   79,   79,   79,  172,  520,  671,
        618,  172,  172,  172,  609,  114,  672,  106,  172,  413,  114,  432,  413,  413,  520,   79,  434,  512,   79,   79,
        114,  609,   79,    0,  520,   79,  432,  704,  671,  108,   79,    0
      };

   // Boolean matrix column (displacement) ...
      const uint8 lrstar_parser_tables::Bc[138] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    1,    1,    1,    1,    1,    1,    1,    0,    2,
          0,    2,    0,    0,    2,    2,    2,    2,    0,    0,    0,    2,    2,    3,    3,    0,    0,    0,    3,    3,
          3,    3,    3,    0,    3,    3,    1,    3,    4,    3,    0,    4,    4,    4,    4,    4,    4,    4,    4,    4,
          0,    4,    4,    5,    5,    5,    5,    5,    0,    5,    5,    5,    0,    5,    6,    6,    6,    6,    6,    6,
          6,    6,    7,    7,    6,    7,    7,    6,    7,    6,    7,    6,    7,    7,    7,    6,    8,    6,    8,    8,
          8,    8,    8,    8,    8,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
         10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10
      };

   // Boolean matrix filter/mask value ...
      const uint8 lrstar_parser_tables::Bf[138] = 
      {
          1,    2,    4,    8,   16,   32,   64,  128,    1,   32,   32,    2,    4,    8,   16,   32,   64,  128,   32,    1,
         32,    2,   32,   32,    4,    8,   16,   32,   32,   32,   32,   64,  128,    1,    2,   32,   32,   32,    4,    8,
         16,   32,   16,   32,   64,   64,    8,  128,    1,  128,   32,    2,    4,    8,   16,   32,   32,   32,   32,   32,
         32,   64,  128,    1,    2,    4,    8,    8,   32,   16,   32,   64,   32,  128,    1,    2,    4,    8,   16,   32,
         64,  128,    1,    2,   32,    4,    8,   32,   16,   32,   32,   32,   64,  128,   64,   32,    1,   32,    2,    4,
          8,   16,   32,   64,  128,    1,    2,    4,    4,    8,   16,   32,   32,   32,   32,   32,   64,  128,  128,    1,
          2,    4,    8,    8,   16,   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,   64
      };

   // Terminal transition matrix ...
      const int16 lrstar_parser_tables::Tm[1073] = 
      {
          0,    0, -107, -108, -109, -110,  -80,  -66,  -71,  -72,  -73,  -74,  -75,  -76,  -70,  -17,  -20,  -24,  -26,  -28,
        -31,  -51,  -97,  -81,  -16,  -32,  -43,  -44,  -77,  -82,  -83, -102,  -46,  -48,  -67,  -25,  -29,  -52, -111, -100,
       -112, -113,  -18,  -19,  -89,  -92,  -93,  -94, -106, -114,  -15,  -90,  -96,  -98,  -99,  -85,  -91, -101,  -69,  -36,
        -87, -266,  -13, -277,  -27, -235,  -37,  288,  -38, -284,  -53,  -95,  -86, -272,  -84, -285, -103, -272, -104, -271,
       -105,  -68,    0,  -54,  -88,  -55, -265,  -12, -279,  -50,    0,    0,    0, -262,  -63,    0,    0,  256,    0,    0,
        476,    0,  522, -263,  -64, -243,  517,  369,    0, -250,    0, -283,  -57,    0,  513,    0,  358,  394,  453, -252,
        338,    0, -274,  -58,  520,  365,    0, -251, -261,  -61,  452,  347,  467,    0, -264,  -65,  366,  511, -253,    0,
          0,    0,  368,  468,  519,  496, -275,  -42,  464,  512, -254,    0,    0,    0,    0,  281, -340,    0,    0,  448,
        306,    0,  410,  480,    0,    0,  269,  344,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       -201, -273,  -41,    0,   65,   66,   65,   66,   65,   66,  323, -282,  -62,    0,    0,  312,    0, -141,    0,    0,
        331,    0,  430,    0,    0,  364,    0, -349, -280,  -59,    0,    0,  436,    0, -271,  -47,    0,  446,    0,    0,
          0,    0,  367,  332, -206,   70,    0,    0,  350,  505, -248,    0,    0,  191,  -56,  492,  101,  -60,   65,   66,
       -270,    0,   33,    0,  226,   33,  116,   32, -189, -249,  234,    0,  491,    0,  466, -210,   38,  506,    0, -231,
          0,    0, -231, -363,  107,  -40,    0,    0,  101,  -49,    0,    0,  349,  282,    0,    0,    0,  147,  308,    0,
       -203,  214,   32,    0, -329,  270,    0,    0,   38,  434,    0,  101,  -45,   71, -231,    0,    0,    0,    0, -208,
         33,    0,    0,    0,    0,   32,    0, -247,  494, -281,  -35,    0,  482,    0,    0,    0,    0, -231,  279,    0,
        203,  225,  201,  284, -230,  386,    0, -230,  202,  204,  321,    0,  449,  184,    0,   95,   96,   34,   35,    0,
         34,   35,    0,    0,  469,    0,    0,    0,    0,    0,  108,    0,  493,   93,  -34,  459,  527,    0,    0, -230,
          0,    0,  271,    0,    0,    0,    0,  266,    0,  333,    0,    0,   34,   35,  311,    0,  447,  176,    0, -269,
          0,    0, -230,    0,    0,    0,    0,    0,  465,    0,    0,  495,  101,  -39,    0,   34,   35,  177,    0,  458,
       -147,   33,    0,    0,    0,  479,   32,    0,  387,    0,    0,    0,   38,  330,    0,  509,    0,    0, -231,    0,
          0,    0,    0,    0,    0,    0,    0,  490,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  460, -163,
       -305, -306,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,    0,    0, -362, -272,  -33,
        403,  396,   79,  510,    0,    0,    0,  256,   83,    0,    0,    0,  246,    0, -217,    0,    0,    0,  108,  305,
        397,  316,  398, -230, -268,    0,    0,  399,  402,  400,    0,    0,  319,  363,    0,    0,   34,   35,    0,    0,
          0,    0,    0,    0,  457, -136,    0,    0,    0,  401,  450,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        360,    0,    0,    0,  172, -276,  -30,  439,  343,  433,  487,  354,    0,    0,  171,    0,  257,    0,    0,   87,
          0, -216,    0,    0,  108, -126,  304,    0,  315,    0,    0, -267,   74, -125,    0,  478,    0,    0,    0,  230,
        110,  335,   65,   66,    0,    0,    0,    0,    0,    0,    0,  411,  500,    0,    0,    0,  440,  223,    0,    0,
       -122,  346,    0,    0,    0,    0,    0,  353,    0, -124,  174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -244, -245,    0, -123,    0,    0,
          0,    0,    0,    0, -156, -157,    0,  173,    0,   65,   66,   29,  -22,    0,    0,    0,    0,    0,   17,   18,
         33,   10,   19,   20,   21,   32,    0, -246,   22,   23,   24,   38,  441,   25,    0,   26,   27, -231,   13,   28,
          0,   31,    0,   30,    0,    0, -301,    0,    0,    0,    0,    0,    0,   36,    0,    0,    0,    0,    0,   11,
         12,   37,    0,   39,    0,   40,   41,    0,    0,    0,    0,    0,   42,    0,    0,    0,    0,   43,    0,    0,
         44,    0,   45,    0,   46,    0,    0,    0,   47,    0,   48,    0,    0,   49,   50,    0,    0,    0,    0,    0,
          0,    0, -230,   14,    0,    0,    0,    0,    0,    0,    0,   15,    0,    0,   16,   34,   35,  418,   69,  -23,
        294,  252,  273,  451,  356,    0,    0,  165,    0,    0,    0,    0,   86,    0, -229,    0,    0,    0,  325,  295,
          0,  314,    0,    0,  383,   73,    0,    0,  228,    0,    0,   55,   70,   56,   57,   58,   59,   60,   61,   62,
          0,   63,    0,    0,   64,  488,    0,    0,    0,    0,   72,    0,    0,   41,  121,    0,    0,  529,    0,   42,
        313,    0,    0,  170,   43,    0,    0,   44,    0,   45,    0,   46,    0,    0,    0,   47,    0,   48,    0,    0,
          0,    0,    0,    0,    0,    0,    0, -144, -145, -148, -149,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         71,    0,   65,   66,  417,   29,  -14,  278,  251,  250,  391,  355,   17,   18,   33,   10,   19,   20,   21,   32,
        244, -218,   22,   23,   24,   38,  274,   25,   99,   26,   27, -231,   13,   28,    0,   31,    0,   30,    0,  162,
       -301,  345,    0,    0,    0,    0,    0,   36,  309,    0,    0,  359,  421,   11,   12,   37,    0,   51,    0,   40,
          0,  119,    0,    0,  507,  530,    0,  310,    0,  117,  120,    0,  214,  118,    0,    0,    0,    0,    0,    0,
        432,    0,    0, -335,    0,    0,    0,    0,  521,  435, -129,  108,    0,    0, -186, -187, -230,   14,    0,    0,
          0,    0,    0,    0,  329,   15,    0,  169,   16,   34,   35,  245,  416,   29,  -79,  247,  164,  187,  390, -293,
         17,   18,   33,   10,   19,   20,   21,   32,  178,  263,   22,   23,   24,   38,  270,   25,   91,   26,   27, -231,
         13,   28,   52,   31,   53,   30,  129,  161, -301,  153,  158,  155,  157,  154,  156,   36,  130,  151,  437,  357,
        243,   11,   12,   37,   54,   39,  192,   40,   41,  111,  283,  163,  471,  516,   42,  112, -325,  205,  531,   43,
       -327,  114,   44,  372,   45,  193,   46,  375,  431,  376,   47,  260,   48, -337, -341,   49,   50,  280, -133, -369,
       -131,  504, -167, -168, -230,   14, -150,  195,  196,  197,  198, -155,  328,   15, -370,   97,   16,   34,   35,  179,
        297,  298,  299,  300,  301,  302, -255, -256, -257, -258, -259,  303, -260
      };

   // Terminal transition matrix row ...
      const uint16 lrstar_parser_tables::Tr[532] = 
      {
        952,  952,  844,  952,  737,  952,  737,  952,  737,  952,  737,  524,  524,  524,  457,  457,  952,  952,  457,  524,
        737,  524,  737,  737,  737,  952,  352,  308,  952,  952,  524,  844,  391,  145,  391,  391,  952,  457,  952,  263,
        524,  952,  952,  952,  180,  844,  737,  844,  952,  952,  844,  263,  457,  457,  457,  391,  952,  391,  391,  391,
        391,  391,  391,  267,  952,  391,  391,  952,  190,  952,  952,  952,  844,  952,  844,  844,  952,  952,  737,  263,
        844,  630,  737,  524,  524,  524,  290,  952,  457,  352,  308,  213,  391,  952,  145,  263,  180,  263,  267,  213,
        737,  952,  190,  952,  232,  952,  952,  952,  952,  952,  952,  180,  263,  952,  110,  213,  121,  207,  110,  180,
        121,  263,  524,  524,  290,  213,  737,  457,  524,  391,  235,  232,  737,  952,  110,  952,  121,  952,  207,  952,
        235,  952,  127,  952,   92,  102,  133,  145,  952,  844,  844,  457,  190,  127,   92,  102,  133,   85,   60,  190,
        352,   85,   60,  952,  352,  844,  844,  737,   62,   64,  457,  145,   62,  457,  952,  524,  391,  213,  952,  213,
         64,   66,  352,  352,   87,   68,  952,  352,  737,  844,  737,  952,  213,  844,   72,  308,  952,  145,  263,  952,
        308,   66,  207,  263,  121,  207,  737,   74,  737,  952,   76,  524,   78,  457,  145,  263,    0,    1,    2,    3,
        844,  844,  352,  180,  737,  737,  524,    4,  457,  737,  391,  457,    5,   79,  267,    6,    7,    8,    9,   10,
         11,  952,  308,   12,  391,  391,  180,  457,   13,  737,  263,  952,  844,  391,   14,   15,  145,  190,   16,   17,
        213,  457,  844,   18,  352,  457,  213,  457,   19,  110,  213,  145,  952,  263,  232,  524,  145,  844,  524,   87,
        121,   87,   87,  213,  213,  524,  844,  737,  952,  952,   69,   20,  844,  457,  263,  213,  457,  190,  110,  121,
        207,  127,   92,  952,  844,  213,  213,  952,   68,  952,  180,  524,  213,  180,  737,  737,  737,   21,   81,  391,
        308,  145,  391,  145,   22,  457,   62,   62,  952,  844,   62,  145,  145,   23,   24,  102,  263,   25,  145,   26,
        457,   27,   28,  352,  213,  391,  180,   87,  952,  213,  213,  145,  524,  263,  213,  213,  213,  952,  844,  737,
        180,   29,  952,  844,  524,  524,  524,  457,  457,  457,  952,  180,  457,  267,  180,  952,  844,  524,  267,  190,
        844,   30,  190,  952,   31,   83,   32,  952,  524,  630,  524,  524,   33,   34,  207,   35,  352,  352,  352,  457,
        457,   72,  308,  457,  737,  737,   36,   82,  952,  952,   37,  457,  457,  352,  308,  391,  952,  952,  952,  133,
        352,  952,  630,  290,  213,  232,  110,  121,  308,  952,   68,   38,   39,   74,  180,   74,  737,   85,  524,  352,
         76,  952,   40,   41,  207,  290,  145,  213,  457,  213,  524,  524,   42,  737,  391,  235,  213,  352,  308,  391,
        145,   43,   44,   45,  213,  524,  352,  352,  352,  457,   46,  952,   47,  207,  235,  844,  180,   48,  391,  457,
        457,  127,  207,  127,   92,  844,  844,  213,   49,  952,  352,   70,  263,  952,   50,   51,   52,  127,  102,  737,
        952,   92,  102,  133,  952,   74,  952,  844,   85,   78,  213,  844,  213,  213,  952,   53,  737,  308,   54,   55,
        213,  844,   56,  952,  952,   57,  844,  737,  524,  844,   58,  952
      };

   // Terminal transition matrix column ...
      const uint8 lrstar_parser_tables::Tc[138] = 
      {
         66,   66,    0,   27,    1,   11,   28,   35,    2,   49,   50,   59,    3,   93,    4,    5,  100,    6,  101,  103,
        104,    7,    8,    9,   66,   79,   10,   11,   12,   13,   14,   15,   16,   17,  107,   18,   19,   20,   21,   22,
         23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
         43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
         63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
         83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
        103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120
      };

   // Nonterminal transition matrix ...
      const int16 lrstar_parser_tables::Nm[981] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -355,    0, -357,    0,    0,    0,
          0,  351, -181,    0,    0,    0,    0,    0,    0,    0,    0, -381,    0,    0,  262,  264, -351,  348,  408,  409,
        413,  414,  415, -350,  352,  362,  370,  277,  499,  285, -350,  286,  287, -350,  277, -350, -240,  523, -238, -174,
       -173,  486,  485, -223, -225, -242,  181,  180, -177, -350,  497, -365, -350, -178,    0,  275,    0,    0, -364, -232,
       -174, -173, -224, -225,    0,    0, -228,    0,    0,  336,    0,    0,    0,  261, -219, -225,  186,  499, -232,  186,
          0,  514,    0,  371, -361, -228,  379,  276,    0,    0, -232,  318, -219, -225,    0,  524,  481, -228,  186, -379,
        385, -219, -225,    0,    0,  185, -180, -380, -232,    0,  405, -219, -225,    0, -171, -228,    0, -232,    0,  483,
       -378,    0,    0,    0, -228,    0,    0, -232,  498,  231, -219, -225,  239, -360, -228,  232,    0,  486,  485, -222,
       -225,  233, -219, -225,  240,    0, -232, -237, -385,    0,  175, -219, -225, -228,    0, -232,  429,  419, -232,  190,
       -219, -225, -228,  236,    0, -228,    0, -232, -176, -343,    0, -227,    0,    0, -228,    0, -232,    0, -191, -192,
          0,    0, -193, -228,    0,    0, -232,   82,  218,  292, -200, -158,    0, -228,    0,    0,    0,  484,    0,    0,
          0,    0,    0,    0, -202,    0,    0, -202,  159, -358,  212, -354,  207,    0, -356,  210, -202,  188, -384,    0,
        150,    0,    0,    0,    0,    0,    0,    0,    0,  190, -219, -225,    0,  235,    0, -202,    0,    0,    0,    0,
          0, -226,    0,  209, -179,    0, -232, -236, -191, -192,  454, -170, -193, -228,    0,    0, -232,   80,  199,  219,
        339,  442,    0, -228,    0,    0,    0,    0,    0,    0,    0,    0,  238,    0,    0,    0,    0,    0,  148, -222,
       -225,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  213,  208,  211, -314, -232,  389, -159, -160,    0,
          0,    0, -228, -299,    0, -202,    0,  189,    0,  132, -219, -225, -299,    0,    0, -315,    0,    0,  132, -219,
       -225,    0,    0,  412,    0,    0, -232,  125,  326,  327,  395,    0,    0, -228,    0, -232,  324, -342,    0,    0,
          0,    0, -228,    0, -202,    0, -299,  134,    0,    0,  135,    0,  132, -219, -225,    0,  138, -299,    0,  139,
        149,    0,    0,  132, -219, -225,    0,    0,    0, -232, -205,  380,    0,    0,    0, -202, -228,  378,    0,    0,
       -232, -205,  406,    0, -202, -307,    0, -228,    0,  334,  140,  377,    0,  141, -307,    0,    0,    0,    0,    0,
        337,  142,    0,    0,  143,    0,    0,    0,  237,    0,    0,    0,    0,    0,  128, -219, -225,    0, -202,    0,
          0,    0,    0,    0,    0, -297,    0,    0, -307, -202, -314, -232,  103, -159, -160,  392, -297,    0, -228, -307,
        144,    0,    0,    0,    0,    0,  146, -219, -225,  145,    0, -315,    0,  160,    0,    0,    0,    0,    0,  220,
          0,    0, -314, -232,  126, -159, -160, -209,    0,    0, -228,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       -202, -299,    0, -315,    0,    0,    0,  132, -219, -225,    0,  168,    0, -299,    0,    0,    0,    0,    0,  132,
       -219, -225,    0, -314, -232,  229, -159, -160,    0,    0,    0, -228, -202,    0,    0, -314, -232,  124,  290, -160,
        393,    0,  127, -228, -315,  136,    0,    0,  137,    0,    0,    0,  361,    0,    0,    0, -315,  131,    0,    0,
        133,    0,    0,  102,  291,    0,    0,    0,   90,  100, -219, -225,  320, -202,    0,    0,    0,    0,    0,    0,
        428,  248,    0, -307,    0, -202, -232,   78,  182,  183, -395,   98, -390, -228, -152, -307,    0, -197,    0,    0,
          0,    0,    0,    0,    0,    2,    8,    9,   67,   -6,   -8,    0,    0,    0,    0,  -10,    0,    0,    0,  518,
          0,    4, -219, -225,   77,    0,    0,    0,    0,    0,    0,    0,  455, -175, -367, -202,    0, -314,    5,    3,
       -159, -160, -396,  443,    0, -228,    0,    0,    0,    0,    0,    0,  242,    0,    0,    0,    0,    0, -315,    0,
          6,    0,    0,    0,    0,    0,  200,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    7,    0,   -7,   -9,   -1, -387,    0,   81,  -11,    0,    0,    0, -394,
         89,    4, -219, -225,  268,    0,    0,    0,    0,    0,    0,    0,  420, -198,  424,  427,  503, -314,    5,    3,
        166,  167,  258,   84, -215, -228, -154,  293,    0, -196,    0,    0, -339,    0,    0,    0,    0,    0, -315,    0,
          6,    0, -347,    0,    0,    0,  168,    0,    0,    0,    0,  463,    0,    0,    0,    0,  123,    0,    0,    0,
          0,    0,    0,    0, -164,    0, -366,    7,    0,    0,    0,    0,  382,    0,    0,    0,    0, -334, -375,    2,
          8,    9, -383,   -6,   -8, -311, -386, -302, -303,  -10, -295, -392,  525, -393,   88,    4, -219, -225,  259,    0,
          0,    0,    0,    0,    0,    0,  407,   92,  423,  426,  502,    0,    5,    3,  115,  215,  241,   76, -214, -228,
       -153,  289,    0, -196,  217, -353,  475,    0,    0,    0,    0,  267,    0,  224,    6,  508, -346,    0,  -78,  317,
          0,    0,    0,    0,    0,  462, -139,    0,    0,    0,  122, -119,    0,    0, -313,    0,  222,    0,  384,    0,
       -366,    7, -371, -372,    0,   -2,  382,    0, -377,    0, -373, -334, -185, -374,  152,    0,    0,  526,  242, -359,
          2,    8,    9, -383,   -6,   -8,  472, -308, -302, -303,  -10, -295, -391, -321,  249,   85,    4, -219, -225,  255,
       -287, -289,  194, -291,  109, -319, -398,  296, -194,  422,  425,  501, -314,    5,    3, -159, -160, -233,   75, -389,
       -228, -151,  216,   94, -196,  206, -352, -338,  388,  438,  477,  -21,  265, -315,  221,    6,  322, -346,   68, -309,
        227,  105,  341,  342,  489,  515,  461,  113,  307,  470,  106,  272, -115,  473,  474, -313, -120,  222, -127,  381,
        374, -366,    7, -317, -345,  456,   -1,  382,  104,    1,  340,  373, -333, -184, -331,  444,  253,  445, -323,  254,
        528
      };

   // Nonterminal transition matrix row ...
      const uint16 lrstar_parser_tables::Nr[532] = 
      {
        879,  778,  684,  879,  879,  552,  879,  879,  684,  684,  879,  879,  879,  778,  552,  242,  879,  604,  172,  684,
        879,  879,  778,  684,  552,  879,  778,  879,  879,  879,  552,  879,  552,  879,  242,  172,  552,  417,  879,  879,
        879,  879,  879,  879,  778,  879,  879,  778,  879,  778,  684,  879,  502,  312,  449,  417,  879,  502,  312,  490,
        321,  355,  366,  449,  242,  281,  141,  879,  778,  879,  172,  417,  879,  879,  879,  879,  879,  879,  879,  684,
        879,  778,  879,  879,  879,  879,  153,  879,  879,  879,  879,   33,  879,  879,  879,  879,  879,  552,  879,   38,
        879,  879,  879,  879,  232,  879,  879,  879,  879,  879,  879,  242,  604,  879,  879,  229,  778,  879,  778,  172,
        242,  417,  879,  778,  879,  879,  879,  490,  879,  132,  144,  879,  879,  242,  879,  172,  879,  417,  879,  281,
        879,  141,  879,  153,  879,  879,  879,  778,  879,  879,  879,  879,  684,  879,  879,  879,  879,  879,  879,  552,
        684,  879,  879,  879,  552,  879,  879,  879,  879,  879,  879,  684,  879,  778,  879,  879,   76,    0,  879,    1,
        879,  879,  879,  778,  684,  879,  879,  879,  879,  879,  879,  879,   20,  879,  879,  879,  879,  879,  879,  879,
        879,   15,  778,  502,  172,  684,  879,  879,  879,  879,  879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
        879,  879,  879,  879,  879,  879,  879,  879,  879,  778,   94,  879,  879,  879,  552,  879,  879,  879,  879,  879,
        879,  879,  879,  879,   45,   64,  879,  321,  879,  879,  312,  879,  879,  879,  879,  879,  552,  879,  879,  879,
        879,  879,  879,  879,  879,  355,    9,  366,  879,  879,    2,  242,  879,  449,  162,  879,  879,  879,  879,  879,
        879,  778,  684,    3,   10,  879,  879,  879,  879,  879,  879,  879,  879,  879,  490,   11,  879,  879,  879,  879,
        879,  879,  879,  879,  879,   12,   16,  879,  879,  879,  321,  684,   19,  355,  879,  778,  684,  879,  879,  103,
        879,  604,  879,  172,  879,  281,  778,  684,  879,  879,  552,  417,  502,  879,  879,  879,  879,  879,  312,  879,
        778,  879,  879,  242,   13,  113,  366,  552,  778,    4,    5,  879,  879,  281,    6,    7,    8,  879,  879,  879,
        141,  879,  684,  879,  879,  778,  684,  879,  778,  684,  552,  879,  141,  879,  879,  879,  879,  879,  879,  879,
        879,  879,  879,  879,  879,  879,  879,  879,  879,  879,  242,  604,  879,  879,  879,  879,  242,  879,  604,  153,
         33,   38,  879,  879,  879,  879,  879,  879,  242,  604,  879,  879,  879,  879,  879,  879,  879,  778,  684,  879,
        879,  778,  879,  879,  879,  879,  879,  879,  879,  879,  778,  879,  879,  879,  153,  778,  552,  879,  879,  879,
        232,   33,  879,  879,  879,  879,  449,   47,  229,  124,  879,  172,  879,  879,  879,  879,  879,  879,  879,  879,
        879,  879,  879,  879,   63,  879,  879,  778,  684,  879,  879,  879,  879,  879,  879,  879,  778,  879,  879,  879,
        132,  879,  778,  879,  879,  879,  778,   21,  879,  879,  879,  879,  879,  552,  879,  879,  879,  879,  879,  879,
        778,  879,  879,  879,  879,  684,  879,  879,  879,   31,   35,  778,   26,   28,  879,  879,  879,  879,  879,  879,
         14,  879,  879,  879,  879,  879,  684,  879,  879,  879,  879,  879
      };

   // Nonterminal transition matrix column ...
      const uint8 lrstar_parser_tables::Nc[399] = 
      {
         90,   90,   90,   87,   87,   87,    1,    1,    2,    2,    3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
          5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
          5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
          5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
          5,    5,    5,    5,    5,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    7,    7,   90,   11,
         11,   55,   58,   58,   58,   58,   58,   58,   87,   85,   93,   93,   92,   95,    1,    2,    2,    3,    5,    5,
          6,    0,    7,   90,   90,   90,   11,   14,   99,   99,   23,   23,   23,   23,   23,   25,   25,   25,   26,   33,
         54,   55,   58,   58,   76,   80,   82,   82,   82,   83,   84,   85,   87,   93,   93,   92,   95,   95,   95,   95,
          0,    0,    1,    2,    3,    3,    4,    4,    5,    6,    6,    6,    6,    6,   60,    7,    8,    8,    8,   72,
          9,   10,   11,   12,   90,   90,   90,   96,   13,   13,   13,   14,   15,   15,   15,   15,   16,   16,   16,   17,
         17,   17,   99,   99,   99,   18,   18,   18,   19,   19,   19,   19,   19,   19,   20,  100,   21,   21,   22,   23,
         24,   25,   26,   26,   27,   27,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
         28,   29,   29,   29,   29,   29,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
         43,   44,   45,   46,   47,   48,   49,   49,   50,   50,   51,   51,   52,   52,   53,   53,   54,   54,   55,   55,
         56,   56,   57,   57,   58,   58,   58,   58,   59,   59,   60,   60,   61,   61,   62,   62,   63,   63,   64,   64,
         65,   65,   66,   66,   67,   67,   68,   68,   69,   69,   70,   70,   71,   71,   72,   72,   73,   73,   74,   74,
         75,   75,   76,   76,   77,   77,   78,   78,   79,   79,   80,   80,   81,   81,   82,   82,   83,   83,   84,   84,
         85,   85,   86,   86,   87,   87,   88,   88,   89,   89,   89,   90,   90,   90,   90,   90,   91,   91,   92,   92,
         93,   93,   94,   94,   95,   95,   96,   96,   97,   97,   97,   98,   98,   99,   99,  100,  100,  101,  101
      };

   // Reduction matrix ...
      const uint16 lrstar_parser_tables::Rm[28] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,  232,    0,  300,  232,    0,    0,    0,  272,  271,  271,  271,  271,
          0,  233,  395,    0,    0,    0,    0,  233
      };

   // Reduction matrix row ...
      const int16 lrstar_parser_tables::Rr[532] = 
      {
        300,  300,    3,    0,    0,   -4,    0,    0,    4,    5,    0,    0,    0,    0,    0,    0,  292,  300,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  -12,    0,    0,    0,    0,    0,    0,    0,    0,  368,  332,
          0,    0,    0,  326,    0,    0,    0,    0,  336,  336,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,  300,    0,    0,    0,  310,  282,  300,  300,  332,    0,    0,    0,    0,    0,    0,    0,
          0,  300,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,  271,    0,    0,    0,    0,    0,  273,  130,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  312,    0,    0,    0,    0,    0,  298,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,  220,  221,    0,  195,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,  159,  160,  388,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,  294,  294,    0,    0,  128,    0,    0,  188,  190,  271,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,  137,    0,    0,  140,    0,  134,    0,  328,    0,    0,    0,    0,
          0,    0,  121,  348,    0,    0,    0,    0,    0,  312,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,  -20,  234,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  199,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,  204,    0,  204,    0,    0,    0,    0,  376,    0,    0,  316,  161,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,  271,    0,    0,    0,    0,    0,    0,    0,  135,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,  286,    0,  212,  213,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        169,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  132,    0,    0,    0,  118,    0,
          0,    0,  165,  166,    0,    0,    0,    0,  288,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,  162,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  324,  324,  324,    0,
        138,  136,    0,    0,    0,    0,    0,    0,  135,  330,    0,    0,    0,    0,    0,    0,    0,    0,  290,    0,
          0,    0,    0,    0,    0,  207,    0,    0,    0,    0,    0,    0,    0,    0,  320,    0,  146,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  116,  117,  344,    0,    0,    0,    0,
          0,    0,    0,  172,  183,  382,  382,    0,    0,  322,    0,    0,    0,  324,    0,    0,    0,    0,  142,  143,
        326,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  182,    0,    0,    0,    0,    0,
          0,    0,    0,  397,  239,    0,  211,    0,  241,    0,    0,    0
      };

   // Reduction matrix column ...
      const uint8 lrstar_parser_tables::Rc[138] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    2,
          0,    0,    0,    0,    0,    0,    0,    3,    0,    3,    0,    4,    0,    5,    4,    4,    4,    4,    4,    4,
          0,    4,    6,    0,    4,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    7,    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // Production lengths (minus one) ...
      const int8 lrstar_parser_tables::PL[399] = 
      {
          1,    0,    1,    0,    0,    0,    0,    1,    0,    1,    0,    1,    3,    3,    2,    8,    5,    4,    7,    7,
          4,    1,    2,    2,    4,    6,    4,    3,    4,    6,    2,    4,    5,    2,    2,    2,   10,    3,    3,    2,
          2,    2,    2,    5,    5,    3,    6,    3,    6,    2,    3,    4,    6,    3,    5,    6,    3,    3,    3,    3,
          3,    3,    2,    3,    3,    3,    4,    6,    4,   10,    4,    4,    4,    4,    4,    4,    4,    5,    2,    1,
          4,    5,    5,    5,    3,    9,    8,   12,    6,    7,    8,    9,    7,    7,    7,    4,    8,    4,    8,    8,
          6,    9,    5,    3,    3,    3,    7,    3,    3,    3,    3,    6,    6,    6,    7,    1,    0,    0,    0,    1,
          7,    0,    0,    0,    0,    0,    0,    1,    0,    2,    0,    1,    0,    2,    0,    1,    3,    0,    1,    4,
          0,    3,    0,    0,    1,    1,    2,    1,    1,    1,    0,    2,    3,    2,    2,    1,    0,    0,    3,    0,
          0,    0,    2,    2,    2,    0,    0,    1,    1,    4,    1,    2,    0,    0,    0,    1,    1,    1,    1,    2,
          2,    3,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,
          1,    0,    0,    2,   -1,    0,    3,    0,    0,    1,    0,    0,    1,    1,    2,    2,    2,    3,    3,    0,
          2,    2,    0,    2,    2,    0,    1,    1,    0,    2,    0,    0,    0,    1,    1,    0,    1,    2,    3,    0,
          2,    1,    0,    0,    0,    0,    3,    3,    3,    3,    5,    3,    5,    3,    5,    0,    0,    0,    0,    0,
          1,    2,    2,    2,    2,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,   -1,    1,   -1,    0,   -1,    0,   -1,    0,   -1,    0,   -1,    0,    0,    0,
         -1,    0,    0,    0,   -1,    0,    0,    0,    0,    0,   -1,    0,   -1,    0,    0,    0,   -1,    0,   -1,    0,
         -1,    0,   -1,    0,   -1,    0,   -1,    0,   -1,    2,   -1,    0,   -1,    0,    0,    0,   -1,    0,    0,    2,
          0,    2,    0,    2,   -1,    0,    0,    2,   -1,    2,    0,    2,    0,    2,    0,    2,    0,    2,    0,    2,
          0,    2,    0,    2,    0,    2,    0,    2,   -1,    0,    0,    0,    0,    0,    0,    0,   -1,    1,    0,    2,
          0,    2,   -1,    0,    0,    2,    0,    1,   -1,    0,    2,    0,    2,    0,    1,    0,    2,   -1,    1
      };

   // Terminal action number ...
      const int8 lrstar_parser_tables::tact_numb[138] = 
      {
          0,   -1,    1,    1,    1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Terminal action function pointers ...
      int (*lrstar_parser_tables::tact_func[2])(void *parser, int &t) =
      {
         lrstar_term_actions::error,
         lrstar_term_actions::lookup
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "SQL_ParserTables_instantiate.h"
