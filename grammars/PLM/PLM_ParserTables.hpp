
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    PLM_ParserTables.hpp (generated by LRSTAR 24.0.017)

      #include "lrstar_basic_defs.h"
      #include "lrstar_parser_tables.h"
      #include "PLM_ParserTables.h"
      #include "PLM_Actions.h"

      static int n_terms      =   70; // Number of terminals.
      static int n_heads      =  152; // Number of nonterminals.
      static int n_prods      =  255; // Number of productions.
      static int n_states     =  148; // Number of states.
      static int accept_state =  147; // Accept state.
      static int n_termactns  =    1; // Number of terminal actions.
      static int n_nodenames  =    0; // Number of node names.
      static int n_nodeactns  =    0; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      const char* lrstar_parser_tables::term_symb[70] = 
      {
         "<error>",
         "<eof>",
         "\'AND\'",
         "\'AT\'",
         "\'ATSIGN\'",
         "\'BASED\'",
         "\'BY\'",
         "\'BYTE\'",
         "\'CALL\'",
         "\'CASE\'",
         "\'CAUSEINTERRUPT\'",
         "\'COMMA\'",
         "\'DATA\'",
         "\'DECLARE\'",
         "\'DISABLE\'",
         "\'DO\'",
         "\'DOT\'",
         "\'DWORD\'",
         "\'ELSE\'",
         "\'ENABLE\'",
         "\'END\'",
         "\'ENLIST\'",
         "\'EQUALS\'",
         "\'EXLIST\'",
         "\'EXTERNAL\'",
         "\'GO\'",
         "\'GOTO\'",
         "\'GT\'",
         "\'GTE\'",
         "\'HALT\'",
         "\'IDENT\'",
         "\'IF\'",
         "\'IMPLDIM\'",
         "\'INITIAL\'",
         "\'INTEGER\'",
         "\'INTERRUPT\'",
         "\'LABEL_IDENT\'",
         "\'LABEL\'",
         "\'LITERALLY\'",
         "\'LT\'",
         "\'LTE\'",
         "\'MINUS\'",
         "\'MOD\'",
         "\'NE\'",
         "\'NOT\'",
         "\'NUMBER\'",
         "\'OR\'",
         "\'PASSLINE\'",
         "\'IGNORE\'",
         "\'PLUS\'",
         "\'POINTER\'",
         "\'PROCEDURE\'",
         "\'PUBLIC\'",
         "\'REAL\'",
         "\'REENTRANT\'",
         "\'RETURN\'",
         "\'SASSGN\'",
         "\'SELECTOR\'",
         "\'SEMI\'",
         "\'SMINUS\'",
         "\'SPLUS\'",
         "\'SSLASH\'",
         "\'SSTAR\'",
         "\'STRING\'",
         "\'STRUCTURE\'",
         "\'THEN\'",
         "\'TO\'",
         "\'WHILE\'",
         "\'WORD\'",
         "\'XOR\'"
      };

   // Nonterminal symbols of the grammar ...
      const char *lrstar_parser_tables::head_symb[152] = 
      {
         "Goal",
         "Compiland",
         "Compiland_component",
         "Var_elem",
         "Var_name_spec",
         "Base_spec",
         "Var_attr_list_opt",
         "Var_attr",
         "Locator",
         "Const_attr",
         "Array_spec",
         "Array_spec_opt",
         "Expl_dimension",
         "Var_type",
         "Basic_type",
         "Label_elem",
         "Literal_elem",
         "Fact_var_elem",
         "Expl_dimension_opt",
         "Fact_label_elem",
         "Ident_list",
         "Var_ref_list",
         "Structure_type",
         "Smel_list",
         "Smel",
         "Mname",
         "Var_name_spec_list",
         "Initializer",
         "Init_list",
         "Init",
         "Decl_list_opt",
         "Declaration",
         "Decl_stmt",
         "Decl_elem_list",
         "Decl_elem",
         "Unit_list_opt",
         "Unit",
         "Unit_component",
         "Ifthen_clse",
         "Ifthenelse_clse",
         "Other_do",
         "DCES",
         "DWES",
         "DITER",
         "DS",
         "Ending",
         "End_stmt",
         "By_part_opt",
         "Simple_var",
         "Call_stmt",
         "Goto_stmt",
         "Null_stmt",
         "Return_stmt",
         "Dep_stmt",
         "Primary",
         "Subexpression",
         "Expression_list",
         "Constant",
         "Var_ref",
         "Subscript_opt",
         "Member_spec_opt",
         "Loc_ref",
         "Const_list",
         "Const_list_more_opt",
         "Rel_op",
         "Expression",
         "Embed_assgn",
         "Logic_exp",
         "Or_op",
         "Logic_fact",
         "And_op",
         "Logic_sec",
         "Logic_pri",
         "Math_exp",
         "Term",
         "Factor",
         "Add_op",
         "Mul_op",
         "Gigo",
         "Proc_def",
         "Proc_hdr",
         "Basic_type_opt",
         "Parm_list_opt",
         "Proc_attr_list_opt",
         "Assgn_stmt",
         "And",
         "At",
         "Atsign",
         "Based",
         "By",
         "Byte",
         "Call",
         "Case",
         "Causeinterrupt",
         "Comma",
         "Data",
         "Declare",
         "Disable",
         "Do",
         "Dot",
         "Dword",
         "Else",
         "Enable",
         "End",
         "Enlist",
         "Equals",
         "Exlist",
         "External",
         "Go",
         "Goto",
         "Gt",
         "Gte",
         "Halt",
         "Ident",
         "If",
         "Impldim",
         "Initial",
         "Integer",
         "Interrupt",
         "Label_ident",
         "Label",
         "Literally",
         "Lt",
         "Lte",
         "Minus",
         "Mod",
         "Ne",
         "Not",
         "Number",
         "Or",
         "Passline",
         "Plus",
         "Pointer",
         "Procedure",
         "Public",
         "Real",
         "Reentrant",
         "Return",
         "Sassgn",
         "Selector",
         "Semi",
         "Sminus",
         "Splus",
         "Sslash",
         "Sstar",
         "String",
         "Structure",
         "Then",
         "To",
         "While",
         "Word",
         "Xor"
      };

   // Terninal action names found in the grammar ...
      const char *lrstar_parser_tables::tact_name[1] = 
      {
         "error"
      };

   // Head symbol numbers for the productions ...
      const uint8 lrstar_parser_tables::head_numb[255] = 
      {
          0,    1,    2,    2,    3,    4,    4,    5,    5,    6,    6,    7,    7,    7,    7,    7,    8,    9,   10,   10,
         11,   11,   12,   12,   13,   13,   13,   14,   14,   14,   14,   14,   14,   14,   15,   15,   15,   16,   17,   18,
         18,   19,   19,   19,   20,   20,   21,   21,   22,   23,   23,   24,   25,   25,   26,   26,   27,   27,   28,   28,
         29,   29,   30,   30,   30,   31,   31,   32,   33,   33,   34,   34,   34,   34,   34,   35,   35,   36,   36,   36,
         37,   37,   37,   37,   37,   37,   37,   37,   37,   37,   38,   39,   40,   40,   40,   40,   41,   42,   43,   44,
         45,   45,   46,   46,   47,   47,   48,   48,   49,   50,   50,   51,   52,   52,   53,   53,   53,   53,   54,   54,
         54,   54,   55,   56,   56,   57,   57,   58,   59,   59,   60,   60,   61,   61,   61,   61,   62,   63,   63,   64,
         64,   64,   64,   64,   64,   65,   65,   66,   67,   67,   68,   68,   69,   69,   70,   71,   71,   72,   72,   73,
         73,   74,   74,   75,   75,   75,   76,   76,   76,   76,   77,   77,   77,   78,   78,   79,   80,   81,   81,   82,
         82,   83,   83,   83,   83,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
         98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
        118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  130,  131,  132,  133,  134,  135,  136,
        137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151
      };

   // First tail symbol index into the tail list ...
      const uint16 lrstar_parser_tables::f_tail[256] = 
      {
          0,    2,    3,    4,    6,   10,   11,   14,   15,   18,   18,   20,   21,   22,   23,   24,   25,   29,   30,   31,
         32,   32,   33,   36,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   51,   53,   55,   58,   64,
         64,   65,   69,   71,   73,   74,   77,   78,   81,   85,   86,   89,   92,   93,   96,   97,  100,  104,  108,  109,
        112,  113,  114,  114,  116,  118,  119,  120,  123,  124,  127,  128,  129,  130,  131,  132,  132,  134,  135,  137,
        139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  155,  159,  162,  165,  168,  171,  175,  179,  187,
        189,  190,  192,  194,  197,  197,  199,  200,  203,  207,  211,  214,  215,  217,  220,  222,  224,  226,  228,  229,
        230,  231,  232,  235,  236,  239,  240,  241,  244,  244,  245,  245,  248,  250,  252,  254,  256,  260,  260,  263,
        264,  265,  266,  267,  268,  269,  270,  271,  274,  275,  278,  279,  280,  281,  284,  285,  287,  288,  289,  292,
        293,  296,  297,  300,  301,  303,  305,  306,  307,  308,  309,  310,  311,  312,  313,  315,  319,  325,  325,  326,
        326,  329,  329,  331,  334,  336,  338,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
        355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
        375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
        395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,  410
      };

   // Tail symbol numbers ...
      const int16 lrstar_parser_tables::tail[410] = 
      {
         -1,    1,   -2,  -36,   -2,  -36,   -4,  -11,  -13,   -6, -113, -113,  -88,   -5, -113, -113,  -99, -113,   -6,   -7,
       -134,   -8,  -27, -107,   -9,  -86, -104,  -65, -106,  -95,  -12, -115,  -10, -104, -128, -106, -104, -113, -106,  -14,
       -113,  -22, -117, -135, -132, -139,  -90, -150, -100, -113, -120,  -15, -134,  -15, -107, -113, -121, -145, -104,  -26,
       -106,  -18,  -13,   -6,  -12, -104,  -20, -106, -120,  -19, -134,  -19, -107, -113,  -20,  -94, -113,  -58,  -21,  -94,
        -58, -146, -104,  -23, -106,  -24,  -23,  -94,  -24,  -25,  -18,  -14, -113, -104,  -20, -106,   -4,  -26,  -94,   -4,
       -116, -104,  -28, -106,  -95, -104,  -28, -106,  -29,  -28,  -94,  -29,  -65, -145,  -30,  -31,  -30,  -78,  -32,  -79,
        -96,  -33, -140,  -34,  -33,  -94,  -34,  -17,  -19,   -3,  -16,  -15,  -35,  -36,  -37, -119,  -37,  -37,  -78,  -39,
        -38,  -84,  -49,  -50,  -51,  -52,  -53,  -40,  -31, -114,  -65, -147,  -36, -101,  -36, -114,  -65, -147,  -36,  -41,
        -35,  -45,  -42,  -35,  -45,  -43,  -35,  -45,  -44,  -35,  -45,  -98,  -92,  -65, -140,  -98, -149,  -65, -140,  -98,
        -48, -105,  -65, -148,  -65,  -47, -140,  -98, -140,  -46, -119,  -45, -103, -140, -103, -113, -140,  -89,  -65, -113,
       -113,  -99, -113,  -91, -113,  -59, -140, -108, -148, -113, -140, -109, -113, -140, -140, -137, -140, -137,  -65, -140,
        -97, -140, -102, -140, -112, -140,  -93, -140,  -57,  -58,  -61,  -55, -104,  -56, -106,  -65,  -56,  -94,  -65, -128,
       -145, -113,  -59,  -60,  -55,  -99, -113,  -59,  -87,  -62,  -99,  -62,  -87,  -58,  -99,  -58, -104,  -57,  -63, -106,
        -63,  -94,  -57, -110, -111, -122, -123, -126, -105,  -67,  -66,  -58, -138,  -67,  -69,  -67,  -68,  -69, -129, -151,
        -71,  -69,  -70,  -71,  -85, -127,  -72,  -72,  -73,  -73,  -64,  -73,  -74,  -73,  -76,  -74,  -75,  -74,  -77,  -75,
        -54, -142,  -54, -141,  -54, -131, -124, -142, -141, -144, -143, -125, -130,  -78, -130,  -80,  -30,  -35,  -45, -119,
       -133,  -82,  -81,  -83, -140,  -14, -104,  -20, -106,  -83, -107,  -83, -118, -128,  -83, -134,  -83, -136,  -21, -105,
        -65, -140,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
         20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
         40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
         60,   61,   62,   63,   64,   65,   66,   67,   68,   69
      };

   // Arguments for token actions ...
      const int8 lrstar_parser_tables::arga[70] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Boolean matrix ...
      const uint8 lrstar_parser_tables::Bm[190] = 
      {
          0,    0,    0,    0,    0,    9,  144,    0,    4,    2,    0,    0,    0,    0,  128,    0,   16,  144,   16,   48,
         24,    0,    4,    1,    0,    0,  128,    0,    0,    0,   16,    0,    0,   16,  144,   16,   48,   28,    0,    0,
          0,    0,    4,    0,    2,   16,    0,    4,    0,  128,   16,    0,    0,    9,  144,    0,    5,    0,    0,    0,
          0,   64,    0,    4,    0,    0,    0,    0,   16,  144,   16,   32,   24,    0,    0,    9,    4,    8,    0,    0,
          0,    8,    0,    0,    0,    0,    2,   16,  144,   16,   32,   16,    0,   16,    0,    0,    0,   73,  144,    0,
          4,    0,    0,    1,    0,    0,    4,    0,    0,    4,    0,  128,   32,    0,    0,    3,    0,    8,  128,  128,
          0,    0,    0,    0,    1,    0,    0,    0,   32,   16,    0,   73,  144,    0,    5,    0,    0,   16,    0,    4,
         32,    0,    0,    0,    0,  128,    0,   16,    0,   32,    0,    0,   16,   32,    0,   32,    0,    0,    0,    4,
          8,    0,   64,  128,    0,    1,    0,    0,    2,    0,    0,   64,  128,    0,    0,    8,    0,    4,    0,    0,
         68,    0,    4,   64,    0,    0,    0,    0,   32,    0
      };

   // Boolean matrix row (for state)...
      const uint8 lrstar_parser_tables::Br[148] = 
      {
          4,    9,    4,   11,   16,   21,   25,   28,   10,   28,   33,   38,   38,   38,   38,    0,   43,    0,    0,    0,
         48,    0,   52,   11,   57,   58,   63,   68,   73,   78,   82,   48,   48,   16,   87,   87,   28,   16,   92,   25,
         28,   38,   38,   96,   16,   16,  101,   92,   96,   96,   96,  105,   28,  104,  110,  112,  104,  116,  120,   25,
          4,   16,   16,   68,   68,   68,   16,  125,    7,   38,   28,   38,   38,  130,  135,   38,   38,   16,   28,   48,
          7,  140,    7,  145,  150,   28,   64,   11,   96,  119,   28,  154,   63,  156,   78,   58,    0,   16,   25,  161,
         38,   10,   25,   28,  121,   28,    0,   25,  166,  166,   92,    0,    7,    4,    7,  170,   16,  145,  140,  175,
         48,   28,  178,  125,  183,    0,   25,   25,   25,    7,   25,   28,  185,   38,   16,  175,   16,   16,   16,   48,
        119,    7,  166,    7,    0,    7,   16,    0
      };

   // Boolean matrix column (displacement) ...
      const uint8 lrstar_parser_tables::Bc[70] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    0,    1,    1,    1,    1,    0,    1,    1,
          1,    1,    2,    2,    2,    1,    1,    2,    2,    1,    2,    1,    2,    0,    0,    2,    2,    3,    3,    2,
          2,    3,    3,    2,    3,    3,    3,    3,    3,    3,    0,    4,    2,    0,    2,    1,    4,    0,    4,    4,
          4,    3,    3,    4,    4,    4,    4,    1,    0,    3
      };

   // Boolean matrix filter/mask value ...
      const uint8 lrstar_parser_tables::Bf[70] = 
      {
          1,    2,    4,    8,   16,   32,   64,  128,    1,    2,    1,    4,    8,    8,    1,    1,   16,  128,   32,    1,
         64,  128,    1,    2,    4,    1,    1,    8,    8,    1,   16,    1,   32,    8,  128,   64,  128,    1,    2,    8,
          8,    4,    8,    8,   16,   32,   64,  128,  128,    4,  128,    1,    4,  128,   64,    1,    2,  128,    4,    8,
          8,    8,    8,   16,   32,   64,  128,    2,  128,   64
      };

   // Terminal transition matrix ...
      const int16 lrstar_parser_tables::Tm[69] = 
      {
        147, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205,
       -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225,
       -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245,
       -246, -247, -248, -249, -250, -251, -252, -253, -254
      };

   // Terminal transition matrix row ...
      const uint8 lrstar_parser_tables::Tr[148] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0
      };

   // Terminal transition matrix column ...
      const uint8 lrstar_parser_tables::Tc[70] = 
      {
          0,    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
         19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
         39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
         59,   60,   61,   62,   63,   64,   65,   66,   67,   68
      };

   // Nonterminal transition matrix ...
      const int16 lrstar_parser_tables::Nm[2415] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,   -6,  112,  141,    0,   82,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, -133,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   98, -107,  -45,   -8,  100,  109,  110,  118,  -44,
        -44,  136,   81,  -55,  120,    0,  131,  -54,   79,    0,   72,  108,  130,    6,  131,  -52,    0, -132,   67,    0,
        130,    0, -102,  -52,   56,  -72,  -69,    6,  129,    0, -129,    0,    0,    0,    0,   80,    0, -103,  -50,    0,
        -96,    0,    0, -121, -120,    0,  -49,  146,    0,  -47, -121, -120,    0,    0,  -67,    0,    0,   67,    0,  -56,
         44,    0,  139, -135,   52,    0,    6,    0,   31,    0,   53, -131,   33,   55,  -48,   31,    0,    0,   54,    0,
         32,   47,    0,    0,    0,   33,   46,   32,  -26,    0,  -26,    0,   33, -113,    6,    0,  -73,    0,    0,    0,
          0,    6, -134, -118,    0,    0,  -70,    0,  -99, -125, -118,    0,    0,  -31,    0,  -31, -125,   45,    0,    0,
          0, -108,    0,  -33,    0,  -33, -126, -164, -109,    0, -119,    0,    0, -126, -165,    0,  -25, -119,  -25,    0,
        -27,  106,  -27,  125,    0,   51,   56,  -72,  -68,    0,    0,    0,    0,    0,    0,  -29,    0,  -29,  -28,  -24,
        -28,  -24,  -30,    0,  -30,    0,  -18,   83,    0,  107,    0,  107,    0,  -32,    0,  -32,  123,    0,    0,    0,
          0,    0,    0,    0,    0,    0,   52,    0, -136,    0,    0,    0,   53,    0,   50,   55,  105,    0,    0,    0,
         54,  121,    0,    0,    0,    0,   84,    0,  104,    0,  -63,    0,    0,  -65,    0,   39,    0,  -19,  -73,    0,
        -21,    0, -117,    0, -138,   87,  -66,   21,  -70,   89, -125, -121, -120, -121, -120,    0,    0,    0,    0,   88,
          0,    0, -115,   20, -162,   94, -161, -126,    0,    0,    0,   90,    0,  -23,    0,    0,   31,    0,   31,    0,
         41,    0,    0,    0,    0,    0,   58,    0,   32,    0,   32,    0,    0,   33,    0,   33,    0, -173,    0,    0,
          0,    0,    6,    0,    6,    0,    0, -116,    0,    0,    0, -118,    0, -118, -121, -120,    0, -125,    0, -125,
          0,    0,    0,    0,    0,   93,   29, -161,    0,    0,   35,   34,   35,   34, -126, -163, -126, -163, -119,   31,
       -119,    0,    0,    0,    0,    0,    0,    0, -121, -120,    0,   32,    0,    0,    0,    0,   33,    0, -155,   28,
         29, -161,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,   31, -118,    0,    0,    0,    0,    0,
       -125,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,  -16,   35,   34,    0,    0, -126, -163,    6,
          0, -119,    0,    0,    0,    0,    0,    0, -118, -121, -120,    0,    0,    0, -125,    0,    0,    0, -153, -156,
         28,   29, -161,    0,    0,    0, -110,   35,   34,    0,    0, -126, -163,    0,   31, -119,    0,    0,    0,    0,
          0,    0,    0, -121, -120,    0,   32,    0,    0,    0,   92,   33, -152, -156,   28,   29, -161,    0,    0,    0,
          6,    0,    0,    0,    0,    0,    0,    0,   31, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,
         32,    0,    0,    0,    0,   33,    0,    0,   35,   34,    0,    0, -126, -163,    6,    0, -119,    0,    0,    0,
          0,    0,    0, -118, -121, -120,    0,    0,   27, -125,   95,   26,    0, -152, -156,   28,   29, -161,    0,    0,
          0,    0,   35,   34,    0,    0, -126, -163,    0,   31, -119,    0,    0,    0,    0,    0,    0,    0, -121, -120,
          0,   32,  101, -146,   25,   26,   33, -152, -156,   28,   29, -161,    0,    0,    0,    6,    0,    0,    0,    0,
          0,    0,    0,   31, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,   32,    0,    0,    0,    0,
         33,    0,    0,   35,   34,    0,    0, -126, -163,    6,    0, -119,    0,    0,    0,    0,    0,    0, -118,    0,
          0, -121, -120,   27, -125, -124, -146,   25,   26,    0, -152, -156,   28,   29, -161,    0,    0,   35,   34,    0,
          0, -126, -163,    0,    0,   30,   31,    0,    0,    0,    0,    0,    0,    0,    0, -121, -120,    0,   32,  124,
       -146,   25,   26,   33, -152, -156,   28,   29, -161,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,
         31, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,
         35,   34,    0,    0, -126, -163,    6,    0,   30,    0,    0,    0,    0,    0,    0, -118,    0,    0, -121, -120,
         27, -125, -105, -146,   25,   26,    0, -152, -156,   28,   29, -161,    0,    0,   35,   34,    0,    0, -126, -163,
          0,    0,   30,   31,    0,    0,    0,    0,    0,    0,    0,    0, -121, -120,    0,   32,  142, -146,   25,   26,
         33, -152, -156,   28,   29, -161,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,   31, -118,    0,
          0,    0,    0,   27, -125,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,   35,   34,    0,
          0, -126, -163,    6,    0,   30,    0,    0,    0,    0,    0,    0, -118,    0,    0, -121, -120,   27, -125,   69,
       -146,   25,   26,    0, -152, -156,   28,   29, -161,    0,    0,   35,   34,    0,    0, -126, -163,    0,    0,   30,
         31,    0,    0,    0,    0,    0,    0,    0,    0, -121, -120,    0,   32,   76, -146,   25,   26,   33, -152, -156,
         28,   29, -161,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,   31, -118,    0,    0,    0,    0,
         27, -125,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,  -97,   35,   34,    0,    0, -126, -163,
          6,    0,   30,    0,    0,    0,    0,    0,    0, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,  -98,   35,   34,    0,    0, -126, -163, -121, -120,   30,  -59,  -60, -146,
         25,   26,    0, -152, -156,   28,   29, -161,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   31,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,    0,
          0,    0,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,    0, -118,    0,    0,    0,    0,   27,
       -125,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   35,   34,    0,    0,  144, -163,    0,
          0,   30, -121, -120,  143,  -58,  -60, -146,   25,   26,    0, -152, -156,   28,   29, -161,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
          0,    0,    0,    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
          0,    0, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,   35,   34,    0,    0,  144, -163,    0,    0,   30, -121, -120,  145,  -58,  -60, -146,   25,   26,    0, -152,
       -156,   28,   29, -161,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,    0,    0,    0,    0,    0,    0,
          0,    6,    0,    0,    0,    0,    0,    0,    0,    0, -118,    0,    0, -121, -120,   27, -125,   42, -146,   25,
         26,    0, -152, -156,   28,   29, -161,    0,    0,   35,   34,    0,    0,  144, -163,    0,    0,   30,   31,    0,
          0,    0,    0,    0,    0,  105,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0, -180,    0,    0,
          0,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,    0, -118,    0,    0, -121, -120,   27, -125,
       -123, -146,   25,   26,    0, -152, -156,   28,   29, -161,    0, -112,   35,   34,    0,    0, -126, -163,    0,    0,
         30,   31,    0,    0,    0,    0,    0,    0,  146,    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
        -57,    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,    0,    0, -118,    0,    0,    0,
          0,   27, -125,    0,    0,    0,    0,    0,    0,    0,   68,    0,    0,    0, -186,   35,   34,    0,    0, -126,
       -163, -121, -120,   30,    0,   75, -146,   25,   26,    0, -152, -156,   28,   29, -161,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
          0,    0,    0,   33,    0,    0, -182,    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,  132,    0,    0,
          0, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,    0, -184,    0, -185,    0,    0,    0, -176,
         35,   34,    0,    0, -126, -163,  -89,    0,   30,  -65,   91,    3,  -81,    0,  -80,  -88,   15,   17,   18,    0,
          0,    0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,    0,   14,    0,  -85,   20,
         11,   16,    0,    0,    0,   12,    0,    0,    0,    0,    0,    8,    9,    0,    0,   13,    6,    4,  -86,  -87,
          0,    0,   22,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         10,    0,    0, -111,    0,    0,    0,    0,    0,    5,  -89,    0,  -46,  -65,  -90,    3,  -81,    0,  -80,  -88,
         15,   17,   18,    0,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,    0,
         14,    0,  -85,   20,   11,   16,    0,    0,    0,   12,    0,    0,    0,    0,    0,    8,    9,    0,    0,   13,
          6,    4,  -86,  -87,    0,    0,   22,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,   10,    0,    0, -111,    0,    0,    0,    0,    0,    5,  -89,    0,  -46,  -65,  -76,    3,
        -81,    0,  -80,  -88,   15,   17,   18,    0,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,
          0,    0,    7,    0,   14,    0,  -85,   20,   11,   16,    0,    0,    0,   12,   74,    0,    0,    0,    0,    8,
          9,  -95, -100,   13,    6,    4,  -86,  -87,    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,   10,    0,    0, -111,    0,  -89,    0,    0,  -65,    5,  -78,  -81,
        -46,  -80,  -88,   15,   17,   18,    0,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,
          0,    7,    0,   14,    0,  -85,   20,   11,   16,    0,    0,    0,   12,   74,    0,    0,    0,    0,    8,    9,
       -101, -100,   13,    6,    4,  -86,  -87,    0,    0,   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,   59,    0,    0,    0,   10,    0,    0, -111,    0,    0,    0,    0,    0,    5,  -89,    0,  -46,
        -65,  -76,    3,  -81,    0,  -80,  -88,   15,   17,   18,    0,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,
        -83,  -84,    0,    0,    0,    7,    0,   14,    0,  -85,   20,   11,   16,    0,    0,    0,   12,   74,    0,    0,
          0,    0,    8,    9, -175, -100,   13,    6,    4,  -86,  -87,    0,    0,   73,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,    0,    0, -111,    0,    0,    0,    0,    0,
          5,  -89,    0,  -46,  -65,  -76,    3,  -81,    0,  -80,  -88,   15,   17,   18,    0,    0,    0,  -66,   21,    0,
         19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,    0,   14,    0,  -85,   20,   11,   16,    0,    0,    0,
         12,   74,  137,    0,    0,    0,    8,    9,  -92, -100,   13,    6,    4,  -86,  -87,    0,    0,   73,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,    0,    0, -111,    0,
          0,    0,    0,    0,    5,  -89,    0,  -46,  -65,  -76,    3,  -81,    0,  -80,  -88,   15,   17,   18,    0,    0,
          0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,    0,   14,    0,  -85,   20,   11,
         16,    0,    0,    0,   12,   74,  138,    0,    0,    0,    8,    9,  -93, -100,   13,    6,    4,  -86,  -87,    0,
          0,   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
          0,    0, -111,    0,  -89,  -40,  117,  -65,    5,  -78,  -81,  -46,  -80,  -88,   15,   17,   18,    0,    0,    0,
        -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,    0,   14,  105,  -85,   20,   11,   16,
          0,    0,    0,   12,    0,   84,    0,  -53,    0,    8,    9,    0,    0,   13,    6,    4,  -86,  -87,    0,    0,
         58,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,    0,    0,    0,   10,    0,
          0, -111,    0,    0,    0,    0,    0,    5,    0,    0,  -46,  -89,  -40,  140,  -65,  -76,    3,  -81,    0,  -80,
        -88,   15,   17,   18,    0,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,  -83,  -84,    0,    0,    0,    7,
          0,   14,    0,  -85,   20,   11,   16,    0,    0,    0,   12,   74,   84,    0,    0,    0,    8,    9,  -94, -100,
         13,    6,    4,  -86,  -87,    0,    0,   73, -121, -120,  -15,  -12,   24, -146,   25,   26,    0, -152, -156,   28,
         29, -161,    0,    0,    0,   10,    0,    0, -111,    0,    0,    0,  126,   31,    5,    0,    0,  -46,   49,    0,
        103,  128,    0,    0,    0,   32,    0,    0,    0,   74,   33,   77,  102,  -14,    0,    0, -101, -100,    0,    6,
          0,    0,  127,    0,  -10,  115,    0,    0, -118,    0,    0,    0,    0,   27, -125,    0,    0,    0,    0,   59,
        -11,    0,  -13,    0,    0,    0, -114,   35,   34,    0,    0, -126, -163,    0,    0,   30, -129,  -89,  135,   63,
        -65,   -3,    3,  -81,    0,  -80,  -88,   15,   17,   18,   64,    0,    0,  -66,   21,    0,   19,    0,  -82,    0,
        -83,  -84,    0,    0,  -31,    7,   48,   14,   97,  -85,   20,   11,   16,   78,  -33,    0,   12,   71,   33, -144,
       -122,  -36,    8,    9, -139, -140,   13,    6,    4,  -86,  -87,  -27,    0,   22,  -41,    0, -141, -142, -167,    0,
       -143,    0, -183,    0, -174, -166,  -29,    0,  -35,  -28,  -51,   10,    0,  -30, -111, -169, -168,    0,    0,  -37,
          5,    0,  116,  -46,  -32, -129,  -89,  119,    1,  -65,   -2,    3,  -81,   62,  -80,  -88,   15,   17,   18,   64,
         65,   23,  -66,   21,  111,   19,  122,  -82, -154,  -83,  -84,   85,  134,  -31,    7,   43,   14,   36,  -85,   20,
         11,   16,   70,  -33,  113,   12,   38,   33,   37,  -22,  -43,    8,    9,   57,  133,   13,    6,    4,  -86,  -87,
        -27,    2,   22,  -34,   86,   96, -127, -167, -172,  114,   61, -125, -150, -173, -166,  -29,   59,  -42,  -28, -178,
         10,   66,  -30, -111, -169, -168, -171, -170, -126,    5,   60,   40,  -46,  -32, -151
      };

   // Nonterminal transition matrix row ...
      const uint16 lrstar_parser_tables::Nr[148] = 
      {
       2325, 2325, 2236, 2325, 2148, 2325, 2325,  224, 2325,  269, 1193, 2148,  224,  269,  204, 2325,   90, 2236, 2148,  224,
        204, 2325, 2003, 2236, 2325, 2325, 2325,  388, 2236, 2325, 2325,   75,   36, 1256,  103,  110,   22,  835, 2325, 2236,
         19,  388,   75, 1840, 1341,  869, 2148, 2236, 1924, 2090, 1593,   36,   11, 2325,  224, 2325, 2236,  269, 2325,  269,
       1425,  483,  449,  354,  293,  291,  544, 2325, 2236, 1256,    0,  103,  110, 1672,    4,   22,  835,  578,    1,   82,
       2148, 2325,  224,  145,    5,    6, 2236, 2236, 1756, 2325,    8, 2325, 2325, 2325, 2325, 2325, 2325,  641,   90, 2148,
         19, 2236, 2003,    7, 2236,    2, 2325,   22, 2325,  269,  224, 2325, 1193, 1509,  204, 2148,  675,  147, 2325, 2148,
         32,    3, 1341,  224, 2325, 2236,   19, 1840, 1924,   90, 2090,    9, 2236,  869,  738, 2148,  772, 1042, 1130,   24,
       2236, 2003,  388,   75, 2325, 1256,  954, 2325
      };

   // Nonterminal transition matrix column ...
      const uint8 lrstar_parser_tables::Nc[255] = 
      {
          3,    3,   56,   56,    3,   56,   56,    3,    3,    2,    2,   56,   56,   56,   56,   56,    3,    2,   56,   56,
          3,    3,    2,    2,   56,   56,   56,   74,   74,   74,   74,   74,   74,   74,    2,    2,    2,   74,   84,    3,
          3,   48,   48,   48,    2,    2,   84,   84,    3,   56,   56,   74,   48,   48,   84,   84,   74,   74,    2,    2,
          3,    3,   48,   48,   48,    1,    1,    4,    1,    1,    4,    4,    4,    4,    4,   30,   30,    5,    5,    5,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    7,    9,   10,   10,   10,   10,   11,   12,   13,   20,
         48,   48,   49,   49,   49,   49,   56,   56,   24,   25,   25,   33,   53,   53,   54,   54,   54,   54,   84,   84,
         84,   84,    0,   74,   74,   60,   60,   87,   41,   41,   61,   61,    1,    1,    1,    1,    2,   64,   64,    3,
          3,    3,    3,    3,    3,    4,    4,    5,    6,    6,   65,   65,    7,    7,    8,    9,    9,   10,   10,   11,
         11,   12,   12,   13,   13,   13,   14,   14,   14,   14,   15,   15,   15,   16,   16,   17,   18,   19,   19,   20,
         20,   21,   21,   21,   21,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
         36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
         56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   68,   69,   70,   71,   72,   73,   74,
         75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89
      };

   // Reduction matrix ...
      const uint8 lrstar_parser_tables::Rm[5] = 
      {
          0,    0,    0,  126,   61
      };

   // Reduction matrix row ...
      const int16 lrstar_parser_tables::Rr[148] = 
      {
          0,    0,    1,   77,    0,    0,  128,    0,    0,    0,    0,    0,    0,    0,    0,   75,    0,   75,   75,   75,
          0,   62,    0,   79,    0,  145,  148,    0,  157,  159,  119,    0,    0,    0,    0,    0,    0,    0,  130,  128,
          0,    0,    0,    0,    0,    0,    0,  106,    0,    0,    0,    0,    0,   71,   20,    5,   74,   75,    0,  179,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    5,    0,    0,    0,    0,    0,   64,    0,  177,    0,   91,  149,  158,  160,  147,  137,    0,  128,    0,
          0,    0,   39,    0,    0,    0,    9,    0,    0,    0,    7,  181,    0,    0,    0,    0,    0,    0,    5,    4,
          0,    0,    0,    0,  104,    9,    0,    0,   17,    0,   39,    0,    0,    0,    0,   38,    0,    0,    0,    0,
          0,    0,    0,    0,   -2,    0,    0,    0
      };

   // Reduction matrix column ...
      const uint8 lrstar_parser_tables::Rc[70] = 
      {
          0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    1,    2,    0,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
          1,    1,    1,    1,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
          1,    1,    1,    0,    0,    0,    0,    0,    0,    1
      };

   // Production lengths (minus one) ...
      const int8 lrstar_parser_tables::PL[255] = 
      {
          1,    0,    0,    1,    3,    0,    2,    0,    2,   -1,    1,    0,    0,    0,    0,    0,    3,    0,    0,    0,
         -1,    0,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    2,    5,   -1,
          0,    3,    1,    1,    0,    2,    0,    2,    3,    0,    2,    2,    0,    2,    0,    2,    3,    3,    0,    2,
          0,    0,   -1,    1,    1,    0,    0,    2,    0,    2,    0,    0,    0,    0,    0,   -1,    1,    0,    1,    1,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,    3,    2,    2,    2,    2,    3,    3,    7,    1,
          0,    1,    1,    2,   -1,    1,    0,    2,    3,    3,    2,    0,    1,    2,    1,    1,    1,    1,    0,    0,
          0,    0,    2,    0,    2,    0,    0,    2,   -1,    0,   -1,    2,    1,    1,    1,    1,    3,   -1,    2,    0,
          0,    0,    0,    0,    0,    0,    0,    2,    0,    2,    0,    0,    0,    2,    0,    1,    0,    0,    2,    0,
          2,    0,    2,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    1,    3,    5,   -1,    0,   -1,
          2,   -1,    1,    2,    1,    1,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // Terminal action number ...
      const int8 lrstar_parser_tables::tact_numb[70] = 
      {
          0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1
      };

   // Init action function pointers ...
      void (*lrstar_parser_tables::init_func[2]) () =
      {
         lrstar_parser_actions::init_actions,
         lrstar_parser_actions::term_actions
      };

   // Terminal action function pointers ...
      int (*lrstar_parser_tables::tact_func[1]) (int& t) =
      {
         lrstar_term_actions::error
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "PLM_ParserTables_instantiate.h"
