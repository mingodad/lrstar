# This Makefile is generated by lrgen.
# lrgen will NOT overwrite this Makefile.
#
#
# This Makefile will build the 'Goodbye' parser sample program.
#
#
# When using a development tree, invoke like this:
#
#  make \
#     LRSTAR_INSTALL_ROOT=${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}/usr/local \
#     -f <directory of grammar>/Goodbye.make
#
#
# When using lrstar installed in /usr/local, invoke like this:
#
#  make \
#     -f <directory of grammar>/Goodbye.make
#
#
# The resultant executable, having the 'basename' of the grammar,
# will be placed into a subdirectory of:
#
#  ${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}
#
GRM		:= Goodbye
Goodbye_GRMOPT	:= d m
Goodbye_LGROPT	:= 

.DEFAULT_GOAL	:= recurse	# In sample.defs


# A development environment has files in $(LRSTAR_INSTALL_ROOT), post build.
# For a non-development environment, files should be installed in /usr/local.
#
INSTALL_ROOT	:=			\
	$(if $(LRSTAR_INSTALL_ROOT),$(LRSTAR_INSTALL_ROOT),/usr/local)


include $(INSTALL_ROOT)/make/sample.defs

# Create a list of source files for each listed grammar.  Only the
# first-listed grammar's main() is included.
#
$(foreach g,$(GRM),				\
    $(eval $(g)_SOURCE=$(g)_Lexer.cpp		\
	$(g)_Main.cpp				\
	$(g)_Parser.cpp				\
	$(g)_user.cpp))				\
$(eval $(firstword $(GRM))_SOURCE += $(firstword $(GRM))_user_main.cpp)


# Create a list of object files for each included grammar.  The object
# files are dependent on a sentinel file created when running lrgen on
# the grammars; this ensures the source files are recompiled if the
# grammars are changed.
#
$(foreach g,$(GRM),				\
    $(eval $(g)_OBJS=$($(g)_SOURCE:.cpp=.o))	\
    $(eval $($(g)_OBJS): $(g).sentinel))

$(foreach g,$(GRM),				\
    $(foreach f,$($(g)_SOURCE),$(eval $(f): $(g).sentinel)))


# Use the 'lrgen' function to process the grammars.
#
$(foreach g,$(GRM),	\
    $(eval $(call lrgen,$(GRM_DIR),$(g),$($(g)_GRMOPT),$($(g)_LGROPT))))


# A master list of all source files that need to be compiled.
#
SOURCE	:=					\
	$(foreach g,$(GRM),$($(g)_SOURCE))


OBJS	:=				\
	$(SOURCE:.cpp=.o)		\
	$(INSTALL_ROOT)/lib/lrstar.a


$(OBJS):	$(foreach g,$(GRM),$(g).sentinel )


# The created executable will have the same name as the first grammar
# in $(GRM).
#
$(firstword $(GRM)):	$(OBJS)
	$(CC) $(CXXFLAGS) -o $@ $(OBJS);


clean:
	rm $(OBJS) $(GRM);

-include $(SOURCE:.cpp=.d)
