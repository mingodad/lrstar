/* Copyright (c) 2023, 2024 Logic Magicians Software
 * BSD 3 License
 *
 *  This syntax & lexical grammar and code parses JSON files, and
 *  reproduces the input on stdout in a pretty-printed format.
 *
 *  The JSON language specification can be found here:
 *
 *    https://datatracker.ietf.org/doc/html/rfc8259
 *
 *  It serves as an example of how to annotate AST nodes with
 *  synthesized data, to use the direction of the AST traversal, and
 *  to perform different tasks on different traversals of the AST.
 *
 *  It can be built & run using 'precommit-test'.
 *
 *  For a hands-on use, it can be built from the source directory with
 *  a command like this in a 'built' development tree:
 *
 *   make \
 *     LRSTAR_INSTALL_ROOT=${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}/usr/local \
 *     -f ${LRSTAR_DIR}/examples/JSON/JSON.make
 *
 *  It can be run with:
 *
 *   ${LRSTAR_BUILD_DIR}/${LRSTAR_BUILD_TYPE}/examples/JSON/JSON
 *     --output /tmp/output ./tiny.json
 *
 *  The output of the program will be placed into the file specified
 *  for the '--output' option.
 *
 *  Additional sample JSON files can be found here:
 *
 *    https://microsoftedge.github.io/Demos/json-dummy-data/
 *
 *  The input text of the program generated by this grammar processed
 *  in three phases:
 *
 *   o Phase 1
 *
 *     Constant values (null, true, false), integers, reals, strings
 *
 *     On the top-down pass of traversal 1 over the AST, these node
 *     types are processed, and the AST is annotated with a structure
 *     corresponding to the type of the Node.
 *
 *     These nodes are processed first because they have no
 *     dependencies on other Nodes.
 *
 *   o Phase 2
 *
 *     On the bottom-up pass of traversal 2 over the AST, these the
 *     Member construct is processed, and a Node annotation is created
 *     that contains both the 'key' and 'value' of the member.
 *     Additionally, under the same constrains, Arrays are processed
 *     so that each element is added to a Node annotation.
 *
 *     At these end of this phase, all data is connected into the data
 *     structure stored in the Node annotations.
 *
 *   o Phase 3
 *
 *     During the top-down pass of traversal 3 over the AST, the
 *     constructed data structure is printed.
 *
 *     The output from processing the tiny.json file is:
 *
 *       [
 *        {
 *          "alpha" :     null
 *        },
 *        {
 *          "beta" :     true
 *        },
 *          null,
 *        {
 *          "gamma" :     false,
 *          "zeta" : 6.5
 *        },
 *        {
 *          "iota" : [
 *            10,
 *            {
 *              "gungla" : "fnord"
 *            }
 *          ]
 *        }
 *      ]
 */
<error>        => error();
<string>       => lookup();
<integer>      => lookup();
<real>         => lookup();

Goal
   : Value/','+ <eof>                      *> goal_
   ;

Value
   : Array
   | Object
   | <string>                              *> string_(1)
   | <integer>                             *> integer_(1)
   | <real>                                *> real_(1)
   | 'null'                                *> null_
   | 'false'                               *> false_
   | 'true'                                *> true_
   ;

Array
   :  '[' Value/','+ ']'                   *> array_
   ;

Object
   :  '{' Member/','+ '}'                  *> object_
   ;


Member
   : String ':' Value                      *> member_
   ;


String
   : <string>                              *> string_(1)
   ;

/*--- End. ---*/
/* Local Variables:      */
/* mode: c               */
/* c-basic-offset: 4     */
/* tab-width: 4          */
/* indent-tabs-mode: nil */
/* End:                  */
