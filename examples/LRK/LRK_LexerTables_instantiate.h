// Generated by DFA 24.0.016
// DO NOT EDIT.

#if !defined(__LRK__LexerTables_INSTANTIATE)
#define __LRK__LexerTables_INSTANTIATE

// Include this file only once in a project.  It instantiates a lexer.
#define MAX    0x80000000

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const int templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::n_term_numb = 61;

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const int templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::n_Tm = 1632;

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const int templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::n_Tr = 61;

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const int templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::n_Tc = 256;

// Terminal number ...
static const int8 term_numb_[61] = { 

       0,     2,    -1,    -1,     0,     0,     0,     0,     0,     0, 
       0,     0,     2,     2,     2,     2,     2,     2,     0,     0, 
       2,     2,     2,     2,     2,     2,     0,     2,     2,     2, 
       2,     2,     2,     2,     2,     2,     2,     0,     2,     2, 
       0,     0,     2,     0,    11,    12,    13,    14,     3,    15, 
       6,     8,    16,     7,     4,     9,    10,     1,    18,    -1, 
       0, 
};

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const T_term_numb *templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::term_numb = &term_numb_[0];

// Terminal transition matrix ...
static const uint8 Tm_[1632] = {

      60,     2,     2,    57,    50,    51,    52,    53,    18,    19, 
      60,    54,     1,     1,    12,     1,     1,     1,     1,     1, 
      13,    14,     1,     1,     1,     1,    15,    16,    17,     1, 
      55,    56,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     0,     0,     0,     2,     2,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     3,     3,     0,     0, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
       3,     3,     3,     3,     3,     3,     3,     3,     6,     6, 
       6,     0,     6,     6,     5,     6,     6,     6,     6,     6, 
       6,     6,     6,     6,     6,     6,     6,     6,     6,     6, 
       6,     6,     6,     6,     6,     6,     6,     6,     6,     6, 
       7,     7,     7,     0,     7,     7,     5,     7,     7,    59, 
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7, 
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7, 
       7,     7,     6,     6,     6,     0,     6,     6,     8,     6, 
       6,     6,     6,     6,     6,     6,     6,     6,     6,     6, 
       6,     6,     6,     6,     6,     6,     6,     6,     6,     6, 
       6,     6,     6,     6,     9,     9,     9,     0,     9,     9, 
      37,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,    10,    10,    10,     0, 
      10,    10,     8,    10,    10,    59,    10,    10,    10,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,    10,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,     9,     9, 
       9,     0,     9,     9,    40,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
       9,     9,     9,     9,     9,     9,     9,     9,     9,     9, 
      11,    11,    11,     0,    11,    11,    41,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,     0,    11,    11,    43,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,    11,    11,    11,    11,    11,    11, 
      11,    11,    11,    11,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,    20,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,    21,     1, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,    22,     1,     1,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,     1,     1,     1,     1,     1,     1,    23, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,    24,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,    25,     1,     1,     1, 
       1,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,    26,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     4,     0,     0,     3,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,    27,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,    44, 
       1,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,    28,     1,     1,     1, 
       1,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,    29, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,    30,     1,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,    31,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,    45, 
       1,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,     1,     1,     1,    46,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,    32,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,     1,     1,     1,    33,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,    34,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,    47,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,    35,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,    36,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,     1,     1,     1,    38,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,    39,     1,     1,     1,     1,     1, 
       1,     1,     0,     0,     7,     7,     7,     0,     7,     7, 
      37,     7,     7,    59,     7,     7,     7,     7,     7,     7, 
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7, 
       7,     7,     7,     7,     7,     7,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,     1,     1,    48,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,    42,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0, 
       7,     7,     7,     0,     7,     7,    40,     7,     7,    59, 
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7, 
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7, 
       7,     7,    10,    10,    10,     0,    10,    10,    41,    10, 
      10,    59,    10,    10,    10,    10,    10,    10,    10,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,    10,    10, 
      10,    10,    10,    10,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,    49, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     0,     0,    10,    10,    10,     0, 
      10,    10,    43,    10,    10,    59,    10,    10,    10,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,    10,    10, 
      10,    10,    10,    10,    10,    10,    10,    10,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     1,     0,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     1,     0,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0, 
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       0,     0, 
};

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const T_Tm *templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::Tm = &Tm_[0];

// Terminal transition matrix row ...
static const uint16 Tr_[61] = { 

       0,    32,    64,    96,   128,   160,   192,   224,   256,   288, 
     320,   352,   384,   416,   448,   480,   512,   544,   576,   608, 
     640,   672,   704,   736,   768,   800,   832,   864,   896,   928, 
     960,   992,  1024,  1056,  1088,  1120,  1152,  1184,  1216,  1248, 
    1280,  1312,  1344,  1376,  1408,  1440,  1472,  1504,  1536,  1568, 
    1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600, 
    1600, 
};

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const T_Tr *templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::Tr = &Tr_[0];

// Terminal transition matrix column ...
static const uint8 Tc_[256] = {

    0,     0,     0,     0,     0,     0,     0,     0,     0,     1, 
    2,     1,     1,     1,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     3,     0,     0,     0, 
    0,     0,     1,     0,     0,     0,     0,     0,     0,     0, 
    4,     5,     6,     0,     7,     0,     8,     9,    10,    10, 
   10,    10,    10,    10,    10,    10,    10,    10,     0,    11, 
    0,     0,     0,     0,     0,    12,    12,    12,    12,    12, 
   12,    12,    12,    12,    12,    12,    12,    12,    12,    12, 
   12,    12,    12,    12,    12,    12,    12,    12,    12,    12, 
   12,     0,     0,     0,     0,    12,     0,    13,    12,    14, 
   15,    16,    17,    18,    19,    20,    12,    12,    21,    12, 
   22,    23,    24,    12,    25,    26,    27,    28,    12,    12, 
   12,    29,    12,    30,     0,    31,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
    0,     0,     0,     0,     0,     0, 
};

template<typename T_term_numb, typename T_Tm, typename T_Tr, typename T_Tc>
const T_Tc *templ_lrstar_lexer<T_term_numb, T_Tm, T_Tr, T_Tc>::Tc = &Tc_[0];

template class templ_lrstar_lexer<int8, uint8, uint16, uint8>;

#endif
