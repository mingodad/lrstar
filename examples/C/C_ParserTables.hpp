
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    C_ParserTables.hpp (generated by LRSTAR 24.0.017)

      #include "lrstar_basic_defs.h"
      #include "lrstar_parser_tables.h"
      #include "C_ParserTables.h"
      #include "C_Actions.h"

      static int n_terms      =   82; // Number of terminals.
      static int n_heads      =   70; // Number of nonterminals.
      static int n_prods      =  206; // Number of productions.
      static int n_states     =  216; // Number of states.
      static int accept_state =  215; // Accept state.
      static int n_termactns  =    2; // Number of terminal actions.
      static int n_nodenames  =  106; // Number of node names.
      static int n_nodeactns  =  106; // Number of node actions.
      static int eof_symb     =    1; // <eof> symbol number.
      static int err_used     =    0; // <error> used in grammar?

   // Terminal symbols of the grammar ...
      const char* lrstar_parser_tables::term_symb[82] = 
      {
         "<error>",
         "<eof>",
         "<identifier>",
         "<string>",
         "<constant>",
         "\'?\'",
         "\'||\'",
         "\'&&\'",
         "\'|\'",
         "\'^\'",
         "\'&\'",
         "\'==\'",
         "\'!=\'",
         "\'<\'",
         "\'>\'",
         "\'<=\'",
         "\'>=\'",
         "\'<<\'",
         "\'>>\'",
         "\'+\'",
         "\'-\'",
         "\'*\'",
         "\'/\'",
         "\'%\'",
         "\'typedef\'",
         "\',\'",
         "\';\'",
         "\'int\'",
         "\'char\'",
         "\'long\'",
         "\'void\'",
         "\'short\'",
         "\'const\'",
         "\'float\'",
         "\'double\'",
         "\'signed\'",
         "\'unsigned\'",
         "{typename}",
         "\'extern\'",
         "\'static\'",
         "\'auto\'",
         "\'=\'",
         "\'struct\'",
         "\'{\'",
         "\'}\'",
         "\'union\'",
         "\':\'",
         "\'enum\'",
         "\'(\'",
         "\')\'",
         "\'[\'",
         "\']\'",
         "\'...\'",
         "\'goto\'",
         "\'continue\'",
         "\'break\'",
         "\'return\'",
         "\'if\'",
         "\'else\'",
         "\'switch\'",
         "\'while\'",
         "\'do\'",
         "\'for\'",
         "\'case\'",
         "\'default\'",
         "\'*=\'",
         "\'/=\'",
         "\'%=\'",
         "\'+=\'",
         "\'-=\'",
         "\'<<=\'",
         "\'>>=\'",
         "\'&=\'",
         "\'^=\'",
         "\'|=\'",
         "\'++\'",
         "\'--\'",
         "\'~\'",
         "\'!\'",
         "\'sizeof\'",
         "\'.\'",
         "\'->\'"
      };

   // Nonterminal symbols of the grammar ...
      const char *lrstar_parser_tables::head_symb[70] = 
      {
         "Goal",
         "ExternalDef",
         "ExtDeclaration",
         "Declaration",
         "FunctionDef",
         "FunctionDecl",
         "FunctionBody",
         "DeclarationSpec",
         "TypeSpec",
         "StorageClassSpec",
         "InitDeclarator",
         "StructSpec",
         "UnionSpec",
         "StructDeclaration",
         "StructDeclarator",
         "EnumSpec",
         "Enumerator",
         "Declarator",
         "DirectDeclarator",
         "Pointer",
         "Arguments",
         "AbsArguments",
         "ArgDecl",
         "AbsArgDecl",
         "TypeName",
         "AbstractDeclarator",
         "DirectAbstractDeclarator",
         "Init",
         "Stmt",
         "Case",
         "Default",
         "Label",
         "Block",
         "ConstExp",
         "Exp",
         "AssignExp",
         "CondExp",
         "CastExp",
         "UnaryExp",
         "PostfixExp",
         "Subscript",
         "Args",
         "PrimaryExp",
         "Identifier",
         "TypedefIdentifier",
         "ExternalDef*",
         "TypeSpec+",
         "Pointer?",
         "(Pointer? TypedefIdentifier)",
         "(Pointer? TypedefIdentifier)/','+",
         "DeclarationSpec*",
         "InitDeclarator/','*",
         "DeclarationSpec+",
         "InitDeclarator/','+",
         "Declaration*",
         "StructDeclaration+",
         "StructDeclarator/','+",
         "Enumerator/','+",
         "ConstExp?",
         "TypeSpec*",
         "ArgDecl/','+",
         "AbsArgDecl/','+",
         "Init/','+",
         "','?",
         "Exp?",
         "Stmt*",
         "('case' ConstExp ':' Stmt*)",
         "('case' ConstExp ':' Stmt*)*",
         "('default' ':' Stmt*)?",
         "AssignExp/','*"
      };

   // Terninal action names found in the grammar ...
      const char *lrstar_parser_tables::tact_name[2] = 
      {
         "error",
         "lookup"
      };

   // Node names found in the grammar ...
      const char * lrstar_parser_tables::node_name[106] = 
      {
         "goal_",
         "extdef_",
         "extdecl_",
         "decl_",
         "funcdef_",
         "funcdecl_",
         "funcbody_",
         "typespec_",
         "storagespec_",
         "type_",
         "enumspec_",
         "structspec_",
         "unionspec_",
         "storageclass_",
         "declarator_",
         "declaratorinit_",
         "struct_",
         "union_",
         "structdecl_",
         "structdeclarator_",
         "enumident_",
         "enumequals_",
         "directdecl_",
         "ident_",
         "arraydecl_",
         "pointer_",
         "argdecl_",
         "absargdecl_",
         "absarg_",
         "absdeclarator_",
         "constexp_",
         "absarray_",
         "absfunc_",
         "assign_",
         "init_",
         "empty_",
         "exp_",
         "goto_",
         "continue_",
         "break_",
         "return_",
         "labeledstmt_",
         "block_",
         "if_",
         "ifelse_",
         "switch_",
         "while_",
         "do_",
         "for_",
         "case_",
         "default_",
         "label_",
         "condexp_",
         "assignment_",
         "comma_",
         "equals_",
         "muleq_",
         "diveq_",
         "modeq_",
         "addeq_",
         "subeq_",
         "shleq_",
         "shreq_",
         "andeq_",
         "xoreq_",
         "oreq_",
         "question_",
         "or_",
         "and_",
         "bitor_",
         "bitxor_",
         "bitand_",
         "eq_",
         "ne_",
         "lt_",
         "gt_",
         "le_",
         "ge_",
         "shl_",
         "shr_",
         "add_",
         "sub_",
         "mul_",
         "div_",
         "mod_",
         "cast_",
         "preinc_",
         "predec_",
         "complement_",
         "addressof_",
         "contentsof_",
         "positive_",
         "negative_",
         "not_",
         "sizeof_",
         "array_",
         "member_",
         "funccall_",
         "ptrto_",
         "postinc_",
         "postdec_",
         "subscript_",
         "arguments_",
         "string_",
         "const_",
         "identifier_"
      };

   // Head symbol numbers for the productions ...
      const uint8 lrstar_parser_tables::head_numb[206] = 
      {
          0,    1,    1,    2,    2,    3,    4,    5,    6,    7,    7,    8,    8,    8,    8,    8,    8,    8,    8,    8,
          8,    8,    8,    8,    8,    9,    9,    9,   10,   10,   11,   11,   11,   12,   12,   12,   13,   14,   14,   14,
         15,   15,   15,   16,   16,   17,   17,   18,   18,   18,   18,   18,   19,   19,   20,   20,   21,   21,   22,   22,
         23,   23,   23,   23,   24,   24,   25,   25,   25,   26,   26,   26,   26,   27,   27,   28,   28,   28,   28,   28,
         28,   28,   28,   28,   28,   28,   28,   28,   28,   29,   30,   31,   32,   33,   34,   34,   35,   35,   35,   35,
         35,   35,   35,   35,   35,   35,   35,   35,   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
         36,   36,   36,   36,   36,   36,   36,   36,   37,   37,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
         38,   39,   39,   39,   39,   39,   39,   39,   40,   41,   42,   42,   42,   42,   43,   44,   45,   45,   46,   46,
         47,   47,   48,   49,   49,   50,   50,   51,   51,   51,   52,   52,   53,   53,   54,   54,   55,   55,   56,   56,
         57,   57,   58,   58,   59,   59,   60,   60,   61,   61,   62,   62,   63,   63,   64,   64,   65,   65,   66,   67,
         67,   68,   68,   69,   69,   69
      };

   // First tail symbol index into the tail list ...
      const uint16 lrstar_parser_tables::f_tail[207] = 
      {
          0,    2,    3,    4,    8,   11,   14,   16,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
         31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   43,   45,   49,   54,   56,   60,   65,   68,   70,   73,
         74,   76,   80,   85,   86,   89,   90,   92,   93,   96,  100,  104,  108,  110,  113,  114,  117,  118,  121,  122,
        124,  124,  125,  126,  128,  129,  131,  132,  133,  135,  138,  141,  145,  149,  150,  154,  155,  157,  160,  162,
        164,  167,  169,  170,  175,  182,  190,  195,  202,  211,  212,  213,  215,  219,  220,  221,  224,  225,  228,  231,
        234,  237,  240,  243,  246,  249,  252,  255,  258,  259,  264,  267,  270,  273,  276,  279,  282,  285,  288,  291,
        294,  297,  300,  303,  306,  309,  312,  315,  318,  319,  323,  324,  326,  328,  330,  332,  334,  336,  338,  340,
        342,  346,  347,  351,  354,  358,  361,  363,  365,  366,  367,  368,  369,  370,  373,  374,  375,  375,  377,  378,
        380,  380,  381,  383,  384,  387,  387,  389,  389,  390,  393,  394,  396,  397,  400,  400,  402,  403,  405,  406,
        409,  410,  413,  413,  414,  414,  416,  417,  420,  421,  424,  425,  428,  428,  429,  429,  430,  430,  432,  436,
        436,  438,  438,  441,  441,  442,  445
      };

   // Tail symbol numbers ...
      const int8 lrstar_parser_tables::tail[445] = 
      {
        -45,    1,   -2,   -4,   24,  -46,  -49,   26,  -50,  -51,   26,  -52,  -53,   26,   -5,   -6,  -50,  -17,  -54,  -32,
         -8,   -9,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,  -15,  -11,  -12,   38,   39,   40,  -17,
        -17,   41,  -27,   42,    2,   42,   43,  -55,   44,   42,    2,   43,  -55,   44,   45,    2,   45,   43,  -55,   44,
         45,    2,   43,  -55,   44,  -46,  -56,   26,   46,  -33,  -17,   46,  -33,  -17,   47,    2,   47,   43,  -57,   44,
         47,    2,   43,  -57,   44,    2,    2,   41,  -33,  -18,  -19,  -18,  -43,   48,  -17,   49,  -18,   50,  -58,   51,
        -18,   48,  -20,   49,  -18,   48,  -21,   49,   21,  -59,   21,  -59,  -19,  -60,  -60,   25,   52,  -61,  -61,   25,
         52,  -17,  -52,  -17,  -52,  -25,  -52,  -25,  -46,  -46,  -25,  -19,  -26,  -19,  -26,   50,  -58,   51,   48,  -25,
         49,  -26,   50,  -58,   51,  -26,   48,  -21,   49,  -35,   43,  -62,  -63,   44,   26,  -34,   26,   53,  -43,   26,
         54,   26,   55,   26,   56,  -64,   26,  -31,  -28,  -32,   57,   48,  -34,   49,  -28,   57,   48,  -34,   49,  -28,
         58,  -28,   59,   48,  -34,   49,   43,  -29,  -30,   44,   60,   48,  -34,   49,  -28,   61,  -28,   60,   48,  -34,
         49,   26,   62,   48,  -64,   26,  -64,   26,  -64,   49,  -28,  -67,  -68,  -43,   46,   43,  -54,  -65,   44,  -36,
        -35,  -34,   25,  -35,  -36,  -38,   41,  -35,  -38,   65,  -35,  -38,   66,  -35,  -38,   67,  -35,  -38,   68,  -35,
        -38,   69,  -35,  -38,   70,  -35,  -38,   71,  -35,  -38,   72,  -35,  -38,   73,  -35,  -38,   74,  -35,  -37,  -36,
          5,  -36,   46,  -36,  -36,    6,  -36,  -36,    7,  -36,  -36,    8,  -36,  -36,    9,  -36,  -36,   10,  -36,  -36,
         11,  -36,  -36,   12,  -36,  -36,   13,  -36,  -36,   14,  -36,  -36,   15,  -36,  -36,   16,  -36,  -36,   17,  -36,
        -36,   18,  -36,  -36,   19,  -36,  -36,   20,  -36,  -36,   21,  -36,  -36,   22,  -36,  -36,   23,  -36,  -38,   48,
        -24,   49,  -37,  -39,   75,  -38,   76,  -38,   77,  -37,   10,  -37,   21,  -37,   19,  -37,   20,  -37,   78,  -37,
         79,  -38,   79,   48,  -24,   49,  -42,  -39,   50,  -40,   51,  -39,   80,  -43,  -39,   48,  -41,   49,  -39,   81,
        -43,  -39,   75,  -39,   76,  -34,  -69,    3,    4,  -43,   48,  -34,   49,    2,    2,  -45,   -1,   -8,  -46,   -8,
        -19,  -47,  -44,  -48,  -49,   25,  -48,  -50,   -7,  -10,  -51,   25,  -10,   -7,  -52,   -7,  -10,  -53,   25,  -10,
        -54,   -3,  -13,  -55,  -13,  -14,  -56,   25,  -14,  -16,  -57,   25,  -16,  -33,  -59,   -8,  -22,  -60,   25,  -22,
        -23,  -61,   25,  -23,  -27,  -62,   25,  -27,   25,  -34,  -65,  -28,   63,  -33,   46,  -65,  -67,  -66,   64,   46,
        -65,  -35,  -69,   25,  -35
      };

   // Arguments for token actions ...
      const int8 lrstar_parser_tables::arga[82] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1
      };

   // First arguments for productions ...
      int8 lrstar_parser_tables::argx[206] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,   -1,   -1,   -1,    0,    0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,    0,   -1,   -1,    0,    0,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1
      };

   // Second arguments for productions ...
      int8 lrstar_parser_tables::argy[206] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1
      };

   // Boolean matrix ...
      const uint8 lrstar_parser_tables::Bm[230] = 
      {
          0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    4,   64,   12,    1,    0,    0,   32,    0,    0,    4,
          0,    0,    3,    0,    0,   16,    0,    0,    0,    5,    0,    4,    0,    0,    1,    0,    4,   64,    0,    1,
          0,    4,    0,   32,    0,   64,    4,    0,    0,   12,    0,    0,   12,   98,   32,    1,    8,   12,   98,    0,
          1,    8,    4,   64,   12,    5,    0,    4,    0,    0,    0,    0,  240,  255,    0,    0,    0,   16,    0,    4,
          0,    0,    0,    5,   24,   12,   98,    4,    1,    8,    0,    0,    0,    8,    0,    0,    1,    0,    0,    4,
          0,    0,    5,    0,    4,   64,    0,    5,    0,    0,   65,    0,    0,   68,    0,    0,    4,   64,  132,    1,
          0,   12,   98,   98,  161,    8,    0,   64,    0,    0,   64,    4,    5,    0,    0,    1,    2,    0,    4,   64,
         12,   17,    0,   64,   12,   21,    0,   64,   12,    5,    0,    0,  128,    0,    0,   12,   98,   34,  161,    8,
          0,    0,    0,    1,    0,  240,  255,  128,    0,  192,  255,    0,    0,  128,  255,    0,    0,    0,  255,    0,
          0,    0,  254,    0,    0,    0,  252,    0,    0,    0,  248,    0,    0,    0,  240,    0,    0,  224,    0,    0,
        192,    0,    0,   64,    0,    5,    0,    0,   64,    0,    0,    4,   64,  128,    1,    0,    0,    0,  128,  224,
        255,    0,    0,    0,   64,    0,    0,    0,    0,    1
      };

   // Boolean matrix row (for state)...
      const uint8 lrstar_parser_tables::Br[216] = 
      {
          0,    5,   10,   14,   17,   20,   23,   26,   31,   36,    0,   41,   41,   41,    0,   44,   36,   47,   52,   57,
         62,   26,    2,   44,   14,   67,   14,   17,   14,   17,   47,   20,   67,   23,   10,   72,   75,   80,   85,   57,
         57,   57,   57,   57,   57,   57,   57,   57,   52,   90,   72,    2,   94,   99,   62,    2,   94,   26,  104,   57,
         67,  108,   23,   17,  111,  116,   17,  111,  121,  126,   20,   57,   57,   57,   57,   57,   57,   57,   57,   57,
         57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
         57,   57,   67,   57,   67,    2,  129,  133,   57,   85,   94,  138,   26,  142,   57,  146,    2,   90,  108,   67,
         57,  111,   20,  150,   57,  111,   20,  150,  155,   67,    3,    3,   57,  160,  160,  160,  155,  160,   36,  165,
        169,  173,  177,  181,  185,  189,  189,  193,  193,  193,  193,  196,  196,  199,  199,    0,    0,    0,   90,   94,
          2,   94,   57,   26,  202,   57,    2,  206,   52,   10,  146,   90,    2,  211,   57,    3,    3,   94,   57,   57,
         57,  215,   57,   57,   57,  133,  133,  133,  160,    3,  219,  155,   14,  155,   57,   57,  221,    0,  133,    3,
        155,    1,  225,    3,   57,  206,  150,   57,    2,    0,  150,  155,  155,    0,  155,    0
      };

   // Boolean matrix column (displacement) ...
      const uint8 lrstar_parser_tables::Bc[82] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
          3,    3,    3,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    0,    0,    0,
          4,    4
      };

   // Boolean matrix filter/mask value ...
      const uint8 lrstar_parser_tables::Bf[82] = 
      {
          1,    2,    4,    8,    8,   16,   32,   64,  128,    1,    2,    4,    4,    8,    8,    8,    8,   16,   16,   32,
         32,   64,  128,  128,    2,    1,    2,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    8,    8,
          8,   16,    4,   32,   64,    4,  128,    4,    1,    2,    4,    8,   16,   32,   32,   32,   32,   32,   64,   32,
        128,   32,   32,    1,    2,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    8,    8,    8,    8,    8,
         16,   16
      };

   // Terminal transition matrix ...
      const int16 lrstar_parser_tables::Tm[492] = 
      {
          0,    0,  165,    0,  165,    0,  165,  204,  165,  -87,    0,    0,    0, -155,    0,  168,  -80, -154, -151,  173,
        -36,  182,  193,  194,  203,  179,  191,  180,  192,   66,    0,    0,    0,    0,  178, -140,    0,    0,  109,  211,
          0,   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   44,   45,    0, -154, -151,  119,  195,    0,
          0,    0,    0,    0,   39,   40,   41,   46,   47, -150,   43,  197,  -42,    0,    0,    0,  108,  -72,    0,   42,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   44,   45,    0, -154, -151,  184,  -75,    0,    0,    0,
          0,    0,   39,   40,   41,   46,   47, -150,   43,   14,  -92,    0,    0,    0,   38,    0,    0,   42,  129,  130,
        131,  132,  133,    0,  134,  135,  136,  137,   44,   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         39,   40,   41,   46,   47, -150,   43, -154,    0,  138,   -5,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,
        -20,  -21,   12,   60,  -74,   13,  213,   11,   58, -144,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -25,  -26,  -27,    0,   59,   62,
         10,  165,  -76,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20,  -21,   12,   63,  -85,   13,    0,   11,
        164, -153,   26,  -57,  111,  -78,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20,  -21,   12,   27,  -32,
         13,  -91,   11,  103,  -51, -142,  -25,  -26,  -27,    0,   59,    0,   10,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0, -146, -147,    0,  120,  101,  102,  104, -154, -151,  119,  -77,
        -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20,  -21,   12,   48,  -41,   13,  209,   11,   38,  -70,    0,
         42,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   44,   45,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,   39,   40,   41,   46,   47, -150,   43, -154,    4,   16,   -4,  -11,  -12,  -13,  -14,  -15,  -16,
        -17,  -18,  -19,  -20,  -21,   12,   14,  -31,   13,  124,   11,    9,  -48,  -49,  -55,    0,    0,    0,    0,    0,
        200,    0,  188,    0,    0,  207,  206,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  -25,  -26,  -27,
         18,    0,  215,   10,   28,   72,  113,  -79,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20,  -21,   12,
         29,  -35,   13,  183,   11,  115,  162,  -71,   76,   77,   78,   79,   80,   81,   82,   83,   84,   88,   89,   85,
         86,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,   74,   75,    0,  114,   71,   87,   24,   72,
         69,   -3,  -11,  -12,  -13,  -14,  -15,  -16,  -17,  -18,  -19,  -20,  -21,   12,   25,  -34,   13,  174,   11,   20,
        -50,  -69,   76,   77,   78,   79,   80,   81,   82,   83,   84,   88,   89,   85,   86,   91,   92,   93,   94,   95,
         96,   97,   98,   99,  100,   73,   74,   75,   90,   19,   71,   87
      };

   // Terminal transition matrix row ...
      const uint16 lrstar_parser_tables::Tr[216] = 
      {
        330,  330,  330,  330,  330,  330,  330,  438,  330,  330,  330,  438,  222,  384,  330,  330,  330,  330,  276,  276,
        147,  438,  330,  330,  147,  199,  199,  330,   13,  330,  330,  438,   13,  330,  330,  438,  438,  222,  276,   55,
         55,  276,  276,  276,  276,  276,  276,   17,  276,  330,  438,  438,  222,  147,  147,  222,  384,  384,  147,  276,
        199,  276,  222,  330,  330,  330,  330,  438,   93,  330,  147,  276,  276,  276,  276,  276,  276,  276,  276,  276,
        276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
        276,  276,  330,  276,  330,  384,  199,  199,  276,  276,   13,  330,  384,  199,  276,  199,  276,  438,   55,  199,
        276,  222,   17,  438,  276,  384,  199,  222,   93,  330,  222,  384,  276,   13,    4,    6,   93,    0,  330,  384,
        438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,  330,  330,  330,  222,  199,
        147,   93,  276,  199,  199,  276,   13,  147,  276,  330,  199,  384,   55,  330,  276,  276,   13,  199,  276,  276,
        276,  330,  276,  276,  276,    4,    6,    0,    2,   55,  438,   93,   55,   93,  276,  276,  330,  330,    2,    4,
         93,  330,  330,    6,  276,  199,  276,  276,   17,  330,  147,   93,   93,  330,   93,  330
      };

   // Terminal transition matrix column ...
      const uint8 lrstar_parser_tables::Tc[82] = 
      {
         52,   52,    0,   52,    1,   52,    1,   47,   48,   49,   24,   25,   26,   27,   28,   29,   30,   31,   32,   35,
         36,   53,   33,   34,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   47,   48,
         49,   50,   15,   16,   17,   18,   19,   20,   21,   22,   51,   23,   24,   25,   26,   27,   28,   29,   30,   31,
         32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
         52,   53
      };

   // Nonterminal transition matrix ...
      const int16 lrstar_parser_tables::Nm[1283] = 
      {
          0,    0,    0,    0,    0,    0,    0, -143, -145,  175, -139,   33,    7, -141, -152,    0,    0,    0,  -47, -129,
       -128, -173,    0, -141, -152,  123,    7,   22,    7,    0,   37,    0,  -47,    0,  -47,    0,    8, -179,    0,  116,
         37,    0,    0,   57,    0,    0,    0,    0,    0,    0,    8,    0,   53,  139, -108, -128,    0,    0, -141, -152,
        140, -108, -128,    0,    0, -141, -152,  141, -108, -128,    0,    0, -141, -152,    0,   37,    0,    0,  142, -108,
       -128,    0,   37, -141, -152,  143, -108, -128,    0,   37, -141, -152,  144, -108, -128,    0,    0, -141, -152,    0,
         37,    0,    0,  145, -108, -128,    0,   37, -141, -152,  146, -108, -128,    0,   37, -141, -152,  147, -108, -128,
          0,    0, -141, -152,    0,   37,    0,    0,  148, -108, -128,    0,   37, -141, -152,  149, -108, -128,    0,   37,
       -141, -152,  150, -108, -128,    0,    0, -141, -152,    0,   37,    0,    0,  151, -108, -128,    0,   37, -141, -152,
        152, -108, -128,    0,   37, -141, -152,  153, -108, -128,    0,    0, -141, -152,    0,   37,    0,    0,  154, -108,
       -128,    0,   37, -141, -152,  155, -108, -128,    0,   37, -141, -152,  156, -108, -128,    0,    0, -141, -152,    0,
         37,    0,    0,  157, -108, -128,    0,   37, -141, -152,  190, -108, -128,    0,   37, -141, -152,  -97,   35, -108,
         36,    0,    0, -141, -152,   37,    0,  -98,   35, -108,   36,    0,   37, -141, -152,  -99,   35, -108,   36,    0,
         37, -141, -152,    0,    0, -100,   35, -108,   36,    0,   37, -141, -152, -101,   35, -108,   36,    0,   37, -141,
       -152,    0,    0, -102,   35, -108,   36,    0,   37, -141, -152, -103,   35, -108,   36,    0,   37, -141, -152,    0,
          0, -104,   35, -108,   36,    0,   37, -141, -152, -105,   35, -108,   36,    0,   37, -141, -152,    0,    0, -106,
         35, -108,   36,    0,   37, -141, -152, -107,   35, -108,   36,    0,   37, -141, -152,   50, -108, -128,    0,    0,
       -141, -152,   37,   50, -108, -128,    0,    0, -141, -152,   37,    0,    0,  -44,    0,    0,    0,   37,   50, -108,
       -128,  -37,    0, -141, -152,   37,  -95,   35, -108,   36,    0,    0, -141, -152,    0,    0,  -38,    0,    0,    0,
         37, -205,   35, -108,   36,    0,    0, -141, -152,   37,   50, -108, -128,    0,    0, -141, -152,   50, -108, -128,
          0,    0, -141, -152,   37,   50, -108, -128,  210,    0, -141, -152,   37,    0,    0, -183,    0,  117,    0,   37,
          0,    0,    0, -183,    0,  171,    0,   37,  -73,   35, -108,   36,    0,    0, -141, -152,  -94,   35, -108,   36,
          0,    0, -141, -152,    0,    0, -191,  -94,   35, -108,   36,   37,    0, -141, -152,    0,    0,  185,    0,   37,
        -94,   35, -108,   36,    0,    0, -141, -152,  186,    0,   37,  -94,   35, -108,   36,    0,    0, -141, -152,    0,
          0,  187,    0,   37,  -73,   35, -108,   36,    0,    0, -141, -152,  198,    0,   37,    0,    0,  -94,   35, -108,
         36,  158, -190, -141, -152,    0,    0,   37,    0,  110, -204,   35, -108,   36,    0,  160, -141, -152,  159,    0,
         37,    0,  -94,   35, -108,   36,    0,    0, -141, -152,    0,    0,    0,   37,  -94,   35, -108,   36,    0,    0,
       -141, -152,  161,  177,    0,   37,    0,    0,    0,  176,    0,    0,    0,    0,    0,  177,    0,   37,    0,    0,
          0,  189,  -94,   35, -108,   36,    0,    0, -141, -152,  -94,   35, -108,   36,    0,    0, -141, -152,    0,    0,
          0,    0,    0,  177,    0,   37,    0,    0,    0,  199,    0,  177,    0,   37,  123,    7,    0,  208,  -24,  -22,
          0,  -47,    0,    0,  -59,    7, -178,    0,  -24,  -22,    0,  -47,    0,  122,    0, -171,    0,    0,    0,    8,
          0, -159,  -10,    0,    0,    0,  -23,    0,    0,    8,    0,   -9,    0,    0,    0,    0,  -23, -132,  -24,  -22,
       -141, -152,    0,   65,    0,    0,    0,    0,    0,    0,    0,    0,  121, -176,    0,    0,    0,   37,    0,    0,
          0, -158,    0,    0,    0,    0,  -23, -133, -128,  -24,  -22, -141, -152,    0,   65,  -94,   35, -108,   36,    0,
          0, -141,  127,    0, -177,    0,    0,    0,   37,    0,  -82,    0, -158,    0,    0,    0,  126,  -23,   37,    0,
          0,    0, -197,  -94,   35, -108,   36,  128,    0, -141,  127,    0,    0,  -94,   35, -108,   36,    0,  -82, -141,
        127,    0,    0,    0,  126,    0,   37,    0,  -82,    0,  -81,    0,    0,    0,  126,  128,   37,    0,    0,    0,
        181,  -94,   35, -108,   36,  128,    0, -141,  127,    0,    0,  -94,   35, -108,   36,    0,  -82, -141,  127,    0,
          0,    0,  126,    0,   37,    0,  -82,    0,  196,    0,    0,    0,  126,  128,   37,    0,    0,    0,  -86,  -94,
         35, -108,   36,  128,    0, -141,  127,    0,    0,  -94,   35, -108,   36,    0,  -82, -141,  127,    0,    0,    0,
        126,    0,   37,    0,  -82,    0,  -84,    0,    0,    0,  126,  128,   37,   33,    7,    0,  -88,  -24,  -22,    0,
        -47,  128,   65, -169,    0,    0,    0,    0,    0,    0,    0,   64, -176,    0,    0,    0,    0,    0,    8,    0,
       -158,    0,   33,    7,    0,  -23,  -24,  -22,    0,  -47,    0,    0, -172, -171,    0,    0,    0,    0,   70,    0,
        -10, -134, -128,  -24,  -22, -141, -152,    8,   65,   -9,    0,    0,    0,    0,  -23,    0,    0,  125, -176,    0,
          0,    0,   37,    0,    0,    0, -158,    0,    0,    0,    0,  -23, -135, -128,  -24,  -22, -141, -152,    0,    0,
        -59,    7,  -65,    0,  -24,  -22,   57,  -47,    0,    0,    0, -171,  -63,   37,    0,  163,   57, -159,  -10,    0,
          0,    0,  -23,    0,    0,   53,    0,   -9,    0,    0,  -58,    7,  -23, -187,  -24,  -22,    0,  -47,    0,    0,
          0, -170,    0,    0,    0,  169,    0,    0,  -10,    0,    0,    0,    0,    0,    0,    8,    0,   -9,    0,    0,
          0,    0,  -23,   50, -108, -128,  -24,  -22, -141, -152,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0, -183,    0,   49,    0,   37,    0,  -53,    0, -185,    0,   22,    7,    0,  -23,  -24,  -22,    0,  -47,    0,
          0,    0, -170, -175,    0,    0,   34,    0,    0,  -10,    0,    0, -181,    0,    0,    0,    8,    0,   -9,   68,
          0,    0,    0,  -23, -131,  -24,  -22, -141, -152,    0,   65,    0,    0,  116,    0,    0,    0,   57,    0,   67,
       -176,    0,    0,    0,   37,    0,  163,    0, -158,    0,    0,    0,    0,  -23,  -94,   35, -108,   36,  -24,  -22,
       -141, -152,    0,  106,    0,  105,    0,    0,    0, -138, -128,  -24,  -22, -141, -152,  107,    0,   37, -171,  -63,
          0, -158,    0,   57,    0,  -10,  -23,    0,    0,    0,   37,    0,  163,    0,   -9,    0,    0,    0,    0,  -23,
        -94,   35, -108,   36,  -24,  -22, -141, -152,    0,  106,   21,  166,    0,  -24,  -22,    0,  -47,    0,   15,   32,
       -164,  107,    0,   37,    0,  112,   30, -158,    0,  118, -180,    0,  -23,    0, -161,    0, -158,  214,    0,    0,
          0,  -23,  -73,   35, -108,   36,  -24,  -22, -141, -152,    0,    0,   32, -163,   31,    0,    0,    0,    0,    0,
        -29,    0,    0,    0,    0,   37,    0, -161,    0, -159,    0,    0,    0,    0,  -23, -136, -128,  -24,  -22, -141,
       -152,    0,    0, -189, -170,  -62,    0,    0,  170,   57,    0,  -10,    0,    0,    0,    0,   37,    0,  163,    0,
         -9,    0,    0,    0,    0,  -23, -137, -128,  -24,  -22, -141, -152,    0,  172, -188, -170,  -62,    0,    0,  170,
         57,    0,  -10,    0,    0,    0,    0,   37,   56,  163,    0,   -9,    0,    0,    0,    0,  -23,  -58,    7,   51,
       -186,  -24,  -22,    0,  -47,    0,   55, -188, -170,  -62,    0,    0,   54,   57,    0,  -10,    0,    0,    0,    0,
         52,   56,   53,    0,   -9,    0,    0,    0,    0,  -23,    6,    7,   -2,   -6,  -24,  -22,  205,  -47,    1,    3,
       -168, -166, -157,    2,    5,   -8,  112,   17,  -10,   -1,   61, -180,   23,  201, -162,    8,  167,   -9,  212, -200,
        202,  -90,  -23
      };

   // Nonterminal transition matrix row ...
      const uint16 lrstar_parser_tables::Nr[216] = 
      {
       1250, 1250, 1250, 1250, 1089, 1250, 1250, 1250, 1089,  971, 1250, 1250, 1250, 1250, 1089, 1122,  793,  971, 1122,  942,
       1217, 1250, 1250,  942, 1250, 1250, 1250,  793, 1250, 1001,  971, 1250, 1250, 1250,  822, 1250, 1250, 1250, 1034, 1001,
        614,  645,  839,  870, 1153, 1184, 1047,    7,  464, 1250, 1250, 1250, 1250, 1089,  880, 1250, 1250, 1250,   27,  376,
       1089, 1250, 1250,  614,  645,  574,  839,  645,  655, 1089, 1250,   52,   59,   66,   77,   84,   91,  102,  109,  116,
        127,  134,  141,  152,  159,  166,  177,  184,  191,  202,  217,  227,  235,  245,  253,  263,  271,  281,  289,  299,
        307,  477,    0,  490,    1, 1250,  870, 1250, 1034, 1080, 1250,  910, 1250, 1153,  384, 1184, 1250, 1250, 1250,  971,
        314,  645, 1250, 1250,  322,  645, 1250, 1250,  683,    2, 1250, 1250,  502, 1250, 1250, 1250,  693, 1250,   11, 1250,
       1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
       1250, 1250,   17, 1250, 1001,  346, 1250, 1250,  408,  584, 1047, 1250, 1250,   25,  337, 1250, 1250, 1250,  416,  427,
        440, 1250,  514,  209,  361, 1250, 1250, 1250, 1250, 1250, 1250,  721, 1250,  731,  451,  542, 1250, 1250, 1250, 1250,
        759, 1250, 1250, 1250,  550, 1250, 1250,  369, 1250, 1250, 1250,  769,  655, 1089,  655, 1250
      };

   // Nonterminal transition matrix column ...
      const uint8 lrstar_parser_tables::Nc[206] = 
      {
         12,   12,   12,   19,   19,   12,    2,    9,    3,   11,   11,   27,   27,   27,   27,   27,   27,   27,   27,   27,
         27,   27,   27,   27,   27,   18,   18,   18,   10,   10,   32,   32,   32,    4,    4,    4,   19,   12,   12,   12,
          5,    5,    5,   21,   21,    0,    0,    1,    1,    1,    1,    1,   25,   25,    2,    2,    9,    9,    3,    3,
         10,   10,   10,   10,   11,   11,   12,   12,   12,   16,   16,   16,   16,   18,   18,   27,   27,   27,   27,   27,
         27,   27,   27,   27,   27,   27,   27,   27,   27,   23,    6,   32,   15,   19,   21,   21,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
          3,   23,   23,   23,   23,   23,   23,   23,    4,    5,    6,    6,    6,    6,    7,   24,    8,    8,    9,    9,
         10,   10,   11,   12,   12,   13,   13,   14,   14,   14,   15,   15,   16,   16,   17,   17,   18,   18,   19,   19,
         20,   20,   21,   21,   22,   22,   23,   23,   24,   24,   25,   25,   26,   26,   27,   27,   28,   28,   29,   30,
         30,   31,   31,   32,   32,   32
      };

   // Reduction matrix ...
      const uint8 lrstar_parser_tables::Rm[5] = 
      {
          0,    0,    0,   28,  174
      };

   // Reduction matrix row ...
      const int16 lrstar_parser_tables::Rr[216] = 
      {
        156,  165,  167,    0,    0,    0,   -2,   45,    0,    0,  184,    0,    0,    0,  174,  160,    0,    7,    0,  182,
         60,   46,    0,   52,   40,    0,   30,    0,   33,    0,  196,    0,    0,   28,    0,   96,  128,  130,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,    0,   54,   66,   61,    0,   56,   67,    0,  182,
          0,    0,   43,    0,    0,    0,    0,    0,    0,  160,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,  203,    0,    0,   64,    0,    0,    0,  192,    0,   68,   60,  182,   60,    0,    0,    0,    0,
          0,    0,    0,   39,    0,    0,    0,  152,    0,    0,    0,    0,  194,    0,    0,    0,    0,    0,    0,    0,
        110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,    0,  148,
          0,  149,    0,   66,    0,    0,    0,    0,  193,    0,   61,    0,    0,    0,    0,    0,    0,  195,    0,    0,
          0,    0,  194,    0,    0,    0,    0,    0,    0,    0,  109,    0,    0,    0,    0,  194,   83,  199,    0,    0,
          0,  201,   89,    0,  194,    0,    0,    0,    0,  196,    0,    0,  202,  196,  198,    0
      };

   // Reduction matrix column ...
      const uint8 lrstar_parser_tables::Rc[82] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
          2,    0,    2,    2,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0
      };

   // Production lengths (minus one) ...
      const int8 lrstar_parser_tables::PL[206] = 
      {
          1,    0,    0,    3,    2,    2,    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    1,    3,    4,    1,    3,    4,    2,    1,    2,    0,
          1,    3,    4,    0,    2,    0,    1,    0,    2,    3,    3,    3,    1,    2,    0,    2,    0,    2,    0,    1,
         -1,    0,    0,    1,    0,    1,    0,    0,    1,    2,    2,    3,    3,    0,    3,    0,    1,    2,    1,    1,
          2,    1,    0,    4,    6,    7,    4,    6,    8,    0,    0,    1,    3,    0,    0,    2,    0,    2,    2,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    0,    4,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
          2,    2,    2,    2,    2,    2,    2,    2,    0,    3,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          3,    0,    3,    2,    3,    2,    1,    1,    0,    0,    0,    0,    0,    2,    0,    0,   -1,    1,    0,    1,
         -1,    0,    1,    0,    2,   -1,    1,   -1,    0,    2,    0,    1,    0,    2,   -1,    1,    0,    1,    0,    2,
          0,    2,   -1,    0,   -1,    1,    0,    2,    0,    2,    0,    2,   -1,    0,   -1,    0,   -1,    1,    3,   -1,
          1,   -1,    2,   -1,    0,    2
      };

   // Terminal action number ...
      const int8 lrstar_parser_tables::tact_numb[82] = 
      {
          0,   -1,    1,    1,    1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1
      };

   // Node number for each production ...
      const int8 lrstar_parser_tables::node_numb[206] = 
      {
          0,    1,    1,    2,    2,    3,    4,    5,    6,    7,    8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
          9,    9,   10,   11,   12,   13,   13,   13,   14,   15,   16,   16,   16,   17,   17,   17,   18,   19,   19,   19,
         10,   10,   10,   20,   21,   22,   22,   23,   14,   24,    5,    5,   25,   25,   26,   26,   27,   27,   14,   14,
         28,   28,   28,   28,    7,    7,   29,   29,   29,   30,   29,   31,   32,   33,   34,   35,   36,   37,   38,   39,
         40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   42,   52,   53,   54,   -1,   55,   56,   57,
         58,   59,   60,   61,   62,   63,   64,   65,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
         77,   78,   79,   80,   81,   82,   83,   84,   -1,   85,   -1,   86,   87,   88,   89,   90,   91,   92,   93,   94,
         94,   -1,   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,   -1,   36,  105,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1
      };

   // Node action numbers ...
      const int8 lrstar_parser_tables::nact_numb[206] = 
      {
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
         -1,   -1,   -1,   -1,   -1,   -1
      };

   // Terminal action function pointers ...
      int (*lrstar_parser_tables::tact_func[2])(void *parser, int &t) =
      {
         lrstar_term_actions::error,
         lrstar_term_actions::lookup
      };

   // Node action function pointers ...
      int (*lrstar_parser_tables::nact_func[106]) (void* v) = 
      {
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0
      };

//
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "C_ParserTables_instantiate.h"
