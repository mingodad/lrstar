
////////////////////////////////////////////////////////////////////////////////
//
//    C_ParserTables.h (generated by LRSTAR 24.0.017)

      #pragma once

      #include "lrstar_library_defs.h"

      enum nodecon
      {
         N_goal_ = 0,
         N_extdef_ = 1,
         N_extdecl_ = 2,
         N_decl_ = 3,
         N_funcdef_ = 4,
         N_funcdecl_ = 5,
         N_funcbody_ = 6,
         N_typespec_ = 7,
         N_storagespec_ = 8,
         N_type_ = 9,
         N_enumspec_ = 10,
         N_structspec_ = 11,
         N_unionspec_ = 12,
         N_storageclass_ = 13,
         N_declarator_ = 14,
         N_declaratorinit_ = 15,
         N_struct_ = 16,
         N_union_ = 17,
         N_structdecl_ = 18,
         N_structdeclarator_ = 19,
         N_enumident_ = 20,
         N_enumequals_ = 21,
         N_directdecl_ = 22,
         N_ident_ = 23,
         N_arraydecl_ = 24,
         N_pointer_ = 25,
         N_argdecl_ = 26,
         N_absargdecl_ = 27,
         N_absarg_ = 28,
         N_absdeclarator_ = 29,
         N_constexp_ = 30,
         N_absarray_ = 31,
         N_absfunc_ = 32,
         N_assign_ = 33,
         N_init_ = 34,
         N_empty_ = 35,
         N_exp_ = 36,
         N_goto_ = 37,
         N_continue_ = 38,
         N_break_ = 39,
         N_return_ = 40,
         N_labeledstmt_ = 41,
         N_block_ = 42,
         N_if_ = 43,
         N_ifelse_ = 44,
         N_switch_ = 45,
         N_while_ = 46,
         N_do_ = 47,
         N_for_ = 48,
         N_case_ = 49,
         N_default_ = 50,
         N_label_ = 51,
         N_condexp_ = 52,
         N_assignment_ = 53,
         N_comma_ = 54,
         N_equals_ = 55,
         N_muleq_ = 56,
         N_diveq_ = 57,
         N_modeq_ = 58,
         N_addeq_ = 59,
         N_subeq_ = 60,
         N_shleq_ = 61,
         N_shreq_ = 62,
         N_andeq_ = 63,
         N_xoreq_ = 64,
         N_oreq_ = 65,
         N_question_ = 66,
         N_or_ = 67,
         N_and_ = 68,
         N_bitor_ = 69,
         N_bitxor_ = 70,
         N_bitand_ = 71,
         N_eq_ = 72,
         N_ne_ = 73,
         N_lt_ = 74,
         N_gt_ = 75,
         N_le_ = 76,
         N_ge_ = 77,
         N_shl_ = 78,
         N_shr_ = 79,
         N_add_ = 80,
         N_sub_ = 81,
         N_mul_ = 82,
         N_div_ = 83,
         N_mod_ = 84,
         N_cast_ = 85,
         N_preinc_ = 86,
         N_predec_ = 87,
         N_complement_ = 88,
         N_addressof_ = 89,
         N_contentsof_ = 90,
         N_positive_ = 91,
         N_negative_ = 92,
         N_not_ = 93,
         N_sizeof_ = 94,
         N_array_ = 95,
         N_member_ = 96,
         N_funccall_ = 97,
         N_ptrto_ = 98,
         N_postinc_ = 99,
         N_postdec_ = 100,
         N_subscript_ = 101,
         N_arguments_ = 102,
         N_string_ = 103,
         N_const_ = 104,
         N_identifier_ = 105
      };


      class lrstar_parser_tables
      {
         friend class lrstar_parser;
         public:
         static const char *term_symb[    82]; // Terminal symbols of the grammar.
         static const char *head_symb[    70]; // Nonterminal symbols of the grammar.
         static const char *tact_name[     2]; // Terminal action names found in the grammar.
         static const char *node_name[   106]; // Node names found in the grammar.
         static const uint8  head_numb[   206]; // Head symbol number for a production.
         static const uint16 f_tail   [   207]; // First tail in a production.
         static const int8   tail     [   445]; // Tail symbol number.
         static const int8   arga     [    82]; // Arguments for terminal actions.
         static int8   argx     [   206]; // First arguments for productions.
         static int8   argy     [   206]; // Second arguments for productions.

         private:
         static const uint8  Bm[   230]       ; // Boolean matrix.
         static const uint8  Br[   216]       ; // Boolean matrix row.
         static const uint8  Bc[    82]       ; // Boolean matrix column.
         static const uint8 Bf[    82]       ; // Boolean matrix filter/mask.
         static const int16  Tm[   492]       ; // Terminal transition matrix.
         static const uint16 Tr[   216]       ; // Terminal transition matrix row.
         static const uint8  Tc[    82]       ; // Terminal transition matrix column.
         static const int16  Nm[  1283]       ; // Nonterminal transition matrix.
         static const uint16 Nr[   216]       ; // Nonterminal transition matrix row.
         static const uint8  Nc[   206]       ; // Nonterminal transition matrix column.
         static const uint8  Rm[     5]       ; // Reduction matrix.
         static const int16  Rr[   216]       ; // Reduction matrix row.
         static const uint8  Rc[    82]       ; // Reduction matrix column.
         static const int8   PL[   206]       ; // Production length minus one.

         static const int8   tact_numb[    82]; // Terminal action numbers.
         static const int8   node_numb[   206]; // Node numbers for the productions.
         static const int8   nact_numb[   206]; // Node action numbers for the productions.

         static void   (*init_func[    2])(void *parser); // Init action function pointers.
         static int    (*tact_func[    2])(void *parser, int &t); // Terminal action function pointers.
         static int    (*nact_func[  106]) (void* v); // Node action function pointers.
      };

//
////////////////////////////////////////////////////////////////////////////////

